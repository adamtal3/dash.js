{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":["Constants","Errors","DashConstants","DashJSError","EventBus","Events","FactoryMaker","Representation","RepresentationController","context","eventBus","getInstance","instance","realAdaptation","realAdaptationIndex","updating","voAvailableRepresentations","currentVoRepresentation","abrController","indexHandler","playbackController","metricsModel","domStorage","timelineConverter","dashManifestModel","dashMetrics","streamProcessor","manifestModel","setup","resetInitialSettings","on","QUALITY_CHANGE_REQUESTED","onQualityChanged","REPRESENTATION_UPDATED","onRepresentationUpdated","WALLCLOCK_TIME_UPDATED","onWallclockTimeUpdated","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","MANIFEST_VALIDITY_CHANGED","onManifestValidityChanged","setConfig","config","initialize","getIndexHandler","getStreamProcessor","getData","getDataIndex","isUpdating","getCurrentRepresentation","reset","off","updateData","newRealAdaptation","voAdaptation","type","streamInfo","getStreamInfo","maxQuality","getTopQualityIndexFor","id","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","trigger","DATA_UPDATE_STARTED","sender","updateRepresentations","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getMediaInfo","getQualityFor","undefined","getRepresentationForQuality","VIDEO","AUDIO","DATA_UPDATE_COMPLETED","data","currentRepresentation","i","length","updateRepresentation","addRepresentationSwitch","now","Date","currentVideoTimeMs","getTime","adaptation","addDVRMetric","manifestInfo","isDynamic","range","calcSegmentAvailabilityRange","addDVRInfo","getType","getQualityForRepresentation","voRepresentation","indexOf","isAllRepresentationsUpdated","ln","segmentInfoType","segmentAvailabilityRange","hasInitialization","SEGMENT_BASE","BASE_URL","segments","voReps","getIndexForAdaptation","period","mpd","manifest","index","getRepresentationsForAdaptation","updateAvailabilityWindow","resetAvailabilityWindow","forEach","rep","postponeUpdate","postponeTimePeriod","delay","update","AST_IN_FUTURE","setTimeout","e","r","representation","streamMetrics","getMetricsFor","STREAM","metrics","manifestUpdateInfo","getCurrentManifestUpdate","alreadyAdded","repInfo","err","repSwitch","DYNAMIC","ignorePostponeTimePeriod","segmentAvailabilityTimePeriod","end","start","liveDelay","computeLiveDelay","segmentDuration","DVRWindowSize","SEGMENTS_UPDATE_FAILED_ERROR_CODE","SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE","error","representationInfo","mediaType","addManifestUpdateRepresentationInfo","presentationTimeOffset","startNumber","setPlaybackQuality","updateManifestUpdateInfo","latency","getCurrentRepresentationSwitch","getValue","doNotUpdateDVRWindowOnBufferUpdated","oldQuality","newQuality","isNaN","setSavedBitrateSettings","newDuration","duration","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../streaming/constants/Constants';\nimport Errors from '../../core/errors/Errors';\nimport DashConstants from '../constants/DashConstants';\nimport DashJSError from '../../streaming/vo/DashJSError';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Representation from '../vo/Representation';\n\nfunction RepresentationController() {\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        realAdaptation,\n        realAdaptationIndex,\n        updating,\n        voAvailableRepresentations,\n        currentVoRepresentation,\n        abrController,\n        indexHandler,\n        playbackController,\n        metricsModel,\n        domStorage,\n        timelineConverter,\n        dashManifestModel,\n        dashMetrics,\n        streamProcessor,\n        manifestModel;\n\n    function setup() {\n        resetInitialSettings();\n\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.on(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\n    }\n\n    function setConfig(config) {\n        // allow the abrController created in setup to be overidden\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.streamProcessor) {\n            streamProcessor = config.streamProcessor;\n        }\n    }\n\n    function initialize() {\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getData() {\n        return realAdaptation;\n    }\n\n    function getDataIndex() {\n        return realAdaptationIndex;\n    }\n\n    function isUpdating() {\n        return updating;\n    }\n\n    function getCurrentRepresentation() {\n        return currentVoRepresentation;\n    }\n\n    function resetInitialSettings() {\n        realAdaptation = null;\n        realAdaptationIndex = -1;\n        updating = true;\n        voAvailableRepresentations = [];\n        abrController = null;\n        playbackController = null;\n        metricsModel = null;\n        domStorage = null;\n        timelineConverter = null;\n        dashManifestModel = null;\n        dashMetrics = null;\n    }\n\n    function reset() {\n\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.off(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\n\n        resetInitialSettings();\n    }\n\n    function updateData(newRealAdaptation, voAdaptation, type) {\n        const streamInfo = streamProcessor.getStreamInfo();\n        const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n        const minIdx = abrController.getMinAllowedIndexFor(type);\n\n        let quality,\n            averageThroughput;\n        let bitrate = null;\n\n        updating = true;\n        eventBus.trigger(Events.DATA_UPDATE_STARTED, {sender: this});\n\n        voAvailableRepresentations = updateRepresentations(voAdaptation);\n\n        if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\n            averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);\n            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);\n        } else {\n            quality = abrController.getQualityFor(type, streamInfo);\n        }\n\n        if (minIdx !== undefined && quality < minIdx) {\n            quality = minIdx;\n        }\n        if (quality > maxQuality) {\n            quality = maxQuality;\n        }\n\n        currentVoRepresentation = getRepresentationForQuality(quality);\n        realAdaptation = newRealAdaptation;\n\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\n            updating = false;\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n            return;\n        }\n\n        for (let i = 0; i < voAvailableRepresentations.length; i++) {\n            indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n        }\n    }\n\n    function addRepresentationSwitch() {\n        const now = new Date();\n        const currentRepresentation = getCurrentRepresentation();\n        const currentVideoTimeMs = playbackController.getTime() * 1000;\n\n        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\n    }\n\n    function addDVRMetric() {\n        const streamInfo = streamProcessor.getStreamInfo();\n        const manifestInfo = streamInfo ? streamInfo.manifestInfo : null;\n        const isDynamic = manifestInfo ? manifestInfo.isDynamic : null;\n        const range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);\n        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getRepresentationForQuality(quality) {\n        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];\n    }\n\n    function getQualityForRepresentation(voRepresentation) {\n        return voAvailableRepresentations.indexOf(voRepresentation);\n    }\n\n    function isAllRepresentationsUpdated() {\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !Representation.hasInitialization(voAvailableRepresentations[i]) ||\n                ((segmentInfoType === DashConstants.SEGMENT_BASE || segmentInfoType === DashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function updateRepresentations(voAdaptation) {\n        let voReps;\n\n        realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index);\n        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n\n        return voReps;\n    }\n\n    function updateAvailabilityWindow(isDynamic) {\n        let voRepresentation;\n\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            voRepresentation = voAvailableRepresentations[i];\n            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);\n        }\n    }\n\n    function resetAvailabilityWindow() {\n        voAvailableRepresentations.forEach(rep => {\n            rep.segmentAvailabilityRange = null;\n        });\n    }\n\n    function postponeUpdate(postponeTimePeriod) {\n        let delay = postponeTimePeriod;\n        let update = function () {\n            if (isUpdating()) return;\n\n            updating = true;\n            eventBus.trigger(Events.DATA_UPDATE_STARTED, { sender: instance });\n\n            // clear the segmentAvailabilityRange for all reps.\n            // this ensures all are updated before the live edge search starts\n            resetAvailabilityWindow();\n\n            for (let i = 0; i < voAvailableRepresentations.length; i++) {\n                indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n            }\n        };\n\n        updating = false;\n        eventBus.trigger(Events.AST_IN_FUTURE, { delay: delay });\n        setTimeout(update, delay);\n    }\n\n    function onRepresentationUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;\n\n        let r = e.representation;\n        let streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);\n        let alreadyAdded = false;\n        let postponeTimePeriod = 0;\n        let repInfo,\n            err,\n            repSwitch;\n\n        if (r.adaptation.period.mpd.manifest.type === DashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod)\n        {\n            let segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\n            let liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);\n            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;\n        }\n\n        if (postponeTimePeriod > 0) {\n            addDVRMetric();\n            postponeUpdate(postponeTimePeriod);\n            err = new DashJSError(Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE, Errors.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation, error: err});\n\n            return;\n        }\n\n        if (manifestUpdateInfo) {\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\n                repInfo = manifestUpdateInfo.representationInfo[i];\n                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {\n                    alreadyAdded = true;\n                    break;\n                }\n            }\n\n            if (!alreadyAdded) {\n                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index,\n                        streamProcessor.getType(),r.presentationTimeOffset, r.startNumber, r.segmentInfoType);\n            }\n        }\n\n        if (isAllRepresentationsUpdated()) {\n            updating = false;\n            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\n\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);\n\n            if (!repSwitch) {\n                addRepresentationSwitch();\n            }\n\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n        }\n    }\n\n    function onWallclockTimeUpdated(e) {\n        if (e.isDynamic) {\n            updateAvailabilityWindow(e.isDynamic);\n        }\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) return;\n        let manifest = manifestModel.getValue();\n        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {\n            addDVRMetric();\n        }\n    }\n\n    function onQualityChanged(e) {\n        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;\n\n        if (e.oldQuality !== e.newQuality) {\n            currentVoRepresentation = getRepresentationForQuality(e.newQuality);\n            const bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);\n            if (!isNaN(bitrate)) {\n                domStorage.setSavedBitrateSettings(e.mediaType, bitrate);\n            }\n            addRepresentationSwitch();\n        }\n    }\n\n    function onManifestValidityChanged(e) {\n        if (e.newDuration) {\n            const representation = getCurrentRepresentation();\n            if (representation && representation.adaptation.period) {\n                const period = representation.adaptation.period;\n                period.duration = e.newDuration;\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getData: getData,\n        getDataIndex: getDataIndex,\n        isUpdating: isUpdating,\n        updateData: updateData,\n        getStreamProcessor: getStreamProcessor,\n        getCurrentRepresentation: getCurrentRepresentation,\n        getRepresentationForQuality: getRepresentationForQuality,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\nexport default FactoryMaker.getClassFactory(RepresentationController);\n"]}