{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":["Constants","Errors","DashConstants","DashJSError","EventBus","Events","FactoryMaker","Representation","RepresentationController","context","eventBus","getInstance","instance","realAdaptation","realAdaptationIndex","updating","voAvailableRepresentations","currentVoRepresentation","abrController","indexHandler","playbackController","metricsModel","domStorage","timelineConverter","dashManifestModel","dashMetrics","streamProcessor","manifestModel","setup","resetInitialSettings","on","QUALITY_CHANGE_REQUESTED","onQualityChanged","REPRESENTATION_UPDATED","onRepresentationUpdated","WALLCLOCK_TIME_UPDATED","onWallclockTimeUpdated","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","MANIFEST_VALIDITY_CHANGED","onManifestValidityChanged","setConfig","config","initialize","getIndexHandler","getStreamProcessor","getData","getDataIndex","isUpdating","getCurrentRepresentation","reset","off","updateData","newRealAdaptation","voAdaptation","type","streamInfo","getStreamInfo","maxQuality","getTopQualityIndexFor","id","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","trigger","DATA_UPDATE_STARTED","sender","updateRepresentations","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getMediaInfo","getQualityFor","undefined","getRepresentationForQuality","VIDEO","AUDIO","DATA_UPDATE_COMPLETED","data","currentRepresentation","i","length","updateRepresentation","addRepresentationSwitch","now","Date","currentVideoTimeMs","getTime","adaptation","addDVRMetric","manifestInfo","isDynamic","range","calcSegmentAvailabilityRange","addDVRInfo","getType","getQualityForRepresentation","voRepresentation","indexOf","isAllRepresentationsUpdated","ln","segmentInfoType","segmentAvailabilityRange","hasInitialization","SEGMENT_BASE","BASE_URL","segments","voReps","getIndexForAdaptation","period","mpd","manifest","index","getRepresentationsForAdaptation","updateAvailabilityWindow","resetAvailabilityWindow","forEach","rep","postponeUpdate","postponeTimePeriod","delay","update","AST_IN_FUTURE","setTimeout","e","r","representation","streamMetrics","getMetricsFor","STREAM","metrics","manifestUpdateInfo","getCurrentManifestUpdate","alreadyAdded","repInfo","err","repSwitch","DYNAMIC","ignorePostponeTimePeriod","segmentAvailabilityTimePeriod","end","start","liveDelay","computeLiveDelay","segmentDuration","DVRWindowSize","SEGMENTS_UPDATE_FAILED_ERROR_CODE","SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE","error","representationInfo","mediaType","addManifestUpdateRepresentationInfo","presentationTimeOffset","startNumber","setPlaybackQuality","updateManifestUpdateInfo","latency","getCurrentRepresentationSwitch","getValue","doNotUpdateDVRWindowOnBufferUpdated","oldQuality","newQuality","isNaN","setSavedBitrateSettings","newDuration","duration","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../streaming/constants/Constants';\nimport Errors from '../../core/errors/Errors';\nimport DashConstants from '../constants/DashConstants';\nimport DashJSError from '../../streaming/vo/DashJSError';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Representation from '../vo/Representation';\n\nfunction RepresentationController() {\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        realAdaptation,\n        realAdaptationIndex,\n        updating,\n        voAvailableRepresentations,\n        currentVoRepresentation,\n        abrController,\n        indexHandler,\n        playbackController,\n        metricsModel,\n        domStorage,\n        timelineConverter,\n        dashManifestModel,\n        dashMetrics,\n        streamProcessor,\n        manifestModel;\n\n    function setup() {\n        resetInitialSettings();\n\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.on(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\n    }\n\n    function setConfig(config) {\n        // allow the abrController created in setup to be overidden\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.streamProcessor) {\n            streamProcessor = config.streamProcessor;\n        }\n    }\n\n    function initialize() {\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getData() {\n        return realAdaptation;\n    }\n\n    function getDataIndex() {\n        return realAdaptationIndex;\n    }\n\n    function isUpdating() {\n        return updating;\n    }\n\n    function getCurrentRepresentation() {\n        return currentVoRepresentation;\n    }\n\n    function resetInitialSettings() {\n        realAdaptation = null;\n        realAdaptationIndex = -1;\n        updating = true;\n        voAvailableRepresentations = [];\n        abrController = null;\n        playbackController = null;\n        metricsModel = null;\n        domStorage = null;\n        timelineConverter = null;\n        dashManifestModel = null;\n        dashMetrics = null;\n    }\n\n    function reset() {\n\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.off(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\n\n        resetInitialSettings();\n    }\n\n    function updateData(newRealAdaptation, voAdaptation, type) {\n        const streamInfo = streamProcessor.getStreamInfo();\n        const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n        const minIdx = abrController.getMinAllowedIndexFor(type);\n\n        let quality,\n            averageThroughput;\n        let bitrate = null;\n\n        updating = true;\n        eventBus.trigger(Events.DATA_UPDATE_STARTED, {sender: this});\n\n        voAvailableRepresentations = updateRepresentations(voAdaptation);\n\n        if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\n            averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);\n            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);\n        } else {\n            quality = abrController.getQualityFor(type, streamInfo);\n        }\n\n        if (minIdx !== undefined && quality < minIdx) {\n            quality = minIdx;\n        }\n        if (quality > maxQuality) {\n            quality = maxQuality;\n        }\n\n        currentVoRepresentation = getRepresentationForQuality(quality);\n        realAdaptation = newRealAdaptation;\n\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\n            updating = false;\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n            return;\n        }\n\n        for (let i = 0; i < voAvailableRepresentations.length; i++) {\n            indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n        }\n    }\n\n    function addRepresentationSwitch() {\n        const now = new Date();\n        const currentRepresentation = getCurrentRepresentation();\n        const currentVideoTimeMs = playbackController.getTime() * 1000;\n\n        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\n    }\n\n    function addDVRMetric() {\n        const streamInfo = streamProcessor.getStreamInfo();\n        const manifestInfo = streamInfo ? streamInfo.manifestInfo : null;\n        const isDynamic = manifestInfo ? manifestInfo.isDynamic : null;\n        const range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);\n        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getRepresentationForQuality(quality) {\n        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];\n    }\n\n    function getQualityForRepresentation(voRepresentation) {\n        return voAvailableRepresentations.indexOf(voRepresentation);\n    }\n\n    function isAllRepresentationsUpdated() {\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !Representation.hasInitialization(voAvailableRepresentations[i]) ||\n                ((segmentInfoType === DashConstants.SEGMENT_BASE || segmentInfoType === DashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function updateRepresentations(voAdaptation) {\n        let voReps;\n\n        realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index);\n        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n\n        return voReps;\n    }\n\n    function updateAvailabilityWindow(isDynamic) {\n        let voRepresentation;\n\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            voRepresentation = voAvailableRepresentations[i];\n            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);\n        }\n    }\n\n    function resetAvailabilityWindow() {\n        voAvailableRepresentations.forEach(rep => {\n            rep.segmentAvailabilityRange = null;\n        });\n    }\n\n    function postponeUpdate(postponeTimePeriod) {\n        let delay = postponeTimePeriod;\n        let update = function () {\n            if (isUpdating()) return;\n\n            updating = true;\n            eventBus.trigger(Events.DATA_UPDATE_STARTED, { sender: instance });\n\n            // clear the segmentAvailabilityRange for all reps.\n            // this ensures all are updated before the live edge search starts\n            resetAvailabilityWindow();\n\n            for (let i = 0; i < voAvailableRepresentations.length; i++) {\n                indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n            }\n        };\n\n        updating = false;\n        eventBus.trigger(Events.AST_IN_FUTURE, { delay: delay });\n        setTimeout(update, delay);\n    }\n\n    function onRepresentationUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;\n\n        let r = e.representation;\n        let streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);\n        let alreadyAdded = false;\n        let postponeTimePeriod = 0;\n        let repInfo,\n            err,\n            repSwitch;\n\n        if (r.adaptation.period.mpd.manifest.type === DashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod)\n        {\n            let segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\n            let liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);\n            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;\n        }\n\n        if (postponeTimePeriod > 0) {\n            addDVRMetric();\n            postponeUpdate(postponeTimePeriod);\n            err = new DashJSError(Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE, Errors.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation, error: err});\n\n            return;\n        }\n\n        if (manifestUpdateInfo) {\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\n                repInfo = manifestUpdateInfo.representationInfo[i];\n                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {\n                    alreadyAdded = true;\n                    break;\n                }\n            }\n\n            if (!alreadyAdded) {\n                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index,\n                        streamProcessor.getType(),r.presentationTimeOffset, r.startNumber, r.segmentInfoType);\n            }\n        }\n\n        if (isAllRepresentationsUpdated()) {\n            updating = false;\n            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\n\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);\n\n            if (!repSwitch) {\n                addRepresentationSwitch();\n            }\n\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n        }\n    }\n\n    function onWallclockTimeUpdated(e) {\n        if (e.isDynamic) {\n            updateAvailabilityWindow(e.isDynamic);\n        }\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) return;\n        let manifest = manifestModel.getValue();\n        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {\n            addDVRMetric();\n        }\n    }\n\n    function onQualityChanged(e) {\n        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;\n\n        if (e.oldQuality !== e.newQuality) {\n            currentVoRepresentation = getRepresentationForQuality(e.newQuality);\n            const bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);\n            if (!isNaN(bitrate)) {\n                domStorage.setSavedBitrateSettings(e.mediaType, bitrate);\n            }\n            addRepresentationSwitch();\n        }\n    }\n\n    function onManifestValidityChanged(e) {\n        if (e.newDuration) {\n            const representation = getCurrentRepresentation();\n            if (representation && representation.adaptation.period) {\n                const period = representation.adaptation.period;\n                period.duration = e.newDuration;\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getData: getData,\n        getDataIndex: getDataIndex,\n        isUpdating: isUpdating,\n        updateData: updateData,\n        getStreamProcessor: getStreamProcessor,\n        getCurrentRepresentation: getCurrentRepresentation,\n        getRepresentationForQuality: getRepresentationForQuality,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\nexport default FactoryMaker.getClassFactory(RepresentationController);\n"]}