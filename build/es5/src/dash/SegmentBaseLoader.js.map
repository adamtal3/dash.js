{"version":3,"sources":["../../../../src/dash/SegmentBaseLoader.js"],"names":["RequestModifier","Segment","DashJSError","Events","EventBus","BoxParser","FactoryMaker","Debug","HTTPRequest","FragmentRequest","HTTPLoader","Errors","SegmentBaseLoader","context","eventBus","getInstance","instance","logger","errHandler","boxParser","requestModifier","metricsModel","mediaPlayerModel","httpLoader","baseURLController","setup","getLogger","initialize","create","setConfig","config","checkSetConfigCall","hasOwnProperty","Error","loadInitialization","representation","loadingInfo","initRange","baseUrl","resolve","path","info","init","url","undefined","range","start","end","searching","bytesLoaded","bytesToLoad","debug","request","getFragmentRequest","onload","response","findInitRange","trigger","INITIALIZATION_LOADED","onerror","load","success","error","loadSegments","type","callback","parts","toString","split","parseFloat","onLoaded","isoFile","sidx","hasRange","extraBytes","loadedLength","byteLength","parse","getBox","isComplete","offset","size","lastBox","getLastBox","ref","references","loadMultiSidx","segments","length","reference_type","j","len","ss","se","r","segs","count","tmpCallback","result","concat","referenced_size","getSegmentsForSidx","reset","abort","refs","timescale","time","earliest_presentation_time","first_offset","segment","duration","i","subsegment_duration","startTime","mediaRange","push","INIT_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","SEGMENTS_LOADED","mediaType","SEGMENT_BASE_LOADER_ERROR_CODE","SEGMENT_BASE_LOADER_ERROR_MESSAGE","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"SegmentBaseLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport RequestModifier from '../streaming/utils/RequestModifier';\nimport Segment from './vo/Segment';\nimport DashJSError from '../streaming/vo/DashJSError';\nimport Events from '../core/events/Events';\nimport EventBus from '../core/EventBus';\nimport BoxParser from '../streaming/utils/BoxParser';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport HTTPLoader from '../streaming/net/HTTPLoader';\nimport Errors from '../core/errors/Errors';\n\nfunction SegmentBaseLoader() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        errHandler,\n        boxParser,\n        requestModifier,\n        metricsModel,\n        mediaPlayerModel,\n        httpLoader,\n        baseURLController;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function initialize() {\n        boxParser = BoxParser(context).getInstance();\n        requestModifier = RequestModifier(context).getInstance();\n        httpLoader = HTTPLoader(context).create({\n            errHandler: errHandler,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            requestModifier: requestModifier\n        });\n    }\n\n    function setConfig(config) {\n        if (config.baseURLController) {\n            baseURLController = config.baseURLController;\n        }\n\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n    }\n\n    function checkSetConfigCall() {\n        if (!baseURLController || !baseURLController.hasOwnProperty('resolve')) {\n            throw new Error('setConfig function has to be called previously');\n        }\n    }\n\n    function loadInitialization(representation, loadingInfo) {\n        checkSetConfigCall();\n        let initRange = null;\n        const baseUrl = baseURLController.resolve(representation.path);\n        const info = loadingInfo || {\n            init: true,\n            url: baseUrl ? baseUrl.url : undefined,\n            range: {\n                start: 0,\n                end: 1500\n            },\n            searching: false,\n            bytesLoaded: 0,\n            bytesToLoad: 1500\n        };\n\n        logger.debug('Start searching for initialization.');\n\n        const request = getFragmentRequest(info);\n\n        const onload = function (response) {\n            info.bytesLoaded = info.range.end;\n            initRange = boxParser.findInitRange(response);\n\n            if (initRange) {\n                representation.range = initRange;\n                // note that we don't explicitly set rep.initialization as this\n                // will be computed when all BaseURLs are resolved later\n                eventBus.trigger(Events.INITIALIZATION_LOADED, {representation: representation});\n            } else {\n                info.range.end = info.bytesLoaded + info.bytesToLoad;\n                loadInitialization(representation, info);\n            }\n\n        };\n\n        const onerror = function () {\n            eventBus.trigger(Events.INITIALIZATION_LOADED, {representation: representation});\n        };\n\n        httpLoader.load({request: request, success: onload, error: onerror});\n\n        logger.debug('Perform init search: ' + info.url);\n    }\n\n    function loadSegments(representation, type, range, loadingInfo, callback) {\n        checkSetConfigCall();\n        if (range && (range.start === undefined || range.end === undefined)) {\n            const parts = range ? range.toString().split('-') : null;\n            range = parts ? {start: parseFloat(parts[0]), end: parseFloat(parts[1])} : null;\n        }\n\n        callback = !callback ? onLoaded : callback;\n        let isoFile = null;\n        let sidx = null;\n        const hasRange = !!range;\n        const baseUrl = baseURLController.resolve(representation.path);\n        const info = {\n            init: false,\n            url: baseUrl ? baseUrl.url : undefined,\n            range: hasRange ? range : { start: 0, end: 1500 },\n            searching: !hasRange,\n            bytesLoaded: loadingInfo ? loadingInfo.bytesLoaded : 0,\n            bytesToLoad: 1500\n        };\n\n        const request = getFragmentRequest(info);\n\n        const onload = function (response) {\n            const extraBytes = info.bytesToLoad;\n            const loadedLength = response.byteLength;\n\n            info.bytesLoaded = info.range.end - info.range.start;\n            isoFile = boxParser.parse(response);\n            sidx = isoFile.getBox('sidx');\n\n            if (!sidx || !sidx.isComplete) {\n                if (sidx) {\n                    info.range.start = sidx.offset || info.range.start;\n                    info.range.end = info.range.start + (sidx.size || extraBytes);\n                } else if (loadedLength < info.bytesLoaded) {\n                    // if we have reached a search limit or if we have reached the end of the file we have to stop trying to find sidx\n                    callback(null, representation, type);\n                    return;\n                } else {\n                    const lastBox = isoFile.getLastBox();\n\n                    if (lastBox && lastBox.size) {\n                        info.range.start = lastBox.offset + lastBox.size;\n                        info.range.end = info.range.start + extraBytes;\n                    } else {\n                        info.range.end += extraBytes;\n                    }\n                }\n                loadSegments(representation, type, info.range, info, callback);\n            } else {\n                const ref = sidx.references;\n                let loadMultiSidx,\n                    segments;\n\n                if (ref !== null && ref !== undefined && ref.length > 0) {\n                    loadMultiSidx = (ref[0].reference_type === 1);\n                }\n\n                if (loadMultiSidx) {\n                    logger.debug('Initiate multiple SIDX load.');\n                    info.range.end = info.range.start + sidx.size;\n\n                    let j, len, ss, se, r;\n                    let segs = [];\n                    let count = 0;\n                    let offset = (sidx.offset || info.range.start) + sidx.size;\n                    const tmpCallback = function (result) {\n                        if (result) {\n                            segs = segs.concat(result);\n                            count++;\n\n                            if (count >= len) {\n                                callback(segs, representation, type);\n                            }\n                        } else {\n                            callback(null, representation, type);\n                        }\n                    };\n\n                    for (j = 0, len = ref.length; j < len; j++) {\n                        ss = offset;\n                        se = offset + ref[j].referenced_size - 1;\n                        offset = offset + ref[j].referenced_size;\n                        r = {start: ss, end: se};\n                        loadSegments(representation, null, r, info, tmpCallback);\n                    }\n\n                } else {\n                    logger.debug('Parsing segments from SIDX.');\n                    segments = getSegmentsForSidx(sidx, info);\n                    callback(segments, representation, type);\n                }\n            }\n        };\n\n        const onerror = function () {\n            callback(null, representation, type);\n        };\n\n        httpLoader.load({request: request, success: onload, error: onerror});\n        logger.debug('Perform SIDX load: ' + info.url);\n    }\n\n    function reset() {\n        httpLoader.abort();\n        httpLoader = null;\n        errHandler = null;\n        boxParser = null;\n        requestModifier = null;\n    }\n\n    function getSegmentsForSidx(sidx, info) {\n        const refs = sidx.references;\n        const len = refs.length;\n        const timescale = sidx.timescale;\n        let time = sidx.earliest_presentation_time;\n        let start = info.range.start + sidx.offset + sidx.first_offset + sidx.size;\n        const segments = [];\n        let segment,\n            end,\n            duration,\n            size;\n\n        for (let i = 0; i < len; i++) {\n            duration = refs[i].subsegment_duration;\n            size = refs[i].referenced_size;\n\n            segment = new Segment();\n            // note that we don't explicitly set segment.media as this will be\n            // computed when all BaseURLs are resolved later\n            segment.duration = duration;\n            segment.startTime = time;\n            segment.timescale = timescale;\n            end = start + size - 1;\n            segment.mediaRange = start + '-' + end;\n            segments.push(segment);\n            time += duration;\n            start += size;\n        }\n\n        return segments;\n    }\n\n    function getFragmentRequest(info) {\n        if (!info.url) {\n            return;\n        }\n\n        const request = new FragmentRequest();\n        request.type = info.init ? HTTPRequest.INIT_SEGMENT_TYPE : HTTPRequest.MEDIA_SEGMENT_TYPE;\n        request.url = info.url;\n        request.range = info.range.start + '-' + info.range.end;\n\n        return request;\n    }\n\n    function onLoaded(segments, representation, type) {\n        if (segments) {\n            eventBus.trigger(Events.SEGMENTS_LOADED, {segments: segments, representation: representation, mediaType: type});\n        } else {\n            eventBus.trigger(Events.SEGMENTS_LOADED, {segments: null, representation: representation, mediaType: type, error: new DashJSError(Errors.SEGMENT_BASE_LOADER_ERROR_CODE, Errors.SEGMENT_BASE_LOADER_ERROR_MESSAGE)});\n        }\n    }\n\n    instance = {\n        setConfig: setConfig,\n        initialize: initialize,\n        loadInitialization: loadInitialization,\n        loadSegments: loadSegments,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentBaseLoader.__dashjs_factory_name = 'SegmentBaseLoader';\nexport default FactoryMaker.getSingletonFactory(SegmentBaseLoader);\n"]}