{"version":3,"sources":["../../../../../../src/dash/parser/matchers/DurationMatcher.js"],"names":["BaseMatcher","Constants","DashConstants","durationRegex","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","DurationMatcher","constructor","attr","attributeList","MIN_BUFFER_TIME","MEDIA_PRESENTATION_DURATION","MINIMUM_UPDATE_PERIOD","TIMESHIFT_BUFFER_DEPTH","MAX_SEGMENT_DURATION","MAX_SUBSEGMENT_DURATION","SUGGESTED_PRESENTATION_DELAY","START","START_TIME","DURATION","len","length","i","nodeName","test","value","str","match","exec","result","parseFloat","undefined"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;AAGA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;AAEA,MAAMC,gBAAgB,oFAAtB;;AAEA,MAAMC,kBAAkB,MAAM,EAAN,GAAW,EAAX,GAAgB,EAAxC;AACA,MAAMC,mBAAmB,KAAK,EAAL,GAAU,EAAV,GAAe,EAAxC;AACA,MAAMC,iBAAiB,KAAK,EAAL,GAAU,EAAjC;AACA,MAAMC,kBAAkB,KAAK,EAA7B;AACA,MAAMC,iBAAiB,EAAvB;;AAEA,MAAMC,eAAN,SAA8BT,WAA9B,CAA0C;AACtCU,kBAAc;AACV,cACIC,QAAQ;AACJ,kBAAMC,gBAAgB,CAClBV,cAAcW,eADI,EACaX,cAAcY,2BAD3B,EAElBZ,cAAca,qBAFI,EAEmBb,cAAcc,sBAFjC,EAEyDd,cAAce,oBAFvE,EAGlBf,cAAcgB,uBAHI,EAGqBjB,UAAUkB,4BAH/B,EAG6DjB,cAAckB,KAH3E,EAIlBnB,UAAUoB,UAJQ,EAIInB,cAAcoB,QAJlB,CAAtB;AAMA,kBAAMC,MAAMX,cAAcY,MAA1B;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,GAApB,EAAyBE,GAAzB,EAA8B;AAC1B,oBAAId,KAAKe,QAAL,KAAkBd,cAAca,CAAd,CAAtB,EAAwC;AACpC,2BAAOtB,cAAcwB,IAAd,CAAmBhB,KAAKiB,KAAxB,CAAP;AACH;AACJ;;AAED,mBAAO,KAAP;AACH,SAjBL,EAkBIC,OAAO;AACH;AACA,kBAAMC,QAAQ3B,cAAc4B,IAAd,CAAmBF,GAAnB,CAAd;AACA,gBAAIG,SAAUC,WAAWH,MAAM,CAAN,KAAY,CAAvB,IAA4B1B,eAA5B,GACV6B,WAAWH,MAAM,CAAN,KAAY,CAAvB,IAA4BzB,gBADlB,GAEV4B,WAAWH,MAAM,CAAN,KAAY,CAAvB,IAA4BxB,cAFlB,GAGV2B,WAAWH,MAAM,CAAN,KAAY,CAAvB,IAA4BvB,eAHlB,GAIV0B,WAAWH,MAAM,EAAN,KAAa,CAAxB,IAA6BtB,cAJnB,GAKVyB,WAAWH,MAAM,EAAN,KAAa,CAAxB,CALJ;;AAOA,gBAAIA,MAAM,CAAN,MAAaI,SAAjB,EAA4B;AACxBF,yBAAS,CAACA,MAAV;AACH;;AAED,mBAAOA,MAAP;AACH,SAjCL;AAmCH;AArCqC;;AAwC1C,eAAevB,eAAf","file":"DurationMatcher.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc matches and converts xs:duration to seconds\n */\nimport BaseMatcher from './BaseMatcher';\nimport Constants from '../../../streaming/constants/Constants';\nimport DashConstants from '../../constants/DashConstants';\n\nconst durationRegex = /^([-])?P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/;\n\nconst SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\nconst SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\nconst SECONDS_IN_DAY = 24 * 60 * 60;\nconst SECONDS_IN_HOUR = 60 * 60;\nconst SECONDS_IN_MIN = 60;\n\nclass DurationMatcher extends BaseMatcher {\n    constructor() {\n        super(\n            attr => {\n                const attributeList = [\n                    DashConstants.MIN_BUFFER_TIME, DashConstants.MEDIA_PRESENTATION_DURATION,\n                    DashConstants.MINIMUM_UPDATE_PERIOD, DashConstants.TIMESHIFT_BUFFER_DEPTH, DashConstants.MAX_SEGMENT_DURATION,\n                    DashConstants.MAX_SUBSEGMENT_DURATION, Constants.SUGGESTED_PRESENTATION_DELAY, DashConstants.START,\n                    Constants.START_TIME, DashConstants.DURATION\n                ];\n                const len = attributeList.length;\n\n                for (let i = 0; i < len; i++) {\n                    if (attr.nodeName === attributeList[i]) {\n                        return durationRegex.test(attr.value);\n                    }\n                }\n\n                return false;\n            },\n            str => {\n                //str = \"P10Y10M10DT10H10M10.1S\";\n                const match = durationRegex.exec(str);\n                let result = (parseFloat(match[2] || 0) * SECONDS_IN_YEAR +\n                    parseFloat(match[4] || 0) * SECONDS_IN_MONTH +\n                    parseFloat(match[6] || 0) * SECONDS_IN_DAY +\n                    parseFloat(match[8] || 0) * SECONDS_IN_HOUR +\n                    parseFloat(match[10] || 0) * SECONDS_IN_MIN +\n                    parseFloat(match[12] || 0));\n\n                if (match[1] !== undefined) {\n                    result = -result;\n                }\n\n                return result;\n            }\n        );\n    }\n}\n\nexport default DurationMatcher;\n"]}