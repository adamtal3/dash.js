{"version":3,"sources":["../../../../../src/dash/parser/DashParser.js"],"names":["FactoryMaker","Debug","ObjectIron","X2JS","StringMatcher","DurationMatcher","DateTimeMatcher","NumericMatcher","RepresentationBaseValuesMap","SegmentValuesMap","DashParser","context","instance","logger","matchers","converter","objectIron","setup","getInstance","getLogger","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","create","adaptationset","period","getMatchers","getIron","parse","data","manifest","startTime","window","performance","now","xml_str2json","Error","jsonTime","run","ironedTime","info","toPrecision","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,2BAAP,MAAwC,oCAAxC;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;;AAEA,SAASC,UAAT,GAAsB;;AAElB,UAAMC,UAAU,KAAKA,OAArB;;AAEA,QAAIC,QAAJ,EACIC,MADJ,EAEIC,QAFJ,EAGIC,SAHJ,EAIIC,UAJJ;;AAMA,aAASC,KAAT,GAAiB;AACbJ,iBAASZ,MAAMU,OAAN,EAAeO,WAAf,GAA6BC,SAA7B,CAAuCP,QAAvC,CAAT;AACAE,mBAAW,CACP,IAAIT,eAAJ,EADO,EAEP,IAAIC,eAAJ,EAFO,EAGP,IAAIC,cAAJ,EAHO,EAIP,IAAIH,aAAJ,EAJO,CAIe;AAJf,SAAX;;AAOAW,oBAAY,IAAIZ,IAAJ,CAAS;AACjBiB,wBAAoB,KADH;AAEjBC,6BAAoB,EAFH;AAGjBC,6BAAoB,UAHH;AAIjBC,2BAAoB,QAJH;AAKjBC,8BAAoB,KALH;AAMjBC,gCAAoB,KANH;AAOjBC,wBAAoB,IAPH;AAQjBZ,sBAAoBA;AARH,SAAT,CAAZ;;AAWAE,qBAAad,WAAWS,OAAX,EAAoBgB,MAApB,CAA2B;AACpCC,2BAAe,IAAIpB,2BAAJ,EADqB;AAEpCqB,oBAAQ,IAAIpB,gBAAJ;AAF4B,SAA3B,CAAb;AAIH;;AAED,aAASqB,WAAT,GAAuB;AACnB,eAAOhB,QAAP;AACH;;AAED,aAASiB,OAAT,GAAmB;AACf,eAAOf,UAAP;AACH;;AAED,aAASgB,KAAT,CAAeC,IAAf,EAAqB;AACjB,YAAIC,QAAJ;AACA,cAAMC,YAAYC,OAAOC,WAAP,CAAmBC,GAAnB,EAAlB;;AAEAJ,mBAAWnB,UAAUwB,YAAV,CAAuBN,IAAvB,CAAX;;AAEA,YAAI,CAACC,QAAL,EAAe;AACX,kBAAM,IAAIM,KAAJ,CAAU,6BAAV,CAAN;AACH;;AAED,cAAMC,WAAWL,OAAOC,WAAP,CAAmBC,GAAnB,EAAjB;AACAtB,mBAAW0B,GAAX,CAAeR,QAAf;;AAEA,cAAMS,aAAaP,OAAOC,WAAP,CAAmBC,GAAnB,EAAnB;AACAzB,eAAO+B,IAAP,CAAY,mCAAmC,CAACH,WAAWN,SAAZ,EAAuBU,WAAvB,CAAmC,CAAnC,CAAnC,GAA2E,kBAA3E,GAAgG,CAACF,aAAaF,QAAd,EAAwBI,WAAxB,CAAoC,CAApC,CAAhG,GAAyI,aAAzI,GAAyJ,CAAC,CAACF,aAAaR,SAAd,IAA2B,IAA5B,EAAkCU,WAAlC,CAA8C,CAA9C,CAAzJ,GAA4M,IAAxN;;AAEA,eAAOX,QAAP;AACH;;AAEDtB,eAAW;AACPoB,eAAOA,KADA;AAEPF,qBAAaA,WAFN;AAGPC,iBAASA;AAHF,KAAX;;AAMAd;;AAEA,WAAOL,QAAP;AACH;;AAEDF,WAAWoC,qBAAX,GAAmC,YAAnC;AACA,eAAe9C,aAAa+C,eAAb,CAA6BrC,UAA7B,CAAf","file":"DashParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport ObjectIron from './objectiron';\nimport X2JS from '../../../externals/xml2json';\nimport StringMatcher from './matchers/StringMatcher';\nimport DurationMatcher from './matchers/DurationMatcher';\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\nimport NumericMatcher from './matchers/NumericMatcher';\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\nimport SegmentValuesMap from './maps/SegmentValuesMap';\n\nfunction DashParser() {\n\n    const context = this.context;\n\n    let instance,\n        logger,\n        matchers,\n        converter,\n        objectIron;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        matchers = [\n            new DurationMatcher(),\n            new DateTimeMatcher(),\n            new NumericMatcher(),\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\n        ];\n\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: false,\n            ignoreRoot:         true,\n            matchers:           matchers\n        });\n\n        objectIron = ObjectIron(context).create({\n            adaptationset: new RepresentationBaseValuesMap(),\n            period: new SegmentValuesMap()\n        });\n    }\n\n    function getMatchers() {\n        return matchers;\n    }\n\n    function getIron() {\n        return objectIron;\n    }\n\n    function parse(data) {\n        let manifest;\n        const startTime = window.performance.now();\n\n        manifest = converter.xml_str2json(data);\n\n        if (!manifest) {\n            throw new Error('parsing the manifest failed');\n        }\n\n        const jsonTime = window.performance.now();\n        objectIron.run(manifest);\n\n        const ironedTime = window.performance.now();\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        return manifest;\n    }\n\n    instance = {\n        parse: parse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashParser.__dashjs_factory_name = 'DashParser';\nexport default FactoryMaker.getClassFactory(DashParser);\n"]}