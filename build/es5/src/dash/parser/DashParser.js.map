{"version":3,"sources":["../../../../../src/dash/parser/DashParser.js"],"names":["FactoryMaker","Debug","ObjectIron","X2JS","StringMatcher","DurationMatcher","DateTimeMatcher","NumericMatcher","RepresentationBaseValuesMap","SegmentValuesMap","DashParser","context","instance","logger","matchers","converter","objectIron","setup","getInstance","getLogger","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","create","adaptationset","period","getMatchers","getIron","parse","data","manifest","startTime","window","performance","now","xml_str2json","Error","jsonTime","run","ironedTime","info","toPrecision","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,aAAP,KAAyB,yBAAzB,CACA,MAAOC,MAAP,KAAkB,kBAAlB,CACA,MAAOC,WAAP,KAAuB,cAAvB,CACA,MAAOC,KAAP,KAAiB,6BAAjB,CACA,MAAOC,cAAP,KAA0B,0BAA1B,CACA,MAAOC,gBAAP,KAA4B,4BAA5B,CACA,MAAOC,gBAAP,KAA4B,4BAA5B,CACA,MAAOC,eAAP,KAA2B,2BAA3B,CACA,MAAOC,4BAAP,KAAwC,oCAAxC,CACA,MAAOC,iBAAP,KAA6B,yBAA7B,CAEA,QAASC,WAAT,EAAsB,CAElB,KAAMC,SAAU,KAAKA,OAArB,CAEA,GAAIC,SAAJ,CACIC,MADJ,CAEIC,QAFJ,CAGIC,SAHJ,CAIIC,UAJJ,CAMA,QAASC,MAAT,EAAiB,CACbJ,OAASZ,MAAMU,OAAN,EAAeO,WAAf,GAA6BC,SAA7B,CAAuCP,QAAvC,CAAT,CACAE,SAAW,CACP,GAAIT,gBAAJ,EADO,CAEP,GAAIC,gBAAJ,EAFO,CAGP,GAAIC,eAAJ,EAHO,CAIP,GAAIH,cAAJ,EAAsB;AAJf,CAAX,CAOAW,UAAY,GAAIZ,KAAJ,CAAS,CACjBiB,WAAoB,KADH,CAEjBC,gBAAoB,EAFH,CAGjBC,gBAAoB,UAHH,CAIjBC,cAAoB,QAJH,CAKjBC,iBAAoB,KALH,CAMjBC,mBAAoB,KANH,CAOjBC,WAAoB,IAPH,CAQjBZ,SAAoBA,QARH,CAAT,CAAZ,CAWAE,WAAad,WAAWS,OAAX,EAAoBgB,MAApB,CAA2B,CACpCC,cAAe,GAAIpB,4BAAJ,EADqB,CAEpCqB,OAAQ,GAAIpB,iBAAJ,EAF4B,CAA3B,CAAb,CAIH,CAED,QAASqB,YAAT,EAAuB,CACnB,MAAOhB,SAAP,CACH,CAED,QAASiB,QAAT,EAAmB,CACf,MAAOf,WAAP,CACH,CAED,QAASgB,MAAT,CAAeC,IAAf,CAAqB,CACjB,GAAIC,SAAJ,CACA,KAAMC,WAAYC,OAAOC,WAAP,CAAmBC,GAAnB,EAAlB,CAEAJ,SAAWnB,UAAUwB,YAAV,CAAuBN,IAAvB,CAAX,CAEA,GAAI,CAACC,QAAL,CAAe,CACX,KAAM,IAAIM,MAAJ,CAAU,6BAAV,CAAN,CACH,CAED,KAAMC,UAAWL,OAAOC,WAAP,CAAmBC,GAAnB,EAAjB,CACAtB,WAAW0B,GAAX,CAAeR,QAAf,EAEA,KAAMS,YAAaP,OAAOC,WAAP,CAAmBC,GAAnB,EAAnB,CACAzB,OAAO+B,IAAP,CAAY,iCAAmC,CAACH,SAAWN,SAAZ,EAAuBU,WAAvB,CAAmC,CAAnC,CAAnC,CAA2E,kBAA3E,CAAgG,CAACF,WAAaF,QAAd,EAAwBI,WAAxB,CAAoC,CAApC,CAAhG,CAAyI,aAAzI,CAAyJ,CAAC,CAACF,WAAaR,SAAd,EAA2B,IAA5B,EAAkCU,WAAlC,CAA8C,CAA9C,CAAzJ,CAA4M,IAAxN,EAEA,MAAOX,SAAP,CACH,CAEDtB,SAAW,CACPoB,MAAOA,KADA,CAEPF,YAAaA,WAFN,CAGPC,QAASA,OAHF,CAAX,CAMAd,QAEA,MAAOL,SAAP,CACH,CAEDF,WAAWoC,qBAAX,CAAmC,YAAnC,CACA,cAAe9C,cAAa+C,eAAb,CAA6BrC,UAA7B,CAAf","file":"DashParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport ObjectIron from './objectiron';\nimport X2JS from '../../../externals/xml2json';\nimport StringMatcher from './matchers/StringMatcher';\nimport DurationMatcher from './matchers/DurationMatcher';\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\nimport NumericMatcher from './matchers/NumericMatcher';\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\nimport SegmentValuesMap from './maps/SegmentValuesMap';\n\nfunction DashParser() {\n\n    const context = this.context;\n\n    let instance,\n        logger,\n        matchers,\n        converter,\n        objectIron;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        matchers = [\n            new DurationMatcher(),\n            new DateTimeMatcher(),\n            new NumericMatcher(),\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\n        ];\n\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: false,\n            ignoreRoot:         true,\n            matchers:           matchers\n        });\n\n        objectIron = ObjectIron(context).create({\n            adaptationset: new RepresentationBaseValuesMap(),\n            period: new SegmentValuesMap()\n        });\n    }\n\n    function getMatchers() {\n        return matchers;\n    }\n\n    function getIron() {\n        return objectIron;\n    }\n\n    function parse(data) {\n        let manifest;\n        const startTime = window.performance.now();\n\n        manifest = converter.xml_str2json(data);\n\n        if (!manifest) {\n            throw new Error('parsing the manifest failed');\n        }\n\n        const jsonTime = window.performance.now();\n        objectIron.run(manifest);\n\n        const ironedTime = window.performance.now();\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        return manifest;\n    }\n\n    instance = {\n        parse: parse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashParser.__dashjs_factory_name = 'DashParser';\nexport default FactoryMaker.getClassFactory(DashParser);\n"]}