{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":["HTTPRequest","FactoryMaker","MetricsConstants","Round10","DashMetrics","config","instance","dashManifestModel","manifestModel","getPeriod","periodId","manifest","getValue","Period_asArray","getBandwidthForRepresentation","representationId","representation","period","findRepresentation","bandwidth","getIndexForRepresentation","periodIdx","findRepresentationIndex","getMaxIndexForBufferType","bufferType","findMaxBufferIndex","getCurrentRepresentationSwitch","metrics","getCurrent","TRACK_SWITCH","getLatestBufferLevelVO","BUFFER_LEVEL","getCurrentBufferLevel","vo","round10","level","getRequestsQueue","RequestsQueue","getCurrentHttpRequest","httpList","HttpList","currentHttpList","httpListLength","httpListLastIndex","length","responsecode","getHttpRequests","metricName","list","getCurrentDroppedFrames","DROPPED_FRAMES","getCurrentSchedulingInfo","SCHEDULING_INFO","getCurrentManifestUpdate","MANIFEST_UPDATE","getCurrentDVRInfo","DVR_INFO","getLatestMPDRequestHeaderValueByID","id","headers","httpRequestList","httpRequest","i","type","MPD_TYPE","parseResponseHeaders","_responseHeaders","undefined","getLatestFragmentRequestHeaderValueByID","headerStr","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","returnIndex","adaptationSet","adaptationSetArray","representationArray","adaptationSetArrayIndex","representationArrayIndex","AdaptationSet_asArray","Representation_asArray","adaptationIsType","adaptation","getIsTypeOf","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"DashMetrics.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\nimport FactoryMaker from '../core/FactoryMaker';\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\nimport Round10 from './utils/Round10';\n\n/**\n * @module DashMetrics\n * @param {object} config configuration passed to DashMetrics\n */\nfunction DashMetrics(config) {\n\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    let manifestModel = config.manifestModel;\n\n    function getPeriod(periodId) {\n        const manifest = manifestModel.getValue();\n        if (!manifest) {\n            return -1;\n        }\n        return manifest.Period_asArray[periodId];\n    }\n\n    function getBandwidthForRepresentation(representationId, periodId) {\n        let representation;\n        let period = getPeriod(periodId);\n\n        representation = findRepresentation(period, representationId);\n\n        if (representation === null) {\n            return null;\n        }\n\n        return representation.bandwidth;\n    }\n\n    /**\n     *\n     * @param {string} representationId\n     * @param {number} periodIdx\n     * @returns {*}\n     */\n    function getIndexForRepresentation(representationId, periodIdx) {\n        let period = getPeriod(periodIdx);\n\n        return findRepresentationIndex(period, representationId);\n    }\n\n    /**\n     * This method returns the current max index based on what is defined in the MPD.\n     *\n     * @param {string} bufferType - String 'audio' or 'video',\n     * @param {number} periodIdx - Make sure this is the period index not id\n     * @return {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getMaxIndexForBufferType(bufferType, periodIdx) {\n        let period = getPeriod(periodIdx);\n\n        return findMaxBufferIndex(period, bufferType);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(metrics) {\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestBufferLevelVO(metrics) {\n        return getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(metrics) {\n        const vo = getLatestBufferLevelVO(metrics);\n\n        if (vo) {\n            return Round10.round10(vo.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {null|*|vo}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getRequestsQueue(metrics) {\n        return metrics ? metrics.RequestsQueue : null;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(metrics) {\n        if (!metrics) {\n            return null;\n        }\n\n        const httpList = metrics.HttpList;\n        let currentHttpList = null;\n\n        let httpListLength,\n            httpListLastIndex;\n\n        if (!httpList || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLength = httpList.length;\n        httpListLastIndex = httpListLength - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(metrics) {\n        if (!metrics) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (!metrics) {\n            return null;\n        }\n\n        const list = metrics[metricName];\n\n        if (!list || list.length <= 0) {\n            return null;\n        }\n\n        return list[list.length - 1];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDroppedFrames(metrics) {\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(metrics) {\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate(metrics) {\n        return getCurrent(metrics, MetricsConstants.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(metrics) {\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(metrics, id) {\n        let headers = {};\n        let httpRequestList,\n            httpRequest,\n            i;\n\n        httpRequestList = getHttpRequests(metrics);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(metrics, id) {\n        let headers = {};\n        let httpRequest = getCurrentHttpRequest(metrics);\n        if (httpRequest) {\n            headers = parseResponseHeaders(httpRequest._responseHeaders);\n        }\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    function parseResponseHeaders(headerStr) {\n        let headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            let headerPair = headerPairs[i];\n            let index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    function findRepresentationIndex(period, representationId) {\n        const index = findRepresentation(period, representationId, true);\n\n        if (index !== null) {\n            return index;\n        }\n\n        return -1;\n    }\n\n    function findRepresentation(period, representationId, returnIndex) {\n        let adaptationSet,\n            adaptationSetArray,\n            representation,\n            representationArray,\n            adaptationSetArrayIndex,\n            representationArrayIndex;\n\n        if (period) {\n            adaptationSetArray = period.AdaptationSet_asArray;\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                representationArray = adaptationSet.Representation_asArray;\n                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                    representation = representationArray[representationArrayIndex];\n                    if (representationId === representation.id) {\n                        if (returnIndex) {\n                            return representationArrayIndex;\n                        } else {\n                            return representation;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function adaptationIsType(adaptation, bufferType) {\n        return dashManifestModel.getIsTypeOf(adaptation, bufferType);\n    }\n\n    function findMaxBufferIndex(period, bufferType) {\n        let adaptationSet,\n            adaptationSetArray,\n            representationArray,\n            adaptationSetArrayIndex;\n\n        if (!period || !bufferType) return -1;\n\n        adaptationSetArray = period.AdaptationSet_asArray;\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n            representationArray = adaptationSet.Representation_asArray;\n            if (adaptationIsType(adaptationSet, bufferType)) {\n                return representationArray.length;\n            }\n        }\n\n        return -1;\n    }\n\n    instance = {\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\n        getIndexForRepresentation: getIndexForRepresentation,\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getLatestBufferLevelVO: getLatestBufferLevelVO,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        getRequestsQueue: getRequestsQueue\n    };\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]}