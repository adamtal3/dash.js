{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":["HTTPRequest","FactoryMaker","MetricsConstants","Round10","DashMetrics","config","instance","dashManifestModel","manifestModel","getPeriod","periodId","manifest","getValue","Period_asArray","getBandwidthForRepresentation","representationId","representation","period","findRepresentation","bandwidth","getIndexForRepresentation","periodIdx","findRepresentationIndex","getMaxIndexForBufferType","bufferType","findMaxBufferIndex","getCurrentRepresentationSwitch","metrics","getCurrent","TRACK_SWITCH","getLatestBufferLevelVO","BUFFER_LEVEL","getCurrentBufferLevel","vo","round10","level","getRequestsQueue","RequestsQueue","getCurrentHttpRequest","httpList","HttpList","currentHttpList","httpListLength","httpListLastIndex","length","responsecode","getHttpRequests","metricName","list","getCurrentDroppedFrames","DROPPED_FRAMES","getCurrentSchedulingInfo","SCHEDULING_INFO","getCurrentManifestUpdate","MANIFEST_UPDATE","getCurrentDVRInfo","DVR_INFO","getLatestMPDRequestHeaderValueByID","id","headers","httpRequestList","httpRequest","i","type","MPD_TYPE","parseResponseHeaders","_responseHeaders","undefined","getLatestFragmentRequestHeaderValueByID","headerStr","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","returnIndex","adaptationSet","adaptationSetArray","representationArray","adaptationSetArrayIndex","representationArrayIndex","AdaptationSet_asArray","Representation_asArray","adaptationIsType","adaptation","getIsTypeOf","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"DashMetrics.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\nimport FactoryMaker from '../core/FactoryMaker';\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\nimport Round10 from './utils/Round10';\n\n/**\n * @module DashMetrics\n * @param {object} config configuration passed to DashMetrics\n */\nfunction DashMetrics(config) {\n\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    let manifestModel = config.manifestModel;\n\n    function getPeriod(periodId) {\n        const manifest = manifestModel.getValue();\n        if (!manifest) {\n            return -1;\n        }\n        return manifest.Period_asArray[periodId];\n    }\n\n    function getBandwidthForRepresentation(representationId, periodId) {\n        let representation;\n        let period = getPeriod(periodId);\n\n        representation = findRepresentation(period, representationId);\n\n        if (representation === null) {\n            return null;\n        }\n\n        return representation.bandwidth;\n    }\n\n    /**\n     *\n     * @param {string} representationId\n     * @param {number} periodIdx\n     * @returns {*}\n     */\n    function getIndexForRepresentation(representationId, periodIdx) {\n        let period = getPeriod(periodIdx);\n\n        return findRepresentationIndex(period, representationId);\n    }\n\n    /**\n     * This method returns the current max index based on what is defined in the MPD.\n     *\n     * @param {string} bufferType - String 'audio' or 'video',\n     * @param {number} periodIdx - Make sure this is the period index not id\n     * @return {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getMaxIndexForBufferType(bufferType, periodIdx) {\n        let period = getPeriod(periodIdx);\n\n        return findMaxBufferIndex(period, bufferType);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(metrics) {\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestBufferLevelVO(metrics) {\n        return getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(metrics) {\n        const vo = getLatestBufferLevelVO(metrics);\n\n        if (vo) {\n            return Round10.round10(vo.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {null|*|vo}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getRequestsQueue(metrics) {\n        return metrics ? metrics.RequestsQueue : null;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(metrics) {\n        if (!metrics) {\n            return null;\n        }\n\n        const httpList = metrics.HttpList;\n        let currentHttpList = null;\n\n        let httpListLength,\n            httpListLastIndex;\n\n        if (!httpList || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLength = httpList.length;\n        httpListLastIndex = httpListLength - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(metrics) {\n        if (!metrics) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (!metrics) {\n            return null;\n        }\n\n        const list = metrics[metricName];\n\n        if (!list || list.length <= 0) {\n            return null;\n        }\n\n        return list[list.length - 1];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDroppedFrames(metrics) {\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(metrics) {\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate(metrics) {\n        return getCurrent(metrics, MetricsConstants.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(metrics) {\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(metrics, id) {\n        let headers = {};\n        let httpRequestList,\n            httpRequest,\n            i;\n\n        httpRequestList = getHttpRequests(metrics);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(metrics, id) {\n        let headers = {};\n        let httpRequest = getCurrentHttpRequest(metrics);\n        if (httpRequest) {\n            headers = parseResponseHeaders(httpRequest._responseHeaders);\n        }\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    function parseResponseHeaders(headerStr) {\n        let headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            let headerPair = headerPairs[i];\n            let index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    function findRepresentationIndex(period, representationId) {\n        const index = findRepresentation(period, representationId, true);\n\n        if (index !== null) {\n            return index;\n        }\n\n        return -1;\n    }\n\n    function findRepresentation(period, representationId, returnIndex) {\n        let adaptationSet,\n            adaptationSetArray,\n            representation,\n            representationArray,\n            adaptationSetArrayIndex,\n            representationArrayIndex;\n\n        if (period) {\n            adaptationSetArray = period.AdaptationSet_asArray;\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                representationArray = adaptationSet.Representation_asArray;\n                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                    representation = representationArray[representationArrayIndex];\n                    if (representationId === representation.id) {\n                        if (returnIndex) {\n                            return representationArrayIndex;\n                        } else {\n                            return representation;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function adaptationIsType(adaptation, bufferType) {\n        return dashManifestModel.getIsTypeOf(adaptation, bufferType);\n    }\n\n    function findMaxBufferIndex(period, bufferType) {\n        let adaptationSet,\n            adaptationSetArray,\n            representationArray,\n            adaptationSetArrayIndex;\n\n        if (!period || !bufferType) return -1;\n\n        adaptationSetArray = period.AdaptationSet_asArray;\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n            representationArray = adaptationSet.Representation_asArray;\n            if (adaptationIsType(adaptationSet, bufferType)) {\n                return representationArray.length;\n            }\n        }\n\n        return -1;\n    }\n\n    instance = {\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\n        getIndexForRepresentation: getIndexForRepresentation,\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getLatestBufferLevelVO: getLatestBufferLevelVO,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        getRequestsQueue: getRequestsQueue\n    };\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]}