{"version":3,"sources":["../../../../src/dash/WebmSegmentBaseLoader.js"],"names":["Events","EventBus","EBMLParser","Constants","FactoryMaker","Debug","RequestModifier","Segment","HTTPRequest","FragmentRequest","HTTPLoader","DashJSError","Errors","WebmSegmentBaseLoader","context","eventBus","getInstance","instance","logger","WebM","errHandler","requestModifier","metricsModel","mediaPlayerModel","httpLoader","baseURLController","setup","getLogger","EBML","tag","required","SeekHead","Info","TimecodeScale","parse","Duration","Tracks","Cues","CuePoint","CueTime","CueTrackPositions","CueTrack","CueClusterPosition","Void","initialize","create","setConfig","config","Error","MISSING_CONFIG_ERROR","parseCues","ab","cues","cue","cueTrack","ebmlParser","data","consumeTagAndSize","moreData","parseTag","CueTracks","consumeTag","cueTrackPositionSize","getMatroskaCodedNum","startPos","getPos","Track","ClusterPosition","push","setPos","length","parseSegments","segmentStart","segmentEnd","segmentDuration","duration","parsed","segments","segment","i","len","start","end","startTime","timescale","mediaRange","debug","parseEbmlHeader","media","theRange","callback","parts","split","request","info","url","range","parseFloat","skipOverElement","undefined","infoTag","infoElementSize","getFragmentRequest","onload","response","onloadend","error","load","success","checkSetConfigCall","hasOwnProperty","loadInitialization","representation","loadingInfo","baseUrl","resolve","path","initRange","init","trigger","INITIALIZATION_LOADED","loadSegments","type","bytesToLoad","bytesLoaded","onLoaded","SEGMENTS_LOADED","mediaType","SEGMENT_BASE_LOADER_ERROR_CODE","SEGMENT_BASE_LOADER_ERROR_MESSAGE","INIT_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","reset","__dashjs_factory_name","getSingletonFactory"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SACIC,WADJ,QAEO,qCAFP;AAGA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,SAASC,qBAAT,GAAiC;;AAE7B,UAAMC,UAAU,KAAKA,OAArB;AACA,UAAMC,WAAWd,SAASa,OAAT,EAAkBE,WAAlB,EAAjB;;AAEA,QAAIC,QAAJ,EACIC,MADJ,EAEIC,IAFJ,EAGIC,UAHJ,EAIIC,eAJJ,EAKIC,YALJ,EAMIC,gBANJ,EAOIC,UAPJ,EAQIC,iBARJ;;AAUA,aAASC,KAAT,GAAiB;AACbR,iBAASb,MAAMS,OAAN,EAAeE,WAAf,GAA6BW,SAA7B,CAAuCV,QAAvC,CAAT;AACAE,eAAO;AACHS,kBAAM;AACFC,qBAAK,UADH;AAEFC,0BAAU;AAFR,aADH;AAKHvB,qBAAS;AACLsB,qBAAK,UADA;AAELC,0BAAU,IAFL;AAGLC,0BAAU;AACNF,yBAAK,UADC;AAENC,8BAAU;AAFJ,iBAHL;AAOLE,sBAAM;AACFH,yBAAK,UADH;AAEFC,8BAAU,IAFR;AAGFG,mCAAe;AACXJ,6BAAK,QADM;AAEXC,kCAAU,IAFC;AAGXI,+BAAO;AAHI,qBAHb;AAQFC,8BAAU;AACNN,6BAAK,MADC;AAENC,kCAAU,IAFJ;AAGNI,+BAAO;AAHD;AARR,iBAPD;AAqBLE,wBAAQ;AACJP,yBAAK,UADD;AAEJC,8BAAU;AAFN,iBArBH;AAyBLO,sBAAM;AACFR,yBAAK,UADH;AAEFC,8BAAU,IAFR;AAGFQ,8BAAU;AACNT,6BAAK,IADC;AAENC,kCAAU,IAFJ;AAGNS,iCAAS;AACLV,iCAAK,IADA;AAELC,sCAAU,IAFL;AAGLI,mCAAO;AAHF,yBAHH;AAQNM,2CAAmB;AACfX,iCAAK,IADU;AAEfC,sCAAU,IAFK;AAGfW,sCAAU;AACNZ,qCAAK,IADC;AAENC,0CAAU,IAFJ;AAGNI,uCAAO;AAHD,6BAHK;AAQfQ,gDAAoB;AAChBb,qCAAK,IADW;AAEhBC,0CAAU,IAFM;AAGhBI,uCAAO;AAHS;AARL;AARb;AAHR;AAzBD,aALN;AA0DHS,kBAAM;AACFd,qBAAK,IADH;AAEFC,0BAAU;AAFR;AA1DH,SAAP;AA+DH;;AAED,aAASc,UAAT,GAAsB;AAClBvB,0BAAkBf,gBAAgBQ,OAAhB,EAAyBE,WAAzB,EAAlB;AACAQ,qBAAad,WAAWI,OAAX,EAAoB+B,MAApB,CAA2B;AACpCzB,wBAAYA,UADwB;AAEpCE,0BAAcA,YAFsB;AAGpCC,8BAAkBA,gBAHkB;AAIpCF,6BAAiBA;AAJmB,SAA3B,CAAb;AAMH;;AAED,aAASyB,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,YAAI,CAACA,OAAOtB,iBAAR,IAA6B,CAACsB,OAAOzB,YAArC,IAAqD,CAACyB,OAAOxB,gBAA7D,IAAiF,CAACwB,OAAO3B,UAA7F,EAAyG;AACrG,kBAAM,IAAI4B,KAAJ,CAAU7C,UAAU8C,oBAApB,CAAN;AACH;AACDxB,4BAAoBsB,OAAOtB,iBAA3B;AACAH,uBAAeyB,OAAOzB,YAAtB;AACAC,2BAAmBwB,OAAOxB,gBAA1B;AACAH,qBAAa2B,OAAO3B,UAApB;AACH;;AAED,aAAS8B,SAAT,CAAmBC,EAAnB,EAAuB;AACnB,YAAIC,OAAO,EAAX;AACA,YAAIC,GAAJ;AACA,YAAIC,QAAJ;AACA,YAAIC,aAAarD,WAAWY,OAAX,EAAoB+B,MAApB,CAA2B;AACxCW,kBAAML;AADkC,SAA3B,CAAjB;;AAIAI,mBAAWE,iBAAX,CAA6BtC,KAAKZ,OAAL,CAAa8B,IAA1C;;AAEA,eAAOkB,WAAWG,QAAX,MACHH,WAAWE,iBAAX,CAA6BtC,KAAKZ,OAAL,CAAa8B,IAAb,CAAkBC,QAA/C,EAAyD,IAAzD,CADJ,EACoE;AAChEe,kBAAM,EAAN;;AAEAA,gBAAId,OAAJ,GAAcgB,WAAWI,QAAX,CAAoBxC,KAAKZ,OAAL,CAAa8B,IAAb,CAAkBC,QAAlB,CAA2BC,OAA/C,CAAd;;AAEAc,gBAAIO,SAAJ,GAAgB,EAAhB;AACA,mBAAOL,WAAWG,QAAX,MACHH,WAAWM,UAAX,CAAsB1C,KAAKZ,OAAL,CAAa8B,IAAb,CAAkBC,QAAlB,CAA2BE,iBAAjD,EAAoE,IAApE,CADJ,EAC+E;AAC3E,sBAAMsB,uBAAuBP,WAAWQ,mBAAX,EAA7B;AACA,sBAAMC,WAAWT,WAAWU,MAAX,EAAjB;AACAX,2BAAW,EAAX;;AAEAA,yBAASY,KAAT,GAAiBX,WAAWI,QAAX,CAAoBxC,KAAKZ,OAAL,CAAa8B,IAAb,CAAkBC,QAAlB,CAA2BE,iBAA3B,CAA6CC,QAAjE,CAAjB;AACA,oBAAIa,SAASY,KAAT,KAAmB,CAAvB,EAA0B;AACtB,0BAAM,IAAIlB,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAEDM,yBAASa,eAAT,GACIZ,WAAWI,QAAX,CAAoBxC,KAAKZ,OAAL,CAAa8B,IAAb,CAAkBC,QAAlB,CAA2BE,iBAA3B,CAA6CE,kBAAjE,CADJ;;AAGAW,oBAAIO,SAAJ,CAAcQ,IAAd,CAAmBd,QAAnB;;AAEA;AACAC,2BAAWc,MAAX,CAAkBL,WAAWF,oBAA7B;AACH;;AAED,gBAAIT,IAAIO,SAAJ,CAAcU,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,sBAAM,IAAItB,KAAJ,CAAU,8BAAV,CAAN;AACH;AACDI,iBAAKgB,IAAL,CAAUf,GAAV;AACH;;AAED,YAAID,KAAKkB,MAAL,KAAgB,CAApB,EAAuB;AACnB,kBAAM,IAAItB,KAAJ,CAAU,8BAAV,CAAN;AACH;AACD,eAAOI,IAAP;AACH;;AAED,aAASmB,aAAT,CAAuBf,IAAvB,EAA6BgB,YAA7B,EAA2CC,UAA3C,EAAuDC,eAAvD,EAAwE;AACpE,YAAIC,QAAJ;AACA,YAAIC,MAAJ;AACA,YAAIC,QAAJ;AACA,YAAIC,OAAJ;AACA,YAAIC,CAAJ;AACA,YAAIC,GAAJ;AACA,YAAIC,KAAJ;AACA,YAAIC,GAAJ;;AAEAN,iBAAS1B,UAAUM,IAAV,CAAT;AACAqB,mBAAW,EAAX;;AAEA;AACA;AACA;AACA,aAAKE,IAAI,CAAJ,EAAOC,MAAMJ,OAAON,MAAzB,EAAiCS,IAAIC,GAArC,EAA0CD,KAAK,CAA/C,EAAkD;AAC9CD,sBAAU,IAAIvE,OAAJ,EAAV;AACAoE,uBAAW,CAAX;;AAEA,gBAAII,IAAIH,OAAON,MAAP,GAAgB,CAAxB,EAA2B;AACvBK,2BAAWC,OAAOG,IAAI,CAAX,EAAcxC,OAAd,GAAwBqC,OAAOG,CAAP,EAAUxC,OAA7C;AACH,aAFD,MAEO;AACHoC,2BAAWD,kBAAkBE,OAAOG,CAAP,EAAUxC,OAAvC;AACH;;AAED;AACA;AACAuC,oBAAQH,QAAR,GAAmBA,QAAnB;AACAG,oBAAQK,SAAR,GAAoBP,OAAOG,CAAP,EAAUxC,OAA9B;AACAuC,oBAAQM,SAAR,GAAoB,IAApB,CAd8C,CAcpB;AAC1BH,oBAAQL,OAAOG,CAAP,EAAUnB,SAAV,CAAoB,CAApB,EAAuBO,eAAvB,GAAyCK,YAAjD;;AAEA,gBAAIO,IAAIH,OAAON,MAAP,GAAgB,CAAxB,EAA2B;AACvBY,sBAAMN,OAAOG,IAAI,CAAX,EAAcnB,SAAd,CAAwB,CAAxB,EAA2BO,eAA3B,GAA6CK,YAA7C,GAA4D,CAAlE;AACH,aAFD,MAEO;AACHU,sBAAMT,aAAa,CAAnB;AACH;;AAEDK,oBAAQO,UAAR,GAAqBJ,QAAQ,GAAR,GAAcC,GAAnC;AACAL,qBAAST,IAAT,CAAcU,OAAd;AACH;;AAED5D,eAAOoE,KAAP,CAAa,kBAAkBT,SAASP,MAA3B,GAAoC,QAAjD;;AAEA,eAAOO,QAAP;AACH;;AAED,aAASU,eAAT,CAAyB/B,IAAzB,EAA+BgC,KAA/B,EAAsCC,QAAtC,EAAgDC,QAAhD,EAA0D;AACtD,YAAInC,aAAarD,WAAWY,OAAX,EAAoB+B,MAApB,CAA2B;AACxCW,kBAAMA;AADkC,SAA3B,CAAjB;AAGA,YAAImB,QAAJ;AACA,YAAIE,QAAJ;AACA,YAAIc,QAAQF,SAASG,KAAT,CAAe,GAAf,CAAZ;AACA,YAAIC,UAAU,IAAd;AACA,YAAIC,OAAO;AACPC,iBAAKP,KADE;AAEPQ,mBAAO;AACHf,uBAAOgB,WAAWN,MAAM,CAAN,CAAX,CADJ;AAEHT,qBAAKe,WAAWN,MAAM,CAAN,CAAX;AAFF,aAFA;AAMPE,qBAASA;AANF,SAAX;AAQA,YAAIpB,UAAJ;AACA,YAAID,YAAJ;;AAEAtD,eAAOoE,KAAP,CAAa,wBAAwBQ,KAAKC,GAA1C;;AAEA;AACAxC,mBAAW2C,eAAX,CAA2B/E,KAAKS,IAAhC;AACA2B,mBAAWM,UAAX,CAAsB1C,KAAKZ,OAA3B;;AAEA;AACAkE,qBAAalB,WAAWQ,mBAAX,EAAb;AACAU,sBAAclB,WAAWU,MAAX,EAAd;AACAO,uBAAejB,WAAWU,MAAX,EAAf;;AAEA;AACA,eAAOV,WAAWG,QAAX,MACH,CAACH,WAAWE,iBAAX,CAA6BtC,KAAKZ,OAAL,CAAayB,IAA1C,EAAgD,IAAhD,CADL,EAC4D;AACxD,gBAAI,EAAEuB,WAAW2C,eAAX,CAA2B/E,KAAKZ,OAAL,CAAawB,QAAxC,EAAkD,IAAlD,KACEwB,WAAW2C,eAAX,CAA2B/E,KAAKZ,OAAL,CAAa6B,MAAxC,EAAgD,IAAhD,CADF,IAEEmB,WAAW2C,eAAX,CAA2B/E,KAAKZ,OAAL,CAAa8B,IAAxC,EAA8C,IAA9C,CAFF,IAGEkB,WAAW2C,eAAX,CAA2B/E,KAAKwB,IAAhC,EAAsC,IAAtC,CAHJ,CAAJ,EAGsD;AAClD,sBAAM,IAAIK,KAAJ,CAAU,kCAAV,CAAN;AACH;AACJ;;AAED;AACA,eAAO2B,aAAawB,SAApB,EAA+B;AAC3B,gBAAIC,UAAU7C,WAAWQ,mBAAX,CAA+B,IAA/B,CAAd;AACA,gBAAIsC,kBAAkB9C,WAAWQ,mBAAX,EAAtB;;AAEA,oBAAQqC,OAAR;AACI,qBAAKjF,KAAKZ,OAAL,CAAayB,IAAb,CAAkBG,QAAlB,CAA2BN,GAAhC;AACI8C,+BAAWpB,WAAWpC,KAAKZ,OAAL,CAAayB,IAAb,CAAkBG,QAAlB,CAA2BD,KAAtC,EAA6CmE,eAA7C,CAAX;AACA;AACJ;AACI9C,+BAAWc,MAAX,CAAkBd,WAAWU,MAAX,KAAsBoC,eAAxC;AACA;AANR;AAQH;;AAED;AACA;;AAEAR,kBAAUS,mBAAmBR,IAAnB,CAAV;;AAEA,cAAMS,SAAS,UAAUC,QAAV,EAAoB;AAC/B3B,uBAAWN,cAAciC,QAAd,EAAwBhC,YAAxB,EAAsCC,UAAtC,EAAkDE,QAAlD,CAAX;AACAe,qBAASb,QAAT;AACH,SAHD;;AAKA,cAAM4B,YAAY,YAAY;AAC1BvF,mBAAOwF,KAAP,CAAa,0BAA0BZ,KAAKC,GAA5C;AACAL,qBAAS,IAAT;AACH,SAHD;;AAKAlE,mBAAWmF,IAAX,CAAgB;AACZd,qBAASA,OADG;AAEZe,qBAASL,MAFG;AAGZG,mBAAOD;AAHK,SAAhB;;AAMAvF,eAAOoE,KAAP,CAAa,wBAAwBQ,KAAKC,GAA7B,GAAmC,SAAnC,GAA+CD,KAAKE,KAAL,CAAWf,KAA1D,GAAkE,GAAlE,GAAwEa,KAAKE,KAAL,CAAWd,GAAhG;AACH;;AAED,aAAS2B,kBAAT,GAA8B;AAC1B,YAAI,CAACpF,iBAAD,IAAsB,CAACA,kBAAkBqF,cAAlB,CAAiC,SAAjC,CAA3B,EAAwE;AACpE,kBAAM,IAAI9D,KAAJ,CAAU,gDAAV,CAAN;AACH;AACJ;;AAED,aAAS+D,kBAAT,CAA4BC,cAA5B,EAA4CC,WAA5C,EAAyD;AACrDJ;AACA,YAAIhB,UAAU,IAAd;AACA,YAAIqB,UAAUzF,kBAAkB0F,OAAlB,CAA0BH,eAAeI,IAAzC,CAAd;AACA,YAAI5B,QAAQ0B,UAAUA,QAAQnB,GAAlB,GAAwBI,SAApC;AACA,YAAIkB,YAAYL,eAAehB,KAAf,CAAqBJ,KAArB,CAA2B,GAA3B,CAAhB;AACA,YAAIE,OAAOmB,eAAe;AACtBjB,mBAAO;AACHf,uBAAOgB,WAAWoB,UAAU,CAAV,CAAX,CADJ;AAEHnC,qBAAKe,WAAWoB,UAAU,CAAV,CAAX;AAFF,aADe;AAKtBxB,qBAASA,OALa;AAMtBE,iBAAKP,KANiB;AAOtB8B,kBAAM;AAPgB,SAA1B;;AAUApG,eAAO4E,IAAP,CAAY,+BAAZ;;AAEAD,kBAAUS,mBAAmBR,IAAnB,CAAV;;AAEA,cAAMS,SAAS,YAAY;AACvB;AACA;AACAxF,qBAASwG,OAAT,CAAiBvH,OAAOwH,qBAAxB,EAA+C;AAC3CR,gCAAgBA;AAD2B,aAA/C;AAGH,SAND;;AAQA,cAAMP,YAAY,YAAY;AAC1B1F,qBAASwG,OAAT,CAAiBvH,OAAOwH,qBAAxB,EAA+C;AAC3CR,gCAAgBA;AAD2B,aAA/C;AAGH,SAJD;;AAMAxF,mBAAWmF,IAAX,CAAgB;AACZd,qBAASA,OADG;AAEZe,qBAASL,MAFG;AAGZG,mBAAOD;AAHK,SAAhB;;AAMAvF,eAAOoE,KAAP,CAAa,wBAAwBQ,KAAKC,GAA1C;AACH;;AAED,aAAS0B,YAAT,CAAsBT,cAAtB,EAAsCU,IAAtC,EAA4CjC,QAA5C,EAAsDC,QAAtD,EAAgE;AAC5DmB;AACA,YAAIhB,UAAU,IAAd;AACA,YAAIqB,UAAUzF,kBAAkB0F,OAAlB,CAA0BH,eAAeI,IAAzC,CAAd;AACA,YAAI5B,QAAQ0B,UAAUA,QAAQnB,GAAlB,GAAwBI,SAApC;AACA,YAAIwB,cAAc,IAAlB;AACA,YAAI7B,OAAO;AACP8B,yBAAa,CADN;AAEPD,yBAAaA,WAFN;AAGP3B,mBAAO;AACHf,uBAAO,CADJ;AAEHC,qBAAKyC;AAFF,aAHA;AAOP9B,qBAASA,OAPF;AAQPE,iBAAKP,KARE;AASP8B,kBAAM;AATC,SAAX;;AAYA5B,mBAAW,CAACA,QAAD,GAAYmC,QAAZ,GAAuBnC,QAAlC;AACAG,kBAAUS,mBAAmBR,IAAnB,CAAV;;AAEA;AACA;AACA;AACA5E,eAAOoE,KAAP,CAAa,qBAAb;;AAEA,cAAMiB,SAAS,UAAUC,QAAV,EAAoB;AAC/BjB,4BAAgBiB,QAAhB,EAA0BhB,KAA1B,EAAiCC,QAAjC,EAA2C,UAAUZ,QAAV,EAAoB;AAC3Da,yBAASb,QAAT,EAAmBmC,cAAnB,EAAmCU,IAAnC;AACH,aAFD;AAGH,SAJD;;AAMA,cAAMjB,YAAY,YAAY;AAC1Bf,qBAAS,IAAT,EAAesB,cAAf,EAA+BU,IAA/B;AACH,SAFD;;AAIAlG,mBAAWmF,IAAX,CAAgB;AACZd,qBAASA,OADG;AAEZe,qBAASL,MAFG;AAGZG,mBAAOD;AAHK,SAAhB;AAKH;;AAED,aAASoB,QAAT,CAAkBhD,QAAlB,EAA4BmC,cAA5B,EAA4CU,IAA5C,EAAkD;AAC9C,YAAI7C,QAAJ,EAAc;AACV9D,qBAASwG,OAAT,CAAiBvH,OAAO8H,eAAxB,EAAyC;AACrCjD,0BAAUA,QAD2B;AAErCmC,gCAAgBA,cAFqB;AAGrCe,2BAAWL;AAH0B,aAAzC;AAKH,SAND,MAMO;AACH3G,qBAASwG,OAAT,CAAiBvH,OAAO8H,eAAxB,EAAyC;AACrCjD,0BAAU,IAD2B;AAErCmC,gCAAgBA,cAFqB;AAGrCe,2BAAWL,IAH0B;AAIrChB,uBAAO,IAAI/F,WAAJ,CAAgBC,OAAOoH,8BAAvB,EAAuDpH,OAAOqH,iCAA9D;AAJ8B,aAAzC;AAMH;AACJ;;AAED,aAAS3B,kBAAT,CAA4BR,IAA5B,EAAkC;AAC9B,YAAID,UAAU,IAAIpF,eAAJ,EAAd;;AAEAoF,gBAAQ6B,IAAR,GAAe5B,KAAKwB,IAAL,GAAY9G,YAAY0H,iBAAxB,GAA4C1H,YAAY2H,kBAAvE;AACAtC,gBAAQE,GAAR,GAAcD,KAAKC,GAAnB;AACAF,gBAAQG,KAAR,GAAgBF,KAAKE,KAAL,CAAWf,KAAX,GAAmB,GAAnB,GAAyBa,KAAKE,KAAL,CAAWd,GAApD;;AAEA,eAAOW,OAAP;AACH;;AAED,aAASuC,KAAT,GAAiB;AACbhH,qBAAa,IAAb;AACAC,0BAAkB,IAAlB;AACH;;AAEDJ,eAAW;AACP6B,mBAAWA,SADJ;AAEPF,oBAAYA,UAFL;AAGPmE,4BAAoBA,kBAHb;AAIPU,sBAAcA,YAJP;AAKPW,eAAOA;AALA,KAAX;;AAQA1G;;AAEA,WAAOT,QAAP;AACH;;AAEDJ,sBAAsBwH,qBAAtB,GAA8C,uBAA9C;AACA,eAAejI,aAAakI,mBAAb,CAAiCzH,qBAAjC,CAAf","file":"WebmSegmentBaseLoader.js","sourcesContent":["import Events from '../core/events/Events';\nimport EventBus from '../core/EventBus';\nimport EBMLParser from '../streaming/utils/EBMLParser';\nimport Constants from '../streaming/constants/Constants';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport RequestModifier from '../streaming/utils/RequestModifier';\nimport Segment from './vo/Segment';\nimport {\n    HTTPRequest\n} from '../streaming/vo/metrics/HTTPRequest';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport HTTPLoader from '../streaming/net/HTTPLoader';\nimport DashJSError from '../streaming/vo/DashJSError';\nimport Errors from '../core/errors/Errors';\n\nfunction WebmSegmentBaseLoader() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        WebM,\n        errHandler,\n        requestModifier,\n        metricsModel,\n        mediaPlayerModel,\n        httpLoader,\n        baseURLController;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        WebM = {\n            EBML: {\n                tag: 0x1A45DFA3,\n                required: true\n            },\n            Segment: {\n                tag: 0x18538067,\n                required: true,\n                SeekHead: {\n                    tag: 0x114D9B74,\n                    required: true\n                },\n                Info: {\n                    tag: 0x1549A966,\n                    required: true,\n                    TimecodeScale: {\n                        tag: 0x2AD7B1,\n                        required: true,\n                        parse: 'getMatroskaUint'\n                    },\n                    Duration: {\n                        tag: 0x4489,\n                        required: true,\n                        parse: 'getMatroskaFloat'\n                    }\n                },\n                Tracks: {\n                    tag: 0x1654AE6B,\n                    required: true\n                },\n                Cues: {\n                    tag: 0x1C53BB6B,\n                    required: true,\n                    CuePoint: {\n                        tag: 0xBB,\n                        required: true,\n                        CueTime: {\n                            tag: 0xB3,\n                            required: true,\n                            parse: 'getMatroskaUint'\n                        },\n                        CueTrackPositions: {\n                            tag: 0xB7,\n                            required: true,\n                            CueTrack: {\n                                tag: 0xF7,\n                                required: true,\n                                parse: 'getMatroskaUint'\n                            },\n                            CueClusterPosition: {\n                                tag: 0xF1,\n                                required: true,\n                                parse: 'getMatroskaUint'\n                            }\n                        }\n                    }\n                }\n            },\n            Void: {\n                tag: 0xEC,\n                required: true\n            }\n        };\n    }\n\n    function initialize() {\n        requestModifier = RequestModifier(context).getInstance();\n        httpLoader = HTTPLoader(context).create({\n            errHandler: errHandler,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            requestModifier: requestModifier\n        });\n    }\n\n    function setConfig(config) {\n        if (!config.baseURLController || !config.metricsModel || !config.mediaPlayerModel || !config.errHandler) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n        baseURLController = config.baseURLController;\n        metricsModel = config.metricsModel;\n        mediaPlayerModel = config.mediaPlayerModel;\n        errHandler = config.errHandler;\n    }\n\n    function parseCues(ab) {\n        let cues = [];\n        let cue;\n        let cueTrack;\n        let ebmlParser = EBMLParser(context).create({\n            data: ab\n        });\n\n        ebmlParser.consumeTagAndSize(WebM.Segment.Cues);\n\n        while (ebmlParser.moreData() &&\n            ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint, true)) {\n            cue = {};\n\n            cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime);\n\n            cue.CueTracks = [];\n            while (ebmlParser.moreData() &&\n                ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions, true)) {\n                const cueTrackPositionSize = ebmlParser.getMatroskaCodedNum();\n                const startPos = ebmlParser.getPos();\n                cueTrack = {};\n\n                cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack);\n                if (cueTrack.Track === 0) {\n                    throw new Error('Cue track cannot be 0');\n                }\n\n                cueTrack.ClusterPosition =\n                    ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition);\n\n                cue.CueTracks.push(cueTrack);\n\n                // we're not interested any other elements - skip remaining bytes\n                ebmlParser.setPos(startPos + cueTrackPositionSize);\n            }\n\n            if (cue.CueTracks.length === 0) {\n                throw new Error('Mandatory cuetrack not found');\n            }\n            cues.push(cue);\n        }\n\n        if (cues.length === 0) {\n            throw new Error('mandatory cuepoint not found');\n        }\n        return cues;\n    }\n\n    function parseSegments(data, segmentStart, segmentEnd, segmentDuration) {\n        let duration;\n        let parsed;\n        let segments;\n        let segment;\n        let i;\n        let len;\n        let start;\n        let end;\n\n        parsed = parseCues(data);\n        segments = [];\n\n        // we are assuming one cue track per cue point\n        // both duration and media range require the i + 1 segment\n        // the final segment has to use global segment parameters\n        for (i = 0, len = parsed.length; i < len; i += 1) {\n            segment = new Segment();\n            duration = 0;\n\n            if (i < parsed.length - 1) {\n                duration = parsed[i + 1].CueTime - parsed[i].CueTime;\n            } else {\n                duration = segmentDuration - parsed[i].CueTime;\n            }\n\n            // note that we don't explicitly set segment.media as this will be\n            // computed when all BaseURLs are resolved later\n            segment.duration = duration;\n            segment.startTime = parsed[i].CueTime;\n            segment.timescale = 1000; // hardcoded for ms\n            start = parsed[i].CueTracks[0].ClusterPosition + segmentStart;\n\n            if (i < parsed.length - 1) {\n                end = parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1;\n            } else {\n                end = segmentEnd - 1;\n            }\n\n            segment.mediaRange = start + '-' + end;\n            segments.push(segment);\n        }\n\n        logger.debug('Parsed cues: ' + segments.length + ' cues.');\n\n        return segments;\n    }\n\n    function parseEbmlHeader(data, media, theRange, callback) {\n        let ebmlParser = EBMLParser(context).create({\n            data: data\n        });\n        let duration;\n        let segments;\n        let parts = theRange.split('-');\n        let request = null;\n        let info = {\n            url: media,\n            range: {\n                start: parseFloat(parts[0]),\n                end: parseFloat(parts[1])\n            },\n            request: request\n        };\n        let segmentEnd;\n        let segmentStart;\n\n        logger.debug('Parse EBML header: ' + info.url);\n\n        // skip over the header itself\n        ebmlParser.skipOverElement(WebM.EBML);\n        ebmlParser.consumeTag(WebM.Segment);\n\n        // segments start here\n        segmentEnd = ebmlParser.getMatroskaCodedNum();\n        segmentEnd += ebmlParser.getPos();\n        segmentStart = ebmlParser.getPos();\n\n        // skip over any top level elements to get to the segment info\n        while (ebmlParser.moreData() &&\n            !ebmlParser.consumeTagAndSize(WebM.Segment.Info, true)) {\n            if (!(ebmlParser.skipOverElement(WebM.Segment.SeekHead, true) ||\n                    ebmlParser.skipOverElement(WebM.Segment.Tracks, true) ||\n                    ebmlParser.skipOverElement(WebM.Segment.Cues, true) ||\n                    ebmlParser.skipOverElement(WebM.Void, true))) {\n                throw new Error('no valid top level element found');\n            }\n        }\n\n        // we only need one thing in segment info, duration\n        while (duration === undefined) {\n            let infoTag = ebmlParser.getMatroskaCodedNum(true);\n            let infoElementSize = ebmlParser.getMatroskaCodedNum();\n\n            switch (infoTag) {\n                case WebM.Segment.Info.Duration.tag:\n                    duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);\n                    break;\n                default:\n                    ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);\n                    break;\n            }\n        }\n\n        // once we have what we need from segment info, we jump right to the\n        // cues\n\n        request = getFragmentRequest(info);\n\n        const onload = function (response) {\n            segments = parseSegments(response, segmentStart, segmentEnd, duration);\n            callback(segments);\n        };\n\n        const onloadend = function () {\n            logger.error('Download Error: Cues ' + info.url);\n            callback(null);\n        };\n\n        httpLoader.load({\n            request: request,\n            success: onload,\n            error: onloadend\n        });\n\n        logger.debug('Perform cues load: ' + info.url + ' bytes=' + info.range.start + '-' + info.range.end);\n    }\n\n    function checkSetConfigCall() {\n        if (!baseURLController || !baseURLController.hasOwnProperty('resolve')) {\n            throw new Error('setConfig function has to be called previously');\n        }\n    }\n\n    function loadInitialization(representation, loadingInfo) {\n        checkSetConfigCall();\n        let request = null;\n        let baseUrl = baseURLController.resolve(representation.path);\n        let media = baseUrl ? baseUrl.url : undefined;\n        let initRange = representation.range.split('-');\n        let info = loadingInfo || {\n            range: {\n                start: parseFloat(initRange[0]),\n                end: parseFloat(initRange[1])\n            },\n            request: request,\n            url: media,\n            init: true\n        };\n\n        logger.info('Start loading initialization.');\n\n        request = getFragmentRequest(info);\n\n        const onload = function () {\n            // note that we don't explicitly set rep.initialization as this\n            // will be computed when all BaseURLs are resolved later\n            eventBus.trigger(Events.INITIALIZATION_LOADED, {\n                representation: representation\n            });\n        };\n\n        const onloadend = function () {\n            eventBus.trigger(Events.INITIALIZATION_LOADED, {\n                representation: representation\n            });\n        };\n\n        httpLoader.load({\n            request: request,\n            success: onload,\n            error: onloadend\n        });\n\n        logger.debug('Perform init load: ' + info.url);\n    }\n\n    function loadSegments(representation, type, theRange, callback) {\n        checkSetConfigCall();\n        let request = null;\n        let baseUrl = baseURLController.resolve(representation.path);\n        let media = baseUrl ? baseUrl.url : undefined;\n        let bytesToLoad = 8192;\n        let info = {\n            bytesLoaded: 0,\n            bytesToLoad: bytesToLoad,\n            range: {\n                start: 0,\n                end: bytesToLoad\n            },\n            request: request,\n            url: media,\n            init: false\n        };\n\n        callback = !callback ? onLoaded : callback;\n        request = getFragmentRequest(info);\n\n        // first load the header, but preserve the manifest range so we can\n        // load the cues after parsing the header\n        // NOTE: we expect segment info to appear in the first 8192 bytes\n        logger.debug('Parsing ebml header');\n\n        const onload = function (response) {\n            parseEbmlHeader(response, media, theRange, function (segments) {\n                callback(segments, representation, type);\n            });\n        };\n\n        const onloadend = function () {\n            callback(null, representation, type);\n        };\n\n        httpLoader.load({\n            request: request,\n            success: onload,\n            error: onloadend\n        });\n    }\n\n    function onLoaded(segments, representation, type) {\n        if (segments) {\n            eventBus.trigger(Events.SEGMENTS_LOADED, {\n                segments: segments,\n                representation: representation,\n                mediaType: type\n            });\n        } else {\n            eventBus.trigger(Events.SEGMENTS_LOADED, {\n                segments: null,\n                representation: representation,\n                mediaType: type,\n                error: new DashJSError(Errors.SEGMENT_BASE_LOADER_ERROR_CODE, Errors.SEGMENT_BASE_LOADER_ERROR_MESSAGE)\n            });\n        }\n    }\n\n    function getFragmentRequest(info) {\n        let request = new FragmentRequest();\n\n        request.type = info.init ? HTTPRequest.INIT_SEGMENT_TYPE : HTTPRequest.MEDIA_SEGMENT_TYPE;\n        request.url = info.url;\n        request.range = info.range.start + '-' + info.range.end;\n\n        return request;\n    }\n\n    function reset() {\n        errHandler = null;\n        requestModifier = null;\n    }\n\n    instance = {\n        setConfig: setConfig,\n        initialize: initialize,\n        loadInitialization: loadInitialization,\n        loadSegments: loadSegments,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nWebmSegmentBaseLoader.__dashjs_factory_name = 'WebmSegmentBaseLoader';\nexport default FactoryMaker.getSingletonFactory(WebmSegmentBaseLoader);\n"]}