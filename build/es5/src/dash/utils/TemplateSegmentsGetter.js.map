{"version":3,"sources":["../../../../../src/dash/utils/TemplateSegmentsGetter.js"],"names":["FactoryMaker","replaceTokenForTemplate","getIndexBasedSegment","decideSegmentListRangeForTemplate","TemplateSegmentsGetter","config","isDynamic","timelineConverter","instance","getSegmentsFromTemplate","representation","requestedTime","index","availabilityUpperLimit","template","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentTemplate","duration","segmentDuration","availabilityWindow","segmentAvailabilityRange","segments","url","seg","segmentRange","periodSegIdx","startIdx","endIdx","start","startNumber","isNaN","end","replacementTime","media","replacementNumber","push","availableSegmentsNumber","Math","ceil","getSegments","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA,MAAOA,aAAP,KAAyB,yBAAzB,CAEA,OAAQC,uBAAR,CAAiCC,oBAAjC,CAAuDC,iCAAvD,KAA+F,iBAA/F,CAEA,QAASC,uBAAT,CAAgCC,MAAhC,CAAwCC,SAAxC,CAAmD,CAE/C,KAAMC,mBAAoBF,OAAOE,iBAAjC,CAEA,GAAIC,SAAJ,CAEA,QAASC,wBAAT,CAAiCC,cAAjC,CAAiDC,aAAjD,CAAgEC,KAAhE,CAAuEC,sBAAvE,CAA+F,CAC3F,KAAMC,UAAWJ,eAAeK,UAAf,CAA0BC,MAA1B,CAAiCC,GAAjC,CAAqCC,QAArC,CAA8CC,cAA9C,CAA6DT,eAAeK,UAAf,CAA0BC,MAA1B,CAAiCJ,KAA9F,EACbQ,qBADa,CACSV,eAAeK,UAAf,CAA0BH,KADnC,EAC0CS,sBAD1C,CACiEX,eAAeE,KADhF,EACuFU,eADxG,CAEA,KAAMC,UAAWb,eAAec,eAAhC,CACA,KAAMC,oBAAqBf,eAAegB,wBAA1C,CAEA,KAAMC,UAAW,EAAjB,CACA,GAAIC,KAAM,IAAV,CACA,GAAIC,KAAM,IAAV,CAEA,GAAIC,aAAJ,CACIC,YADJ,CAEIC,QAFJ,CAGIC,MAHJ,CAIIC,KAJJ,CAMAA,MAAQxB,eAAeyB,WAAvB,CAEA,GAAIC,MAAMb,QAAN,GAAmB,CAACjB,SAAxB,CAAmC,CAC/BwB,aAAe,CAACI,MAAOA,KAAR,CAAeG,IAAKH,KAApB,CAAf,CACH,CAFD,IAGK,CACDJ,aAAe3B,kCAAkCI,iBAAlC,CAAqDD,SAArD,CAAgEI,cAAhE,CAAgFC,aAAhF,CAA+FC,KAA/F,CAAsGC,sBAAtG,CAAf,CACH,CAEDmB,SAAWF,aAAaI,KAAxB,CACAD,OAASH,aAAaO,GAAtB,CAEA,IAAKN,aAAeC,QAApB,CAA8BD,cAAgBE,MAA9C,CAAsDF,cAAtD,CAAsE,CAClEF,IAAM3B,qBAAqBK,iBAArB,CAAwCD,SAAxC,CAAmDI,cAAnD,CAAmEqB,YAAnE,CAAN,CACAF,IAAIS,eAAJ,CAAsB,CAACJ,MAAQH,YAAR,CAAuB,CAAxB,EAA6BrB,eAAec,eAAlE,CACAI,IAAMd,SAASyB,KAAf,CACAX,IAAM3B,wBAAwB2B,GAAxB,CAA6B,QAA7B,CAAuCC,IAAIW,iBAA3C,CAAN,CACAZ,IAAM3B,wBAAwB2B,GAAxB,CAA6B,MAA7B,CAAqCC,IAAIS,eAAzC,CAAN,CACAT,IAAIU,KAAJ,CAAYX,GAAZ,CAEAD,SAASc,IAAT,CAAcZ,GAAd,EACAA,IAAM,IAAN,CACH,CAED,GAAIO,MAAMb,QAAN,CAAJ,CAAqB,CACjBb,eAAegC,uBAAf,CAAyC,CAAzC,CACH,CAFD,IAGK,CACDhC,eAAegC,uBAAf,CAAyCC,KAAKC,IAAL,CAAU,CAACnB,mBAAmBY,GAAnB,CAAyBZ,mBAAmBS,KAA7C,EAAsDX,QAAhE,CAAzC,CACH,CAED,MAAOI,SAAP,CACH,CAEDnB,SAAW,CACPqC,YAAapC,uBADN,CAAX,CAIA,MAAOD,SAAP,CACH,CAEDJ,uBAAuB0C,qBAAvB,CAA+C,wBAA/C,CACA,KAAMC,SAAU/C,aAAagD,eAAb,CAA6B5C,sBAA7B,CAAhB,CACA,cAAe2C,QAAf","file":"TemplateSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport {replaceTokenForTemplate, getIndexBasedSegment, decideSegmentListRangeForTemplate} from './SegmentsUtils';\n\nfunction TemplateSegmentsGetter(config, isDynamic) {\n\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function getSegmentsFromTemplate(representation, requestedTime, index, availabilityUpperLimit) {\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\n        const duration = representation.segmentDuration;\n        const availabilityWindow = representation.segmentAvailabilityRange;\n\n        const segments = [];\n        let url = null;\n        let seg = null;\n\n        let segmentRange,\n            periodSegIdx,\n            startIdx,\n            endIdx,\n            start;\n\n        start = representation.startNumber;\n\n        if (isNaN(duration) && !isDynamic) {\n            segmentRange = {start: start, end: start};\n        }\n        else {\n            segmentRange = decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);\n        }\n\n        startIdx = segmentRange.start;\n        endIdx = segmentRange.end;\n\n        for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {\n            seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, periodSegIdx);\n            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;\n            url = template.media;\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\n            seg.media = url;\n\n            segments.push(seg);\n            seg = null;\n        }\n\n        if (isNaN(duration)) {\n            representation.availableSegmentsNumber = 1;\n        }\n        else {\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\n        }\n\n        return segments;\n    }\n\n    instance = {\n        getSegments: getSegmentsFromTemplate\n    };\n\n    return instance;\n}\n\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\nexport default factory;\n"]}