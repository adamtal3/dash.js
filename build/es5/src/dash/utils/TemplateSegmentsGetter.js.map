{"version":3,"sources":["../../../../../src/dash/utils/TemplateSegmentsGetter.js"],"names":["FactoryMaker","replaceTokenForTemplate","getIndexBasedSegment","decideSegmentListRangeForTemplate","TemplateSegmentsGetter","config","isDynamic","timelineConverter","instance","getSegmentsFromTemplate","representation","requestedTime","index","availabilityUpperLimit","template","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentTemplate","duration","segmentDuration","availabilityWindow","segmentAvailabilityRange","segments","url","seg","segmentRange","periodSegIdx","startIdx","endIdx","start","startNumber","isNaN","end","replacementTime","media","replacementNumber","push","availableSegmentsNumber","Math","ceil","getSegments","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,YAAP,MAAyB,yBAAzB;;AAEA,SAAQC,uBAAR,EAAiCC,oBAAjC,EAAuDC,iCAAvD,QAA+F,iBAA/F;;AAEA,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,SAAxC,EAAmD;;AAE/C,UAAMC,oBAAoBF,OAAOE,iBAAjC;;AAEA,QAAIC,QAAJ;;AAEA,aAASC,uBAAT,CAAiCC,cAAjC,EAAiDC,aAAjD,EAAgEC,KAAhE,EAAuEC,sBAAvE,EAA+F;AAC3F,cAAMC,WAAWJ,eAAeK,UAAf,CAA0BC,MAA1B,CAAiCC,GAAjC,CAAqCC,QAArC,CAA8CC,cAA9C,CAA6DT,eAAeK,UAAf,CAA0BC,MAA1B,CAAiCJ,KAA9F,EACbQ,qBADa,CACSV,eAAeK,UAAf,CAA0BH,KADnC,EAC0CS,sBAD1C,CACiEX,eAAeE,KADhF,EACuFU,eADxG;AAEA,cAAMC,WAAWb,eAAec,eAAhC;AACA,cAAMC,qBAAqBf,eAAegB,wBAA1C;;AAEA,cAAMC,WAAW,EAAjB;AACA,YAAIC,MAAM,IAAV;AACA,YAAIC,MAAM,IAAV;;AAEA,YAAIC,YAAJ,EACIC,YADJ,EAEIC,QAFJ,EAGIC,MAHJ,EAIIC,KAJJ;;AAMAA,gBAAQxB,eAAeyB,WAAvB;;AAEA,YAAIC,MAAMb,QAAN,KAAmB,CAACjB,SAAxB,EAAmC;AAC/BwB,2BAAe,EAACI,OAAOA,KAAR,EAAeG,KAAKH,KAApB,EAAf;AACH,SAFD,MAGK;AACDJ,2BAAe3B,kCAAkCI,iBAAlC,EAAqDD,SAArD,EAAgEI,cAAhE,EAAgFC,aAAhF,EAA+FC,KAA/F,EAAsGC,sBAAtG,CAAf;AACH;;AAEDmB,mBAAWF,aAAaI,KAAxB;AACAD,iBAASH,aAAaO,GAAtB;;AAEA,aAAKN,eAAeC,QAApB,EAA8BD,gBAAgBE,MAA9C,EAAsDF,cAAtD,EAAsE;AAClEF,kBAAM3B,qBAAqBK,iBAArB,EAAwCD,SAAxC,EAAmDI,cAAnD,EAAmEqB,YAAnE,CAAN;AACAF,gBAAIS,eAAJ,GAAsB,CAACJ,QAAQH,YAAR,GAAuB,CAAxB,IAA6BrB,eAAec,eAAlE;AACAI,kBAAMd,SAASyB,KAAf;AACAX,kBAAM3B,wBAAwB2B,GAAxB,EAA6B,QAA7B,EAAuCC,IAAIW,iBAA3C,CAAN;AACAZ,kBAAM3B,wBAAwB2B,GAAxB,EAA6B,MAA7B,EAAqCC,IAAIS,eAAzC,CAAN;AACAT,gBAAIU,KAAJ,GAAYX,GAAZ;;AAEAD,qBAASc,IAAT,CAAcZ,GAAd;AACAA,kBAAM,IAAN;AACH;;AAED,YAAIO,MAAMb,QAAN,CAAJ,EAAqB;AACjBb,2BAAegC,uBAAf,GAAyC,CAAzC;AACH,SAFD,MAGK;AACDhC,2BAAegC,uBAAf,GAAyCC,KAAKC,IAAL,CAAU,CAACnB,mBAAmBY,GAAnB,GAAyBZ,mBAAmBS,KAA7C,IAAsDX,QAAhE,CAAzC;AACH;;AAED,eAAOI,QAAP;AACH;;AAEDnB,eAAW;AACPqC,qBAAapC;AADN,KAAX;;AAIA,WAAOD,QAAP;AACH;;AAEDJ,uBAAuB0C,qBAAvB,GAA+C,wBAA/C;AACA,MAAMC,UAAU/C,aAAagD,eAAb,CAA6B5C,sBAA7B,CAAhB;AACA,eAAe2C,OAAf","file":"TemplateSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport {replaceTokenForTemplate, getIndexBasedSegment, decideSegmentListRangeForTemplate} from './SegmentsUtils';\n\nfunction TemplateSegmentsGetter(config, isDynamic) {\n\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function getSegmentsFromTemplate(representation, requestedTime, index, availabilityUpperLimit) {\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\n        const duration = representation.segmentDuration;\n        const availabilityWindow = representation.segmentAvailabilityRange;\n\n        const segments = [];\n        let url = null;\n        let seg = null;\n\n        let segmentRange,\n            periodSegIdx,\n            startIdx,\n            endIdx,\n            start;\n\n        start = representation.startNumber;\n\n        if (isNaN(duration) && !isDynamic) {\n            segmentRange = {start: start, end: start};\n        }\n        else {\n            segmentRange = decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);\n        }\n\n        startIdx = segmentRange.start;\n        endIdx = segmentRange.end;\n\n        for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {\n            seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, periodSegIdx);\n            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;\n            url = template.media;\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\n            seg.media = url;\n\n            segments.push(seg);\n            seg = null;\n        }\n\n        if (isNaN(duration)) {\n            representation.availableSegmentsNumber = 1;\n        }\n        else {\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\n        }\n\n        return segments;\n    }\n\n    instance = {\n        getSegments: getSegmentsFromTemplate\n    };\n\n    return instance;\n}\n\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\nexport default factory;\n"]}