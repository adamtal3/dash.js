{"version":3,"sources":["../../../../../src/dash/utils/ListSegmentsGetter.js"],"names":["FactoryMaker","getIndexBasedSegment","decideSegmentListRangeForTemplate","ListSegmentsGetter","config","isDynamic","timelineConverter","instance","getSegmentsFromList","representation","requestedTime","index","availabilityUpperLimit","list","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentList","len","SegmentURL_asArray","length","segments","periodSegIdx","seg","s","range","startIdx","endIdx","start","startNumber","Math","max","min","end","replacementTime","segmentDuration","media","mediaRange","indexRange","push","availableSegmentsNumber","getSegments","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA,MAAOA,aAAP,KAAyB,yBAAzB,CAEA,OAAQC,oBAAR,CAA8BC,iCAA9B,KAAsE,iBAAtE,CAEA,QAASC,mBAAT,CAA4BC,MAA5B,CAAoCC,SAApC,CAA+C,CAE3CD,OAASA,QAAU,EAAnB,CACA,KAAME,mBAAoBF,OAAOE,iBAAjC,CAEA,GAAIC,SAAJ,CAEA,QAASC,oBAAT,CAA6BC,cAA7B,CAA6CC,aAA7C,CAA4DC,KAA5D,CAAmEC,sBAAnE,CAA2F,CACvF,KAAMC,MAAOJ,eAAeK,UAAf,CAA0BC,MAA1B,CAAiCC,GAAjC,CAAqCC,QAArC,CAA8CC,cAA9C,CAA6DT,eAAeK,UAAf,CAA0BC,MAA1B,CAAiCJ,KAA9F,EACTQ,qBADS,CACaV,eAAeK,UAAf,CAA0BH,KADvC,EAC8CS,sBAD9C,CACqEX,eAAeE,KADpF,EAC2FU,WADxG,CAEA,KAAMC,KAAMT,KAAKU,kBAAL,CAAwBC,MAApC,CAEA,KAAMC,UAAW,EAAjB,CAEA,GAAIC,aAAJ,CACIC,GADJ,CAEIC,CAFJ,CAGIC,KAHJ,CAIIC,QAJJ,CAKIC,MALJ,CAMIC,KANJ,CAQAA,MAAQvB,eAAewB,WAAvB,CAEAJ,MAAQ3B,kCAAkCI,iBAAlC,CAAqDD,SAArD,CAAgEI,cAAhE,CAAgFC,aAAhF,CAA+FC,KAA/F,CAAsGC,sBAAtG,CAAR,CACAkB,SAAWI,KAAKC,GAAL,CAASN,MAAMG,KAAf,CAAsB,CAAtB,CAAX,CACAD,OAASG,KAAKE,GAAL,CAASP,MAAMQ,GAAf,CAAoBxB,KAAKU,kBAAL,CAAwBC,MAAxB,CAAiC,CAArD,CAAT,CAEA,IAAKE,aAAeI,QAApB,CAA8BJ,cAAgBK,MAA9C,CAAsDL,cAAtD,CAAsE,CAClEE,EAAIf,KAAKU,kBAAL,CAAwBG,YAAxB,CAAJ,CAEAC,IAAM1B,qBAAqBK,iBAArB,CAAwCD,SAAxC,CAAmDI,cAAnD,CAAmEiB,YAAnE,CAAN,CACAC,IAAIW,eAAJ,CAAsB,CAACN,MAAQN,YAAR,CAAuB,CAAxB,EAA6BjB,eAAe8B,eAAlE,CACAZ,IAAIa,KAAJ,CAAYZ,EAAEY,KAAF,CAAUZ,EAAEY,KAAZ,CAAoB,EAAhC,CACAb,IAAIc,UAAJ,CAAiBb,EAAEa,UAAnB,CACAd,IAAIhB,KAAJ,CAAYiB,EAAEjB,KAAd,CACAgB,IAAIe,UAAJ,CAAiBd,EAAEc,UAAnB,CAEAjB,SAASkB,IAAT,CAAchB,GAAd,EACAA,IAAM,IAAN,CACH,CAEDlB,eAAemC,uBAAf,CAAyCtB,GAAzC,CAEA,MAAOG,SAAP,CACH,CAEDlB,SAAW,CACPsC,YAAarC,mBADN,CAAX,CAIA,MAAOD,SAAP,CACH,CAEDJ,mBAAmB2C,qBAAnB,CAA2C,oBAA3C,CACA,KAAMC,SAAU/C,aAAagD,eAAb,CAA6B7C,kBAA7B,CAAhB,CACA,cAAe4C,QAAf","file":"ListSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport {getIndexBasedSegment, decideSegmentListRangeForTemplate} from './SegmentsUtils';\n\nfunction ListSegmentsGetter(config, isDynamic) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function getSegmentsFromList(representation, requestedTime, index, availabilityUpperLimit) {\n        const list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n        const len = list.SegmentURL_asArray.length;\n\n        const segments = [];\n\n        let periodSegIdx,\n            seg,\n            s,\n            range,\n            startIdx,\n            endIdx,\n            start;\n\n        start = representation.startNumber;\n\n        range = decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit);\n        startIdx = Math.max(range.start, 0);\n        endIdx = Math.min(range.end, list.SegmentURL_asArray.length - 1);\n\n        for (periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) {\n            s = list.SegmentURL_asArray[periodSegIdx];\n\n            seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, periodSegIdx);\n            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;\n            seg.media = s.media ? s.media : '';\n            seg.mediaRange = s.mediaRange;\n            seg.index = s.index;\n            seg.indexRange = s.indexRange;\n\n            segments.push(seg);\n            seg = null;\n        }\n\n        representation.availableSegmentsNumber = len;\n\n        return segments;\n    }\n\n    instance = {\n        getSegments: getSegmentsFromList\n    };\n\n    return instance;\n}\n\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(ListSegmentsGetter);\nexport default factory;\n"]}