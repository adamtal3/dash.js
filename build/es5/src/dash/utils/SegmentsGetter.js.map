{"version":3,"sources":["../../../../../src/dash/utils/SegmentsGetter.js"],"names":["DashConstants","FactoryMaker","TimelineSegmentsGetter","TemplateSegmentsGetter","ListSegmentsGetter","SegmentsGetter","config","isDynamic","context","instance","timelineSegmentsGetter","templateSegmentsGetter","listSegmentsGetter","setup","create","getSegments","representation","requestedTime","index","onSegmentListUpdatedCallback","availabilityUpperLimit","segments","type","segmentInfoType","SEGMENT_BASE","BASE_URL","isSegmentListUpdateRequired","SEGMENT_TIMELINE","SEGMENT_TEMPLATE","SEGMENT_LIST","updateRequired","upperIdx","lowerIdx","length","availabilityIdx","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;;AAEvC,UAAMC,UAAU,KAAKA,OAArB;;AAEA,QAAIC,QAAJ,EACIC,sBADJ,EAEIC,sBAFJ,EAGIC,kBAHJ;;AAKA,aAASC,KAAT,GAAiB;AACbH,iCAAyBR,uBAAuBM,OAAvB,EAAgCM,MAAhC,CAAuCR,MAAvC,EAA+CC,SAA/C,CAAzB;AACAI,iCAAyBR,uBAAuBK,OAAvB,EAAgCM,MAAhC,CAAuCR,MAAvC,EAA+CC,SAA/C,CAAzB;AACAK,6BAAqBR,mBAAmBI,OAAnB,EAA4BM,MAA5B,CAAmCR,MAAnC,EAA2CC,SAA3C,CAArB;AACH;;AAED;AACA;AACA,aAASQ,WAAT,CAAqBC,cAArB,EAAqCC,aAArC,EAAoDC,KAApD,EAA2DC,4BAA3D,EAAyFC,sBAAzF,EAAiH;AAC7G,YAAIC,QAAJ;AACA,cAAMC,OAAON,eAAeO,eAA5B;;AAEA;AACA,YAAID,SAAStB,cAAcwB,YAAvB,IAAuCF,SAAStB,cAAcyB,QAA9D,IAA0E,CAACC,4BAA4BV,cAA5B,EAA4CE,KAA5C,CAA/E,EAAmI;AAC/HG,uBAAWL,eAAeK,QAA1B;AACH,SAFD,MAEO;AACH,gBAAIC,SAAStB,cAAc2B,gBAA3B,EAA6C;AACzCN,2BAAWX,uBAAuBK,WAAvB,CAAmCC,cAAnC,EAAmDC,aAAnD,EAAkEC,KAAlE,EAAyEE,sBAAzE,CAAX;AACH,aAFD,MAEO,IAAIE,SAAStB,cAAc4B,gBAA3B,EAA6C;AAChDP,2BAAWV,uBAAuBI,WAAvB,CAAmCC,cAAnC,EAAmDC,aAAnD,EAAkEC,KAAlE,EAAyEE,sBAAzE,CAAX;AACH,aAFM,MAEA,IAAIE,SAAStB,cAAc6B,YAA3B,EAAyC;AAC5CR,2BAAWT,mBAAmBG,WAAnB,CAA+BC,cAA/B,EAA+CC,aAA/C,EAA8DC,KAA9D,EAAqEE,sBAArE,CAAX;AACH;;AAED,gBAAID,4BAAJ,EAAkC;AAC9BA,6CAA6BH,cAA7B,EAA6CK,QAA7C;AACH;AACJ;AACJ;;AAED,aAASK,2BAAT,CAAqCV,cAArC,EAAqDE,KAArD,EAA4D;AACxD,cAAMG,WAAWL,eAAeK,QAAhC;AACA,YAAIS,iBAAiB,KAArB;;AAEA,YAAIC,QAAJ,EACIC,QADJ;;AAGA,YAAI,CAACX,QAAD,IAAaA,SAASY,MAAT,KAAoB,CAArC,EAAwC;AACpCH,6BAAiB,IAAjB;AACH,SAFD,MAEO;AACHE,uBAAWX,SAAS,CAAT,EAAYa,eAAvB;AACAH,uBAAWV,SAASA,SAASY,MAAT,GAAkB,CAA3B,EAA8BC,eAAzC;AACAJ,6BAAkBZ,QAAQc,QAAT,IAAuBd,QAAQa,QAAhD;AACH;;AAED,eAAOD,cAAP;AACH;;AAEDrB,eAAW;AACPM,qBAAaA;AADN,KAAX;;AAIAF;;AAEA,WAAOJ,QAAP;AACH;;AAEDJ,eAAe8B,qBAAf,GAAuC,gBAAvC;AACA,MAAMC,UAAUnC,aAAaoC,eAAb,CAA6BhC,cAA7B,CAAhB;AACA,eAAe+B,OAAf","file":"SegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashConstants from '../constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TimelineSegmentsGetter from './TimelineSegmentsGetter';\nimport TemplateSegmentsGetter from './TemplateSegmentsGetter';\nimport ListSegmentsGetter from './ListSegmentsGetter';\n\nfunction SegmentsGetter(config, isDynamic) {\n\n    const context = this.context;\n\n    let instance,\n        timelineSegmentsGetter,\n        templateSegmentsGetter,\n        listSegmentsGetter;\n\n    function setup() {\n        timelineSegmentsGetter = TimelineSegmentsGetter(context).create(config, isDynamic);\n        templateSegmentsGetter = TemplateSegmentsGetter(context).create(config, isDynamic);\n        listSegmentsGetter = ListSegmentsGetter(context).create(config, isDynamic);\n    }\n\n    // availabilityUpperLimit parameter is not used directly by any dash.js function, but it is needed as a helper\n    // for other developments that extend dash.js, and provide their own transport layers (ex: P2P transport)\n    function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback, availabilityUpperLimit) {\n        let segments;\n        const type = representation.segmentInfoType;\n\n        // Already figure out the segments.\n        if (type === DashConstants.SEGMENT_BASE || type === DashConstants.BASE_URL || !isSegmentListUpdateRequired(representation, index)) {\n            segments = representation.segments;\n        } else {\n            if (type === DashConstants.SEGMENT_TIMELINE) {\n                segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\n            } else if (type === DashConstants.SEGMENT_TEMPLATE) {\n                segments = templateSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\n            } else if (type === DashConstants.SEGMENT_LIST) {\n                segments = listSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\n            }\n\n            if (onSegmentListUpdatedCallback) {\n                onSegmentListUpdatedCallback(representation, segments);\n            }\n        }\n    }\n\n    function isSegmentListUpdateRequired(representation, index) {\n        const segments = representation.segments;\n        let updateRequired = false;\n\n        let upperIdx,\n            lowerIdx;\n\n        if (!segments || segments.length === 0) {\n            updateRequired = true;\n        } else {\n            lowerIdx = segments[0].availabilityIdx;\n            upperIdx = segments[segments.length - 1].availabilityIdx;\n            updateRequired = (index < lowerIdx) || (index > upperIdx);\n        }\n\n        return updateRequired;\n    }\n\n    instance = {\n        getSegments: getSegments\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentsGetter.__dashjs_factory_name = 'SegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(SegmentsGetter);\nexport default factory;\n"]}