{"version":3,"sources":["../../../../src/core/Debug.js"],"names":["EventBus","Events","FactoryMaker","LOG_LEVEL_NONE","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","Debug","context","eventBus","getInstance","logFn","instance","showLogTimestamp","showCalleeName","startTime","logLevel","setup","Date","getTime","window","console","getLogFn","error","warn","info","debug","fn","bind","log","getLogger","fatal","setLogLevel","value","getLogLevel","setLogTimestampVisible","setCalleeNameVisible","setLogToBrowserConsole","getLogToBrowserConsole","params","doLog","level","_this","message","logTime","getClassName","getType","length","Array","apply","forEach","item","trigger","LOG","__dashjs_factory_name","factory","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"Debug.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from './EventBus';\nimport Events from './events/Events';\nimport FactoryMaker from './FactoryMaker';\n\nconst LOG_LEVEL_NONE = 0;\nconst LOG_LEVEL_FATAL = 1;\nconst LOG_LEVEL_ERROR = 2;\nconst LOG_LEVEL_WARNING = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DEBUG = 5;\n\n/**\n * @module Debug\n */\nfunction Debug() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const logFn = [];\n\n    let instance,\n        showLogTimestamp,\n        showCalleeName,\n        startTime,\n        logLevel;\n\n    function setup() {\n        showLogTimestamp = true;\n        showCalleeName = true;\n        logLevel = LOG_LEVEL_WARNING;\n        startTime = new Date().getTime();\n\n        if (typeof window !== 'undefined' && window.console) {\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\n        }\n    }\n\n    function getLogFn(fn) {\n        if (fn && fn.bind) {\n            return fn.bind(window.console);\n        }\n        // if not define, return the default function for reporting logs\n        return window.console.log.bind(window.console);\n    }\n\n    /**\n     * Retrieves a logger which can be used to write logging information in browser console.\n     * @param {object} instance Object for which the logger is created. It is used\n     * to include calle object information in log messages.\n     * @memberof module:Debug\n     * @returns {Logger}\n     * @instance\n     */\n    function getLogger(instance) {\n        return {\n            fatal: fatal.bind(instance),\n            error: error.bind(instance),\n            warn: warn.bind(instance),\n            info: info.bind(instance),\n            debug: debug.bind(instance)\n        };\n    }\n\n    /**\n     * Sets up the log level. The levels are cumulative. For example, if you set the log level\n     * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values\n     *\n     * <ul>\n     * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>\n     * No message is written in the browser console.\n     *\n     * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>\n     * Log fatal errors. An error is considered fatal when it causes playback to fail completely.\n     *\n     * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>\n     * Log error messages.\n     *\n     * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>\n     * Log warning messages.\n     *\n     * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>\n     * Log info messages.\n     *\n     * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>\n     * Log debug messages.\n     * </ul>\n     * @param {number} value Log level\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogLevel(value) {\n        logLevel = value;\n    }\n\n    /**\n     * Use this method to get the current log level.\n     * @memberof module:Debug\n     * @instance\n     */\n    function getLogLevel() {\n        return logLevel;\n    }\n\n    /**\n     * Prepends a timestamp in milliseconds to each log message.\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n     * @default LOG_LEVEL_WARNING\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogTimestampVisible(value) {\n        showLogTimestamp = value;\n    }\n    /**\n     * Prepends the callee object name, and media type if available, to each log message.\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     */\n    function setCalleeNameVisible(value) {\n        showCalleeName = value;\n    }\n    /**\n     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.\n     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     * @deprecated\n     */\n    function setLogToBrowserConsole(value) {\n        // Replicate functionality previous to log levels feature\n        if (value) {\n            logLevel = LOG_LEVEL_DEBUG;\n        } else {\n            logLevel = LOG_LEVEL_NONE;\n        }\n    }\n    /**\n     * Use this method to get the state of logToBrowserConsole.\n     * @returns {boolean} The current value of logToBrowserConsole\n     * @memberof module:Debug\n     * @instance\n     * @deprecated\n     */\n    function getLogToBrowserConsole() {\n        return logLevel !== LOG_LEVEL_NONE;\n    }\n\n    function fatal(...params) {\n        doLog(LOG_LEVEL_FATAL, this, ...params);\n    }\n\n    function error(...params) {\n        doLog(LOG_LEVEL_ERROR, this, ...params);\n    }\n\n    function warn(...params) {\n        doLog(LOG_LEVEL_WARNING, this, ...params);\n    }\n\n    function info(...params) {\n        doLog(LOG_LEVEL_INFO, this, ...params);\n    }\n\n    function debug(...params) {\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\n    }\n\n    function doLog(level, _this, ...params) {\n        let message = '';\n        let logTime = null;\n\n        if (showLogTimestamp) {\n            logTime = new Date().getTime();\n            message += '[' + (logTime - startTime) + ']';\n        }\n\n        if (showCalleeName && _this && _this.getClassName) {\n            message += '[' + _this.getClassName() + ']';\n            if (_this.getType) {\n                message += '[' + _this.getType() + ']';\n            }\n        }\n\n        if (message.length > 0) {\n            message += ' ';\n        }\n\n        Array.apply(null, params).forEach(function (item) {\n            message += item + ' ';\n        });\n\n        // log to console if the log level is high enough\n        if (logFn[level] && logLevel >= level) {\n            logFn[level](message);\n        }\n\n        // send log event regardless of log level\n        eventBus.trigger(Events.LOG, {message: message, level: level});\n    }\n\n    instance = {\n        getLogger: getLogger,\n        setLogTimestampVisible: setLogTimestampVisible,\n        setCalleeNameVisible: setCalleeNameVisible,\n        setLogToBrowserConsole: setLogToBrowserConsole,\n        getLogToBrowserConsole: getLogToBrowserConsole,\n        setLogLevel: setLogLevel,\n        getLogLevel: getLogLevel\n    };\n\n    setup();\n\n    return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\n\nconst factory = FactoryMaker.getSingletonFactory(Debug);\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\nexport default factory;\n"]}