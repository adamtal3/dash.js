{"version":3,"sources":["../../../../src/core/FactoryMaker.js"],"names":["FactoryMaker","instance","singletonContexts","singletonFactories","classFactories","extend","name","childInstance","override","context","getSingletonInstance","className","i","obj","setSingletonInstance","push","getFactoryByName","factoriesArray","updateFactory","factory","updateClassFactory","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","arguments","updateSingletonFactory","getSingletonFactoryByName","getSingletonFactory","getInstance","args","classInstance","extensionObject","extension","apply","parent","prop","hasOwnProperty","getClassName"],"mappings":"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","file":"FactoryMaker.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    const singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n"]}