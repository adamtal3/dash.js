{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":["DataChunk","FragmentRequest","MssFragmentInfoController","MssFragmentProcessor","MssParser","MssErrors","DashJSError","MssHandler","config","context","eventBus","events","constants","initSegmentType","metricsModel","playbackController","protectionController","mssFragmentProcessor","create","ISOBoxer","debug","errHandler","mssParser","instance","setup","onInitializationRequested","e","streamProcessor","sender","getStreamProcessor","request","representationController","getRepresentationController","representation","getCurrentRepresentation","mediaType","adaptation","type","range","quality","index","mediaInfo","getMediaInfo","representationId","id","chunk","createDataChunk","getStreamInfo","FRAGMENT_LOADING_PROGRESS","bytes","generateMoov","error","code","message","data","trigger","INIT_FRAGMENT_LOADED","fragmentModel","getFragmentModel","streamId","endFragment","segmentType","start","startTime","duration","end","startFragmentInfoControllers","streamController","getStreamController","processors","getActiveStreamProcessors","forEach","processor","getType","VIDEO","AUDIO","FRAGMENTED_TEXT","i","alreadyRegistered","externalControllers","getExternalControllers","length","controllerType","fragmentInfoController","baseURLController","initialize","onSegmentMediaLoaded","processFragment","streamInfo","manifestInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","getTime","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","replace","registerEvents","on","INIT_REQUESTED","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","reset","off","createMssParser","__dashjs_factory_name","factory","getClassFactory","errors","updateClassFactory"],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\nimport MssErrors from './errors/MssErrors';\nimport DashJSError from '../streaming/vo/DashJSError';\n\nfunction MssHandler(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    const constants = config.constants;\n    const initSegmentType = config.initSegmentType;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let protectionController = config.protectionController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        metricsModel: metricsModel,\n        playbackController: playbackController,\n        protectionController: protectionController,\n        eventBus: eventBus,\n        constants: constants,\n        ISOBoxer: config.ISOBoxer,\n        debug: config.debug,\n        errHandler: config.errHandler\n    });\n    let mssParser,\n        instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n\n        request.mediaType = representation.adaptation.type;\n        request.type = initSegmentType;\n        request.range = representation.range;\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\n\n        try {\n            // Generate initialization segment (moov)\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n        } catch (e) {\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\n        }\n\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function startFragmentInfoControllers() {\n\n        let streamController = playbackController.getStreamController();\n        if (!streamController) {\n            return;\n        }\n\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\n        let processors = streamController.getActiveStreamProcessors();\n        processors.forEach(function (processor) {\n            if (processor.getType() === constants.VIDEO ||\n                processor.getType() === constants.AUDIO ||\n                processor.getType() === constants.FRAGMENTED_TEXT) {\n\n                // Check MssFragmentInfoController already registered to StreamProcessor\n                let i;\n                let alreadyRegistered = false;\n                let externalControllers = processor.getExternalControllers();\n                for (i = 0; i < externalControllers.length; i++) {\n                    if (externalControllers[i].controllerType &&\n                        externalControllers[i].controllerType === 'MssFragmentInfoController') {\n                        alreadyRegistered = true;\n                    }\n                }\n\n                if (!alreadyRegistered) {\n                    let fragmentInfoController = MssFragmentInfoController(context).create({\n                        streamProcessor: processor,\n                        eventBus: eventBus,\n                        metricsModel: metricsModel,\n                        playbackController: playbackController,\n                        baseURLController: config.baseURLController,\n                        ISOBoxer: config.ISOBoxer,\n                        debug: config.debug\n                    });\n                    fragmentInfoController.initialize();\n                    fragmentInfoController.start();\n                }\n            }\n        });\n    }\n\n    function onSegmentMediaLoaded(e) {\n        if (e.error) {\n            return;\n        }\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n\n        // Start MssFragmentInfoControllers in case of start-over streams\n        let streamInfo = streamProcessor.getStreamInfo();\n        if (!streamInfo.manifestInfo.isDynamic && streamInfo.manifestInfo.DVRWindowSize !== Infinity) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackPaused() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onTTMLPreProcess(ttmlSubtitles) {\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\n            return;\n        }\n\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\n    }\n\n    function registerEvents() {\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\nfactory.errors = MssErrors;\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory; /* jshint ignore:line */\n"]}