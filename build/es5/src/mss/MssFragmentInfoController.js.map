{"version":3,"sources":["../../../../src/mss/MssFragmentInfoController.js"],"names":["MssEvents","MSSFragmentMoofProcessor","FragmentRequest","MssFragmentInfoController","config","context","instance","logger","fragmentModel","started","type","bufferTimeout","startTime","startFragmentTime","index","streamProcessor","eventBus","metricsModel","playbackController","ISOBoxer","baseURLController","debug","controllerType","setup","getLogger","initialize","registerExternalController","getType","getFragmentModel","doStart","on","FRAGMENT_INFO_LOADING_COMPLETED","onFragmentInfoLoadedCompleted","Date","getTime","loadNextFragmentInfo","doStop","off","clearTimeout","reset","unregisterExternalController","representation","getCurrentRepresentation","manifest","adaptation","period","mpd","Period_asArray","AdaptationSet_asArray","segments","SegmentTemplate","SegmentTimeline","S_asArray","segment","length","t","timescale","request","getRequestForSegment","requestFragment","call","delayLoadNextFragmentInfo","delay","setTimeout","mediaType","duration","d","quality","mediaInfo","getMediaInfo","adaptationIndex","representationId","id","url","resolve","path","media","replace","bandwidth","tManifest","representationController","getRepresentationController","isFragmentLoadedOrPending","executeRequest","e","fragmentInfo","response","error","deltaFragmentTime","deltaTime","mssFragmentMoofProcessor","create","updateSegmentList","Math","max","fatal","start","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"MssFragmentInfoController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\n\nfunction MssFragmentInfoController(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    let instance,\n        logger,\n        fragmentModel,\n        started,\n        type,\n        bufferTimeout,\n        startTime,\n        startFragmentTime,\n        index;\n\n    const streamProcessor = config.streamProcessor;\n    const eventBus = config.eventBus;\n    const metricsModel = config.metricsModel;\n    const playbackController = config.playbackController;\n    const ISOBoxer = config.ISOBoxer;\n    const baseURLController = config.baseURLController;\n    const debug = config.debug;\n    const controllerType = 'MssFragmentInfoController';\n\n    function setup() {\n        logger = debug.getLogger(instance);\n    }\n\n    function initialize() {\n        started = false;\n\n        startTime = null;\n        startFragmentTime = null;\n\n        // Register to StreamProcessor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n    }\n\n    function doStart() {\n        if (started === true) {\n            return;\n        }\n\n        logger.debug('Do start');\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        startTime = new Date().getTime();\n        index = 0;\n\n        loadNextFragmentInfo();\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        logger.debug('Do stop');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startTime = null;\n        startFragmentTime = null;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    function loadNextFragmentInfo() {\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        // Get last segment from SegmentTimeline\n        const representation = getCurrentRepresentation();\n        const manifest = representation.adaptation.period.mpd.manifest;\n        const adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n        const segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray;\n        const segment = segments[segments.length - 1];\n\n        logger.debug('Last fragment time: ' + (segment.t / adaptation.SegmentTemplate.timescale));\n\n        // Generate segment request\n        const request = getRequestForSegment(adaptation, representation, segment);\n\n        // Send segment request\n        requestFragment.call(this, request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            loadNextFragmentInfo();\n        }, delay * 1000);\n    }\n\n    function getRequestForSegment(adaptation, representation, segment) {\n        let timescale = adaptation.SegmentTemplate.timescale;\n        let request = new FragmentRequest();\n\n        request.mediaType = type;\n        request.type = 'FragmentInfoSegment';\n        // request.range = segment.mediaRange;\n        request.startTime = segment.t / timescale;\n        request.duration = segment.d / timescale;\n        request.timescale = timescale;\n        // request.availabilityStartTime = segment.availabilityStartTime;\n        // request.availabilityEndTime = segment.availabilityEndTime;\n        // request.wallStartTime = segment.wallStartTime;\n        request.quality = representation.index;\n        request.index = index++;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.adaptationIndex = representation.adaptation.index;\n        request.representationId = representation.id;\n        request.url = baseURLController.resolve(representation.path).url + adaptation.SegmentTemplate.media;\n        request.url = request.url.replace('$Bandwidth$', representation.bandwidth);\n        request.url = request.url.replace('$Time$', segment.tManifest ? segment.tManifest : segment.t);\n        request.url = request.url.replace('/Fragments(', '/FragmentInfo(');\n\n        return request;\n    }\n\n    function getCurrentRepresentation() {\n        const representationController = streamProcessor.getRepresentationController();\n        const representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function requestFragment(request) {\n\n        logger.debug('Load fragment for time: ' + request.startTime);\n        if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n            // We may have reached end of timeline in case of start-over streams\n            logger.debug('No more fragments');\n            return;\n        }\n\n        fragmentModel.executeRequest(request);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        const request = e.fragmentInfo.request;\n        if (!e.fragmentInfo.response) {\n            logger.error('Load error', request.url);\n            return;\n        }\n\n        let deltaFragmentTime,\n            deltaTime;\n\n        logger.debug('FragmentInfo loaded: ', request.url);\n\n        if (!startFragmentTime) {\n            startFragmentTime = request.startTime;\n        }\n\n        try {\n            // Process FramgentInfo in order to update segment timeline (DVR window)\n            const mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                eventBus: eventBus,\n                debug: debug\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaTime = (new Date().getTime() - startTime) / 1000;\n            deltaFragmentTime = (request.startTime + request.duration) - startFragmentTime;\n            delayLoadNextFragmentInfo(Math.max(0, (deltaFragmentTime - deltaTime)));\n        } catch (e) {\n            logger.fatal('Internal error while processing fragment info segment ');\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    instance = {\n        initialize: initialize,\n        controllerType: controllerType,\n        start: doStart,\n        getType: getType,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\n"]}