{"version":3,"sources":["../../../../src/mss/MssFragmentMoovProcessor.js"],"names":["MssErrors","MssFragmentMoovProcessor","config","NALUTYPE_SPS","NALUTYPE_PPS","constants","ISOBoxer","protectionController","instance","period","adaptationSet","representation","contentProtection","timescale","trackId","createFtypBox","isoFile","ftyp","createBox","major_brand","minor_version","compatible_brands","createMoovBox","moov","createMvhdBox","trak","createTkhdBox","mdia","createMdhdBox","createHdlrBox","minf","type","VIDEO","createVmhdBox","AUDIO","createSmhdBox","dinf","createDrefBox","stbl","stts","createFullBox","_data","stsc","stco","stsz","createStsdBox","mvex","createTrexBox","supportedKS","getSupportedKeySystemsFromContentProtection","createProtectionSystemSpecificHeaderBox","mvhd","version","creation_time","modification_time","duration","Math","round","rate","volume","reserved1","reserved2","matrix","pre_defined","next_track_ID","tkhd","flags","track_ID","layer","alternate_group","reserved3","width","height","mdhd","language","lang","hdlr","handler_type","name","id","reserved","vmhd","graphicsmode","opcolor","smhd","balance","dref","entry_count","entries","url","location","push","stsd","createSampleEntry","length","codec","codecs","substring","indexOf","createAVCVisualSampleEntry","createMP4AudioSampleEntry","code","MSS_UNSUPPORTED_CODEC_CODE","message","MSS_UNSUPPORTED_CODEC_MESSAGE","data","avc1","data_reference_index","pre_defined1","pre_defined2","horizresolution","vertresolution","frame_count","compressorname","depth","pre_defined3","createAVC1ConfigurationRecord","sinf","createOriginalFormatBox","createSchemeTypeBox","createSchemeInformationBox","avcC","avcCLength","sps","pps","AVCProfileIndication","AVCLevelIndication","profile_compatibility","nalus","codecPrivateData","split","slice","naluBytes","naluType","i","hexStringtoBuffer","Uint8Array","set","n","mp4a","channelcount","audioChannels","samplesize","reserved_3","samplerate","audioSamplingRate","esds","createMPEG4AACESDescriptor","audioSpecificConfig","esdsLength","bandwidth","frma","data_format","stringToCharCode","schm","scheme_type","scheme_version","schi","createTrackEncryptionBox","keySystems","pssh_bytes","pssh","parsedBuffer","initData","parseBuffer","fetch","Utils","appendBox","tenc","default_IsEncrypted","default_IV_size","default_KID","trex","default_sample_description_index","default_sample_duration","default_sample_size","default_sample_flags","str","buf","parseInt","charCodeAt","generateMoov","rep","adaptation","arrayBuffer","index","mpd","manifest","Period_asArray","AdaptationSet_asArray","ContentProtection","SegmentTemplate","createFile","write","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"MssFragmentMoovProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n import MssErrors from './errors/MssErrors';\n\n/**\n * @module MssFragmentMoovProcessor\n * @param {Object} config object\n */\nfunction MssFragmentMoovProcessor(config) {\n    config = config || {};\n    const NALUTYPE_SPS = 7;\n    const NALUTYPE_PPS = 8;\n    const constants = config.constants;\n    const ISOBoxer = config.ISOBoxer;\n\n    let protectionController = config.protectionController;\n    let instance,\n        period,\n        adaptationSet,\n        representation,\n        contentProtection,\n        timescale,\n        trackId;\n\n    function createFtypBox(isoFile) {\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\n        ftyp.major_brand = 'iso6';\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\n\n        return ftyp;\n    }\n\n    function createMoovBox(isoFile) {\n\n        // moov box\n        let moov = ISOBoxer.createBox('moov', isoFile);\n\n        // moov/mvhd\n        createMvhdBox(moov);\n\n        // moov/trak\n        let trak = ISOBoxer.createBox('trak', moov);\n\n        // moov/trak/tkhd\n        createTkhdBox(trak);\n\n        // moov/trak/mdia\n        let mdia = ISOBoxer.createBox('mdia', trak);\n\n        // moov/trak/mdia/mdhd\n        createMdhdBox(mdia);\n\n        // moov/trak/mdia/hdlr\n        createHdlrBox(mdia);\n\n        // moov/trak/mdia/minf\n        let minf = ISOBoxer.createBox('minf', mdia);\n\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                // moov/trak/mdia/minf/vmhd\n                createVmhdBox(minf);\n                break;\n            case constants.AUDIO:\n                // moov/trak/mdia/minf/smhd\n                createSmhdBox(minf);\n                break;\n            default:\n                break;\n        }\n\n        // moov/trak/mdia/minf/dinf\n        let dinf = ISOBoxer.createBox('dinf', minf);\n\n        // moov/trak/mdia/minf/dinf/dref\n        createDrefBox(dinf);\n\n        // moov/trak/mdia/minf/stbl\n        let stbl = ISOBoxer.createBox('stbl', minf);\n\n        // Create empty stts, stsc, stco and stsz boxes\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\n\n        // moov/trak/mdia/minf/stbl/stts\n        let stts = ISOBoxer.createFullBox('stts', stbl);\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsc\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stco\n        let stco = ISOBoxer.createFullBox('stco', stbl);\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsz\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsd\n        createStsdBox(stbl);\n\n        // moov/mvex\n        let mvex = ISOBoxer.createBox('mvex', moov);\n\n        // moov/mvex/trex\n        createTrexBox(mvex);\n\n        if (contentProtection && protectionController) {\n            let supportedKS = protectionController.getSupportedKeySystemsFromContentProtection(contentProtection);\n            createProtectionSystemSpecificHeaderBox(moov, supportedKS);\n        }\n    }\n\n    function createMvhdBox(moov) {\n\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\n\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mvhd.timescale = timescale; // the time-scale for the entire presentation => 10000000 for MSS\n        mvhd.duration = Math.round(period.duration * timescale); // the length of the presentation (in the indicated timescale) =>  take duration of period\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\n        mvhd.reserved1 = 0;\n        mvhd.reserved2 = [0x0, 0x0];\n        mvhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n\n        return mvhd;\n    }\n\n    function createTkhdBox(trak) {\n\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\n\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\n\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\n        tkhd.reserved1 = 0;\n        tkhd.duration = Math.round(period.duration * timescale); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n        tkhd.reserved2 = [0x0, 0x0];\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n        tkhd.volume = 1.0; // '1.0' = full volume\n        tkhd.reserved3 = 0;\n        tkhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        tkhd.width = representation.width; // visual presentation width\n        tkhd.height = representation.height; // visual presentation height\n\n        return tkhd;\n    }\n\n    function createMdhdBox(mdia) {\n\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\n\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mdhd.timescale = timescale; // the time-scale for the entire presentation\n        mdhd.duration = Math.round(period.duration * timescale); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media (see getLanguageCode())\n        mdhd.pre_defined = 0;\n\n        return mdhd;\n    }\n\n    function createHdlrBox(mdia) {\n\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\n\n        hdlr.pre_defined = 0;\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                hdlr.handler_type = 'vide';\n                break;\n            case constants.AUDIO:\n                hdlr.handler_type = 'soun';\n                break;\n            default:\n                hdlr.handler_type = 'meta';\n                break;\n        }\n        hdlr.name = representation.id;\n        hdlr.reserved = [0, 0, 0];\n\n        return hdlr;\n    }\n\n    function createVmhdBox(minf) {\n\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\n\n        vmhd.flags = 1;\n\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\n\n        return vmhd;\n    }\n\n    function createSmhdBox(minf) {\n\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\n\n        smhd.flags = 1;\n\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\n        smhd.reserved = 0;\n\n        return smhd;\n    }\n\n    function createDrefBox(dinf) {\n\n        let dref = ISOBoxer.createFullBox('dref', dinf);\n\n        dref.entry_count = 1;\n        dref.entries = [];\n\n        let url = ISOBoxer.createFullBox('url ', dref, false);\n        url.location = '';\n        url.flags = 1;\n\n        dref.entries.push(url);\n\n        return dref;\n    }\n\n    function createStsdBox(stbl) {\n\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\n\n        stsd.entries = [];\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n            case constants.AUDIO:\n                stsd.entries.push(createSampleEntry(stsd));\n                break;\n            default:\n                break;\n        }\n\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\n        return stsd;\n    }\n\n    function createSampleEntry(stsd) {\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\n\n        switch (codec) {\n            case 'avc1':\n                return createAVCVisualSampleEntry(stsd, codec);\n            case 'mp4a':\n                return createMP4AudioSampleEntry(stsd, codec);\n            default:\n                throw {\n                    code: MssErrors.MSS_UNSUPPORTED_CODEC_CODE,\n                    message: MssErrors.MSS_UNSUPPORTED_CODEC_MESSAGE,\n                    data: {\n                        codec: codec\n                    }\n                };\n        }\n    }\n\n    function createAVCVisualSampleEntry(stsd, codec) {\n        let avc1;\n\n        if (contentProtection) {\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\n        } else {\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\n        }\n\n        // SampleEntry fields\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        avc1.data_reference_index = 1;\n\n        // VisualSampleEntry fields\n        avc1.pre_defined1 = 0;\n        avc1.reserved2 = 0;\n        avc1.pre_defined2 = [0, 0, 0];\n        avc1.height = representation.height;\n        avc1.width = representation.width;\n        avc1.horizresolution = 72; // 72 dpi\n        avc1.vertresolution = 72; // 72 dpi\n        avc1.reserved3 = 0;\n        avc1.frame_count = 1; // 1 compressed video frame per sample\n        avc1.compressorname = [\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n        ];\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\n        avc1.pre_defined3 = 65535;\n        avc1.config = createAVC1ConfigurationRecord();\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', avc1);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return avc1;\n    }\n\n    function createAVC1ConfigurationRecord() {\n\n        let avcC = null;\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\n\n        // First get all SPS and PPS from codecPrivateData\n        let sps = [];\n        let pps = [];\n        let AVCProfileIndication = 0;\n        let AVCLevelIndication = 0;\n        let profile_compatibility = 0;\n\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\n        let naluBytes, naluType;\n\n        for (let i = 0; i < nalus.length; i++) {\n            naluBytes = hexStringtoBuffer(nalus[i]);\n\n            naluType = naluBytes[0] & 0x1F;\n\n            switch (naluType) {\n                case NALUTYPE_SPS:\n                    sps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\n                    break;\n                case NALUTYPE_PPS:\n                    pps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Get profile and level from SPS\n        if (sps.length > 0) {\n            AVCProfileIndication = sps[0][1];\n            profile_compatibility = sps[0][2];\n            AVCLevelIndication = sps[0][3];\n        }\n\n        // Generate avcC buffer\n        avcC = new Uint8Array(avcCLength);\n\n        let i = 0;\n        // length\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\n        avcC[i++] = (avcCLength & 0x000000FF);\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\n        i += 4;\n        avcC[i++] = 1; // configurationVersion = 1\n        avcC[i++] = AVCProfileIndication;\n        avcC[i++] = profile_compatibility;\n        avcC[i++] = AVCLevelIndication;\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\n        for (let n = 0; n < sps.length; n++) {\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (sps[n].length & 0x00FF);\n            avcC.set(sps[n], i);\n            i += sps[n].length;\n        }\n        avcC[i++] = pps.length; // numOfPictureParameterSets\n        for (let n = 0; n < pps.length; n++) {\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (pps[n].length & 0x00FF);\n            avcC.set(pps[n], i);\n            i += pps[n].length;\n        }\n\n        return avcC;\n    }\n\n    function createMP4AudioSampleEntry(stsd, codec) {\n        let mp4a;\n\n        if (contentProtection) {\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\n        } else {\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\n        }\n\n        // SampleEntry fields\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        mp4a.data_reference_index = 1;\n\n        // AudioSampleEntry fields\n        mp4a.reserved2 = [0x0, 0x0];\n        mp4a.channelcount = representation.audioChannels;\n        mp4a.samplesize = 16;\n        mp4a.pre_defined = 0;\n        mp4a.reserved_3 = 0;\n        mp4a.samplerate = representation.audioSamplingRate << 16;\n\n        mp4a.esds = createMPEG4AACESDescriptor();\n\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return mp4a;\n    }\n\n    function createMPEG4AACESDescriptor() {\n\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\n\n        // ESDS length = esds box header length (= 12) +\n        //               ES_Descriptor header length (= 5) +\n        //               DecoderConfigDescriptor header length (= 15) +\n        //               decoderSpecificInfo header length (= 2) +\n        //               AudioSpecificConfig length (= codecPrivateData length)\n        let esdsLength = 34 + audioSpecificConfig.length;\n        let esds = new Uint8Array(esdsLength);\n\n        let i = 0;\n        // esds box\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\n        esds[i++] = (esdsLength & 0x000000FF); // ''\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\n        i += 4;\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\n        i += 4;\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\n        esds[i++] = 20 + audioSpecificConfig.length; // size\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\n        esds[i++] = (trackId & 0x00FF); // ''\n        esds[i++] = 0; // flags and streamPriority\n\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\n        esds[i++] = 15 + audioSpecificConfig.length; // size\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\n        esds[i] |= 0 << 1; // upStream = 0\n        esds[i++] |= 1; // reserved = 1\n        esds[i++] = 0xFF; // buffersizeDB = undefined\n        esds[i++] = 0xFF; // ''\n        esds[i++] = 0xFF; // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\n        esds[i++] = audioSpecificConfig.length; // size\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\n\n        return esds;\n    }\n\n    function createOriginalFormatBox(sinf, codec) {\n        let frma = ISOBoxer.createBox('frma', sinf);\n        frma.data_format = stringToCharCode(codec);\n    }\n\n    function createSchemeTypeBox(sinf) {\n        let schm = ISOBoxer.createFullBox('schm', sinf);\n\n        schm.flags = 0;\n        schm.version = 0;\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n    }\n\n    function createSchemeInformationBox(sinf) {\n        let schi = ISOBoxer.createBox('schi', sinf);\n\n        // Create and add Track Encryption Box\n        createTrackEncryptionBox(schi);\n    }\n\n    function createProtectionSystemSpecificHeaderBox(moov, keySystems) {\n        let pssh_bytes,\n            pssh,\n            i,\n            parsedBuffer;\n\n        for (i = 0; i < keySystems.length; i += 1) {\n            pssh_bytes = keySystems[i].initData;\n            parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes);\n            pssh = parsedBuffer.fetch('pssh');\n            if (pssh) {\n                ISOBoxer.Utils.appendBox(moov, pssh);\n            }\n        }\n    }\n\n    function createTrackEncryptionBox(schi) {\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\n\n        tenc.flags = 0;\n        tenc.version = 0;\n\n        tenc.default_IsEncrypted = 0x1;\n        tenc.default_IV_size = 8;\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n    }\n\n    function createTrexBox(moov) {\n        let trex = ISOBoxer.createFullBox('trex', moov);\n\n        trex.track_ID = trackId;\n        trex.default_sample_description_index = 1;\n        trex.default_sample_duration = 0;\n        trex.default_sample_size = 0;\n        trex.default_sample_flags = 0;\n\n        return trex;\n    }\n\n    function hexStringtoBuffer(str) {\n        let buf = new Uint8Array(str.length / 2);\n        let i;\n\n        for (i = 0; i < str.length / 2; i += 1) {\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\n        }\n        return buf;\n    }\n\n    function stringToCharCode(str) {\n        let code = 0;\n        let i;\n\n        for (i = 0; i < str.length; i += 1) {\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n        }\n        return code;\n    }\n\n    function generateMoov(rep) {\n        if (!rep || !rep.adaptation) {\n            return;\n        }\n\n        let isoFile,\n            arrayBuffer;\n\n        representation = rep;\n        adaptationSet = representation.adaptation;\n\n        period = adaptationSet.period;\n        trackId = adaptationSet.index + 1;\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\n\n        timescale = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].SegmentTemplate.timescale;\n\n        isoFile = ISOBoxer.createFile();\n        createFtypBox(isoFile);\n        createMoovBox(isoFile);\n\n        arrayBuffer = isoFile.write();\n\n        return arrayBuffer;\n    }\n\n    instance = {\n        generateMoov: generateMoov\n    };\n\n    return instance;\n}\n\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor); /* jshint ignore:line */"]}