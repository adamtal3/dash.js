{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/BufferLevelRule.js"],"names":["Constants","FactoryMaker","BufferLevelRule","config","dashMetrics","metricsModel","mediaPlayerModel","textController","abrController","setup","execute","streamProcessor","videoTrackPresent","bufferLevel","getCurrentBufferLevel","getReadOnlyMetricsFor","getType","getBufferTarget","bufferTarget","NaN","type","representationInfo","getRepresentationInfo","FRAGMENTED_TEXT","isTextEnabled","fragmentDuration","AUDIO","videoBufferLevel","VIDEO","isNaN","Math","max","streamInfo","mediaInfo","isPlayingAtTopQuality","isLongFormContent","manifestInfo","duration","getLongFormContentDurationThreshold","getBufferTimeAtTopQualityLongForm","getBufferTimeAtTopQuality","getStableBufferTime","instance","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,SAAP,MAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;;AAE7BA,aAASA,UAAU,EAAnB;AACA,UAAMC,cAAcD,OAAOC,WAA3B;AACA,UAAMC,eAAeF,OAAOE,YAA5B;AACA,UAAMC,mBAAmBH,OAAOG,gBAAhC;AACA,UAAMC,iBAAiBJ,OAAOI,cAA9B;AACA,UAAMC,gBAAgBL,OAAOK,aAA7B;;AAEA,aAASC,KAAT,GAAiB,CAChB;;AAED,aAASC,OAAT,CAAiBC,eAAjB,EAAkCC,iBAAlC,EAAqD;AACjD,YAAI,CAACD,eAAL,EAAsB;AAClB,mBAAO,IAAP;AACH;AACD,cAAME,cAAcT,YAAYU,qBAAZ,CAAkCT,aAAaU,qBAAb,CAAmCJ,gBAAgBK,OAAhB,EAAnC,CAAlC,CAApB;AACA,eAAOH,cAAcI,gBAAgBN,eAAhB,EAAiCC,iBAAjC,CAArB;AACH;;AAED,aAASK,eAAT,CAAyBN,eAAzB,EAA0CC,iBAA1C,EAA6D;AACzD,YAAIM,eAAeC,GAAnB;;AAEA,YAAI,CAACR,eAAL,EAAsB;AAClB,mBAAOO,YAAP;AACH;AACD,cAAME,OAAOT,gBAAgBK,OAAhB,EAAb;AACA,cAAMK,qBAAqBV,gBAAgBW,qBAAhB,EAA3B;AACA,YAAIF,SAASpB,UAAUuB,eAAvB,EAAwC;AACpCL,2BAAeX,eAAeiB,aAAf,KAAiCH,mBAAmBI,gBAApD,GAAuE,CAAtF;AACH,SAFD,MAEO,IAAIL,SAASpB,UAAU0B,KAAnB,IAA4Bd,iBAAhC,EAAmD;AACtD,kBAAMe,mBAAmBvB,YAAYU,qBAAZ,CAAkCT,aAAaU,qBAAb,CAAmCf,UAAU4B,KAA7C,CAAlC,CAAzB;AACA,gBAAIC,MAAMR,mBAAmBI,gBAAzB,CAAJ,EAAgD;AAC5CP,+BAAeS,gBAAf;AACH,aAFD,MAEO;AACHT,+BAAeY,KAAKC,GAAL,CAASJ,gBAAT,EAA2BN,mBAAmBI,gBAA9C,CAAf;AACH;AACJ,SAPM,MAOA;AACH,kBAAMO,aAAaX,mBAAmBY,SAAnB,CAA6BD,UAAhD;AACA,gBAAIxB,cAAc0B,qBAAd,CAAoCF,UAApC,CAAJ,EAAqD;AACjD,sBAAMG,oBAAoBH,WAAWI,YAAX,CAAwBC,QAAxB,IAAoC/B,iBAAiBgC,mCAAjB,EAA9D;AACApB,+BAAeiB,oBAAoB7B,iBAAiBiC,iCAAjB,EAApB,GAA2EjC,iBAAiBkC,yBAAjB,EAA1F;AACH,aAHD,MAGO;AACHtB,+BAAeZ,iBAAiBmC,mBAAjB,EAAf;AACH;AACJ;AACD,eAAOvB,YAAP;AACH;;AAED,UAAMwB,WAAW;AACbhC,iBAASA,OADI;AAEbO,yBAAiBA;AAFJ,KAAjB;;AAKAR;AACA,WAAOiC,QAAP;AACH;;AAEDxC,gBAAgByC,qBAAhB,GAAwC,iBAAxC;AACA,eAAe1C,aAAa2C,eAAb,CAA6B1C,eAA7B,CAAf","file":"BufferLevelRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction BufferLevelRule(config) {\n\n    config = config || {};\n    const dashMetrics = config.dashMetrics;\n    const metricsModel = config.metricsModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const textController = config.textController;\n    const abrController = config.abrController;\n\n    function setup() {\n    }\n\n    function execute(streamProcessor, videoTrackPresent) {\n        if (!streamProcessor) {\n            return true;\n        }\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(streamProcessor.getType()));\n        return bufferLevel < getBufferTarget(streamProcessor, videoTrackPresent);\n    }\n\n    function getBufferTarget(streamProcessor, videoTrackPresent) {\n        let bufferTarget = NaN;\n\n        if (!streamProcessor) {\n            return bufferTarget;\n        }\n        const type = streamProcessor.getType();\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        if (type === Constants.FRAGMENTED_TEXT) {\n            bufferTarget = textController.isTextEnabled() ? representationInfo.fragmentDuration : 0;\n        } else if (type === Constants.AUDIO && videoTrackPresent) {\n            const videoBufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(Constants.VIDEO));\n            if (isNaN(representationInfo.fragmentDuration)) {\n                bufferTarget = videoBufferLevel;\n            } else {\n                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\n            }\n        } else {\n            const streamInfo = representationInfo.mediaInfo.streamInfo;\n            if (abrController.isPlayingAtTopQuality(streamInfo)) {\n                const isLongFormContent = streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();\n                bufferTarget = isLongFormContent ? mediaPlayerModel.getBufferTimeAtTopQualityLongForm() : mediaPlayerModel.getBufferTimeAtTopQuality();\n            } else {\n                bufferTarget = mediaPlayerModel.getStableBufferTime();\n            }\n        }\n        return bufferTarget;\n    }\n\n    const instance = {\n        execute: execute,\n        getBufferTarget: getBufferTarget\n    };\n\n    setup();\n    return instance;\n}\n\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\nexport default FactoryMaker.getClassFactory(BufferLevelRule);\n"]}