{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/NextFragmentRequestRule.js"],"names":["Constants","Debug","FactoryMaker","FragmentRequest","NextFragmentRequestRule","config","context","adapter","textController","playbackController","instance","logger","setup","getInstance","getLogger","execute","streamProcessor","seekTarget","requestToReplace","representationInfo","getRepresentationInfo","mediaType","getType","hasSeekTarget","isNaN","bufferController","getBufferController","currentTime","getNormalizedTime","time","getIndexHandlerTime","bufferIsDivided","request","FRAGMENTED_TEXT","isTextEnabled","range","getRangeAt","playingRange","hasDiscontinuities","getBuffer","hasDiscontinuitiesAfter","start","end","debug","getFragmentModel","removeExecutedRequestsAfterTime","startTime","duration","getFragmentRequest","timeThreshold","ignoreIsFinished","keepIdx","action","ACTION_COMPLETE","isFragmentLoaded","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"NextFragmentRequestRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport Debug from '../../../core/Debug';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport FragmentRequest from '../../../streaming/vo/FragmentRequest';\n\nfunction NextFragmentRequestRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const adapter = config.adapter;\n    const textController = config.textController;\n    const playbackController = config.playbackController;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function execute(streamProcessor, seekTarget, requestToReplace) {\n        if (!streamProcessor) {\n            return null;\n        }\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        const mediaType = streamProcessor.getType();\n        const hasSeekTarget = !isNaN(seekTarget);\n        const bufferController = streamProcessor.getBufferController();\n        const currentTime = playbackController.getNormalizedTime();\n        let time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);\n        let bufferIsDivided = false;\n        let request;\n\n        if (isNaN(time) || (mediaType === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\n            return null;\n        }\n        /**\n         * This is critical for IE/Safari/EDGE\n         * */\n        if (bufferController) {\n            let range = bufferController.getRangeAt(time);\n            const playingRange = bufferController.getRangeAt(currentTime);\n            const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\n                    if (hasDiscontinuities && mediaType !== Constants.FRAGMENTED_TEXT) {\n                        logger.debug('Found discontinuities after end of playing range at', playingRange.end);\n                        streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);\n                        bufferIsDivided = true;\n                    }\n                    range = playingRange;\n                }\n                if (time !== range.end) {\n                    logger.debug('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\\'s currentTime with bufferedRange.end for', mediaType, '.', time, 'was changed to', range.end);\n                    time = range.end;\n                }\n            }\n        }\n\n        if (requestToReplace) {\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\n            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {\n                timeThreshold: 0,\n                ignoreIsFinished: true\n            });\n        } else {\n            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {\n                keepIdx: !hasSeekTarget && !bufferIsDivided\n            });\n\n            // Then, check if this request was downloaded or not\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {\n                // loop until we found not loaded fragment, or no fragment\n                request = adapter.getFragmentRequest(streamProcessor, representationInfo);\n            }\n        }\n\n        return request;\n    }\n\n    instance = {\n        execute: execute\n    };\n\n    setup();\n\n    return instance;\n}\n\nNextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';\nexport default FactoryMaker.getClassFactory(NextFragmentRequestRule);\n"]}