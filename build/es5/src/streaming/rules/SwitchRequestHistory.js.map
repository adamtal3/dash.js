{"version":3,"sources":["../../../../../src/streaming/rules/SwitchRequestHistory.js"],"names":["FactoryMaker","SwitchRequest","SWITCH_REQUEST_HISTORY_DEPTH","SwitchRequestHistory","switchRequests","srHistory","push","switchRequest","newValue","NO_CHANGE","oldValue","noDrops","drops","dropSize","indexDiff","drop","noDrop","idx","length","srHistoryFirst","shift","getSwitchRequests","reset","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,+BAA+B,CAArC,C,CAAwC;;AAExC,SAASC,oBAAT,GAAgC;AAC5B,QAAIC,iBAAiB,EAArB,CAD4B,CACH;AACzB,QAAIC,YAAY,EAAhB,CAF4B,CAER;;AAEpB,aAASC,IAAT,CAAcC,aAAd,EAA6B;AACzB,YAAIA,cAAcC,QAAd,KAA2BP,cAAcQ,SAA7C,EAAwD;AACpDF,0BAAcC,QAAd,GAAyBD,cAAcG,QAAvC;AACH;AACD,YAAI,CAACN,eAAeG,cAAcG,QAA7B,CAAL,EAA6C;AACzCN,2BAAeG,cAAcG,QAA7B,IAAyC,EAACC,SAAS,CAAV,EAAaC,OAAO,CAApB,EAAuBC,UAAU,CAAjC,EAAzC;AACH;;AAED;AACA,YAAIC,YAAYP,cAAcC,QAAd,GAAyBD,cAAcG,QAAvD;AACA,YAAIK,OAAQD,YAAY,CAAb,GAAkB,CAAlB,GAAsB,CAAjC;AACA,YAAID,WAAWE,OAAO,CAACD,SAAR,GAAoB,CAAnC;AACA,YAAIE,SAASD,OAAO,CAAP,GAAW,CAAxB;;AAEA;AACAX,uBAAeG,cAAcG,QAA7B,EAAuCE,KAAvC,IAAgDG,IAAhD;AACAX,uBAAeG,cAAcG,QAA7B,EAAuCG,QAAvC,IAAmDA,QAAnD;AACAT,uBAAeG,cAAcG,QAA7B,EAAuCC,OAAvC,IAAkDK,MAAlD;;AAEA;AACAX,kBAAUC,IAAV,CAAe,EAACW,KAAKV,cAAcG,QAApB,EAA8BM,QAAQA,MAAtC,EAA8CD,MAAMA,IAApD,EAA0DF,UAAUA,QAApE,EAAf;;AAEA;AACA,YAAKR,UAAUa,MAAV,GAAmBhB,4BAAxB,EAAuD;AACnD,gBAAIiB,iBAAiBd,UAAUe,KAAV,EAArB;AACAhB,2BAAee,eAAeF,GAA9B,EAAmCL,KAAnC,IAA4CO,eAAeJ,IAA3D;AACAX,2BAAee,eAAeF,GAA9B,EAAmCJ,QAAnC,IAA+CM,eAAeN,QAA9D;AACAT,2BAAee,eAAeF,GAA9B,EAAmCN,OAAnC,IAA8CQ,eAAeH,MAA7D;AACH;AACJ;;AAED,aAASK,iBAAT,GAA6B;AACzB,eAAOjB,cAAP;AACH;;AAED,aAASkB,KAAT,GAAiB;AACblB,yBAAiB,EAAjB;AACAC,oBAAY,EAAZ;AACH;;AAED,WAAO;AACHC,cAAMA,IADH;AAEHe,2BAAmBA,iBAFhB;AAGHC,eAAOA;AAHJ,KAAP;AAKH;;AAEDnB,qBAAqBoB,qBAArB,GAA6C,sBAA7C;AACA,MAAMC,UAAUxB,aAAayB,eAAb,CAA6BtB,oBAA7B,CAAhB;AACA,eAAeqB,OAAf","file":"SwitchRequestHistory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport SwitchRequest from './SwitchRequest';\n\nconst SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule\n\nfunction SwitchRequestHistory() {\n    let switchRequests = []; // running total\n    let srHistory = []; // history of each switch\n\n    function push(switchRequest) {\n        if (switchRequest.newValue === SwitchRequest.NO_CHANGE) {\n            switchRequest.newValue = switchRequest.oldValue;\n        }\n        if (!switchRequests[switchRequest.oldValue]) {\n            switchRequests[switchRequest.oldValue] = {noDrops: 0, drops: 0, dropSize: 0};\n        }\n\n        // Set switch details\n        let indexDiff = switchRequest.newValue - switchRequest.oldValue;\n        let drop = (indexDiff < 0) ? 1 : 0;\n        let dropSize = drop ? -indexDiff : 0;\n        let noDrop = drop ? 0 : 1;\n\n        // Update running totals\n        switchRequests[switchRequest.oldValue].drops += drop;\n        switchRequests[switchRequest.oldValue].dropSize += dropSize;\n        switchRequests[switchRequest.oldValue].noDrops += noDrop;\n\n        // Save to history\n        srHistory.push({idx: switchRequest.oldValue, noDrop: noDrop, drop: drop, dropSize: dropSize});\n\n        // Shift earliest switch off srHistory and readjust to keep depth of running totals constant\n        if ( srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH ) {\n            let srHistoryFirst = srHistory.shift();\n            switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;\n            switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;\n            switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;\n        }\n    }\n\n    function getSwitchRequests() {\n        return switchRequests;\n    }\n\n    function reset() {\n        switchRequests = [];\n        srHistory = [];\n    }\n\n    return {\n        push: push,\n        getSwitchRequests: getSwitchRequests,\n        reset: reset\n    };\n}\n\nSwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';\nconst factory = FactoryMaker.getClassFactory(SwitchRequestHistory);\nexport default factory;\n"]}