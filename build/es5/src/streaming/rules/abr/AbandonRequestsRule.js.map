{"version":3,"sources":["../../../../../../src/streaming/rules/abr/AbandonRequestsRule.js"],"names":["SwitchRequest","FactoryMaker","Debug","AbandonRequestsRule","config","ABANDON_MULTIPLIER","GRACE_TIME_THRESHOLD","MIN_LENGTH_TO_AVERAGE","context","mediaPlayerModel","metricsModel","dashMetrics","instance","logger","fragmentDict","abandonDict","throughputArray","setup","getInstance","getLogger","reset","setFragmentRequestDict","type","id","storeLastRequestThroughputByType","throughput","push","shouldAbandon","rulesContext","switchRequest","create","NO_CHANGE","name","__dashjs_factory_name","hasOwnProperty","mediaInfo","getMediaInfo","mediaType","getMediaType","req","getCurrentRequest","isNaN","index","stableBufferTime","getStableBufferTime","bufferLevel","getCurrentBufferLevel","getReadOnlyMetricsFor","fragmentInfo","firstByteDate","firstByteTime","undefined","getTime","segmentDuration","duration","bytesTotal","bytesLoaded","elapsedTime","Date","Math","round","length","totalSampledValue","reduce","a","b","measuredBandwidthInKbps","estimatedTimeOfDownload","toFixed","getRepresentationInfo","quality","abrController","getAbrController","bytesRemaining","bitrateList","getBitrateList","newQuality","getQualityForBitrate","getBandwidthSafetyFactor","estimateOtherBytesTotal","bitrate","getQualityFor","streamInfo","reason","fragmentID","debug","getClassFactory"],"mappings":"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","file":"AbandonRequestsRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\n\nfunction AbandonRequestsRule(config) {\n\n    config = config || {};\n    const ABANDON_MULTIPLIER = 1.8;\n    const GRACE_TIME_THRESHOLD = 500;\n    const MIN_LENGTH_TO_AVERAGE = 5;\n\n    const context = this.context;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        logger,\n        fragmentDict,\n        abandonDict,\n        throughputArray;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    function setFragmentRequestDict(type, id) {\n        fragmentDict[type] = fragmentDict[type] || {};\n        fragmentDict[type][id] = fragmentDict[type][id] || {};\n    }\n\n    function storeLastRequestThroughputByType(type, throughput) {\n        throughputArray[type] = throughputArray[type] || [];\n        throughputArray[type].push(throughput);\n    }\n\n    function shouldAbandon(rulesContext) {\n        const switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: AbandonRequestsRule.__dashjs_factory_name});\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') ||\n            !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\n            return switchRequest;\n        }\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const req = rulesContext.getCurrentRequest();\n\n        if (!isNaN(req.index)) {\n            setFragmentRequestDict(mediaType, req.index);\n\n            const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));\n            if ( bufferLevel > stableBufferTime ) {\n                return switchRequest;\n            }\n\n            const fragmentInfo = fragmentDict[mediaType][req.index];\n            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n                return switchRequest;\n            }\n\n            //setup some init info based on first progress event\n            if (fragmentInfo.firstByteTime === undefined) {\n                throughputArray[mediaType] = [];\n                fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n                fragmentInfo.segmentDuration = req.duration;\n                fragmentInfo.bytesTotal = req.bytesTotal;\n                fragmentInfo.id = req.index;\n            }\n            fragmentInfo.bytesLoaded = req.bytesLoaded;\n            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n            }\n\n            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE &&\n                fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD &&\n                fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n\n                const totalSampledValue = throughputArray[mediaType].reduce((a, b) => a + b, 0);\n                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n                fragmentInfo.estimatedTimeOfDownload = +((fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps) / 1000).toFixed(2);\n\n                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0 ) {\n                    return switchRequest;\n                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n\n                    const abrController = rulesContext.getAbrController();\n                    const bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n                    const bitrateList = abrController.getBitrateList(mediaInfo);\n                    const newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());\n                    const estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType, mediaInfo.streamInfo)].bitrate;\n\n                    if (bytesRemaining > estimateOtherBytesTotal) {\n                        switchRequest.quality = newQuality;\n                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n                        switchRequest.reason.fragmentID = fragmentInfo.id;\n                        abandonDict[fragmentInfo.id] = fragmentInfo;\n                        logger.debug('( ', mediaType, 'frag id',fragmentInfo.id,') is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n                        delete fragmentDict[mediaType][fragmentInfo.id];\n                    }\n                }\n            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n                delete fragmentDict[mediaType][fragmentInfo.id];\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        fragmentDict = {};\n        abandonDict = {};\n        throughputArray = [];\n    }\n\n    instance = {\n        shouldAbandon: shouldAbandon,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexport default FactoryMaker.getClassFactory(AbandonRequestsRule);\n"]}