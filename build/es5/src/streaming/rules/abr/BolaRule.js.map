{"version":3,"sources":["../../../../../../src/streaming/rules/abr/BolaRule.js"],"names":["MetricsConstants","SwitchRequest","FactoryMaker","HTTPRequest","EventBus","Events","Debug","BOLA_STATE_ONE_BITRATE","BOLA_STATE_STARTUP","BOLA_STATE_STEADY","MINIMUM_BUFFER_S","MINIMUM_BUFFER_PER_BITRATE_LEVEL_S","PLACEHOLDER_BUFFER_DECAY","BolaRule","config","context","dashMetrics","metricsModel","mediaPlayerModel","eventBus","getInstance","instance","logger","bolaStateDict","setup","getLogger","resetInitialSettings","on","BUFFER_EMPTY","onBufferEmpty","PLAYBACK_SEEKING","onPlaybackSeeking","PERIOD_SWITCH_STARTED","onPeriodSwitchStarted","MEDIA_FRAGMENT_LOADED","onMediaFragmentLoaded","METRIC_ADDED","onMetricAdded","QUALITY_CHANGE_REQUESTED","onQualityChangeRequested","FRAGMENT_LOADING_ABANDONED","onFragmentLoadingAbandoned","utilitiesFromBitrates","bitrates","map","b","Math","log","calculateBolaParameters","stableBufferTime","utilities","highestUtilityIndex","reduce","highestIndex","u","uIndex","bufferTime","max","length","gp","Vp","getInitialBolaState","rulesContext","initialState","mediaInfo","getMediaInfo","bitrateList","bandwidth","getStableBufferTime","params","state","lastQuality","clearBolaStateOnSeek","bolaState","placeholderBuffer","mostAdvancedSegmentStart","NaN","lastSegmentWasReplacement","lastSegmentStart","lastSegmentDurationS","lastSegmentRequestTimeMs","lastSegmentFinishTimeMs","checkBolaStateStableBufferTime","mediaType","bufferLevel","getCurrentBufferLevel","getReadOnlyMetricsFor","effectiveBufferLevel","getBolaState","getMediaType","getQualityFromBufferLevel","bitrateCount","quality","score","i","s","isNaN","maxBufferLevelForQuality","minBufferLevelForQuality","qBitrate","qUtility","min","iBitrate","iUtility","level","updatePlaceholderBuffer","nowMs","Date","now","delay","lastCallTimeMs","hasOwnProperty","e","chunk","type","start","duration","checkNewSegment","metric","HTTP_REQUEST","value","MEDIA_SEGMENT_TYPE","trace","trequest","getTime","_tfinish","bufferAtLastSegmentRequest","maxEffectiveBufferForLastSegment","maxPlaceholderBuffer","abrQuality","newQuality","wantEffectiveBufferLevel","getMaxIndex","metrics","scheduleController","getScheduleController","streamInfo","getStreamInfo","abrController","getAbrController","throughputHistory","getThroughputHistory","streamId","id","isDynamic","manifestInfo","useBufferOccupancyABR","switchRequest","create","reason","setTimeToLoadDelay","throughput","getAverageThroughput","safeThroughput","getSafeAverageThroughput","latency","getAverageLatency","getQualityForBitrate","qualityForThroughput","delayS","getTopQualityIndexFor","debug","reset","off","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"BolaRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2016, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n// For a description of the BOLA adaptive bitrate (ABR) algorithm, see http://arxiv.org/abs/1601.06748\n\nimport MetricsConstants from '../../constants/MetricsConstants';\nimport SwitchRequest from '../SwitchRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport {HTTPRequest} from '../../vo/metrics/HTTPRequest';\nimport EventBus from '../../../core/EventBus';\nimport Events from '../../../core/events/Events';\nimport Debug from '../../../core/Debug';\n\n// BOLA_STATE_ONE_BITRATE   : If there is only one bitrate (or initialization failed), always return NO_CHANGE.\n// BOLA_STATE_STARTUP       : Set placeholder buffer such that we download fragments at most recently measured throughput.\n// BOLA_STATE_STEADY        : Buffer primed, we switch to steady operation.\n// TODO: add BOLA_STATE_SEEK and tune BOLA behavior on seeking\nconst BOLA_STATE_ONE_BITRATE    = 0;\nconst BOLA_STATE_STARTUP        = 1;\nconst BOLA_STATE_STEADY         = 2;\n\nconst MINIMUM_BUFFER_S = 10; // BOLA should never add artificial delays if buffer is less than MINIMUM_BUFFER_S.\nconst MINIMUM_BUFFER_PER_BITRATE_LEVEL_S = 2;\n// E.g. if there are 5 bitrates, BOLA switches to top bitrate at buffer = 10 + 5 * 2 = 20s.\n// If Schedule Controller does not allow buffer to reach that level, it can be achieved through the placeholder buffer level.\n\nconst PLACEHOLDER_BUFFER_DECAY = 0.99; // Make sure placeholder buffer does not stick around too long.\n\nfunction BolaRule(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    const dashMetrics = config.dashMetrics;\n    const metricsModel = config.metricsModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        bolaStateDict;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n\n        eventBus.on(Events.BUFFER_EMPTY, onBufferEmpty, instance);\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n        eventBus.on(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\n        eventBus.on(Events.METRIC_ADDED, onMetricAdded, instance);\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);\n    }\n\n    function utilitiesFromBitrates(bitrates) {\n        return bitrates.map(b => Math.log(b));\n        // no need to worry about offset, utilities will be offset (uniformly) anyway later\n    }\n\n    // NOTE: in live streaming, the real buffer level can drop below minimumBufferS, but bola should not stick to lowest bitrate by using a placeholder buffer level\n    function calculateBolaParameters(stableBufferTime, bitrates, utilities) {\n        const highestUtilityIndex = utilities.reduce((highestIndex, u, uIndex) => (u > utilities[highestIndex] ? uIndex : highestIndex), 0);\n\n        if (highestUtilityIndex === 0) {\n            // if highestUtilityIndex === 0, then always use lowest bitrate\n            return null;\n        }\n\n        const bufferTime = Math.max(stableBufferTime, MINIMUM_BUFFER_S + MINIMUM_BUFFER_PER_BITRATE_LEVEL_S * bitrates.length);\n\n        // TODO: Investigate if following can be better if utilities are not the default Math.log utilities.\n        // If using Math.log utilities, we can choose Vp and gp to always prefer bitrates[0] at minimumBufferS and bitrates[max] at bufferTarget.\n        // (Vp * (utility + gp) - bufferLevel) / bitrate has the maxima described when:\n        // Vp * (utilities[0] + gp - 1) === minimumBufferS and Vp * (utilities[max] + gp - 1) === bufferTarget\n        // giving:\n        const gp = (utilities[highestUtilityIndex] - 1) / (bufferTime / MINIMUM_BUFFER_S - 1);\n        const Vp = MINIMUM_BUFFER_S / gp;\n        // note that expressions for gp and Vp assume utilities[0] === 1, which is true because of normalization\n\n        return {gp: gp, Vp: Vp};\n    }\n\n    function getInitialBolaState(rulesContext) {\n        const initialState = {};\n        const mediaInfo = rulesContext.getMediaInfo();\n        const bitrates = mediaInfo.bitrateList.map(b => b.bandwidth);\n        let utilities = utilitiesFromBitrates(bitrates);\n        utilities = utilities.map(u => u - utilities[0] + 1); // normalize\n        const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n        const params = calculateBolaParameters(stableBufferTime, bitrates, utilities);\n\n        if (!params) {\n            // only happens when there is only one bitrate level\n            initialState.state = BOLA_STATE_ONE_BITRATE;\n        } else {\n            initialState.state = BOLA_STATE_STARTUP;\n\n            initialState.bitrates = bitrates;\n            initialState.utilities = utilities;\n            initialState.stableBufferTime = stableBufferTime;\n            initialState.Vp = params.Vp;\n            initialState.gp = params.gp;\n\n            initialState.lastQuality = 0;\n            clearBolaStateOnSeek(initialState);\n        }\n\n        return initialState;\n    }\n\n    function clearBolaStateOnSeek(bolaState) {\n        bolaState.placeholderBuffer = 0;\n        bolaState.mostAdvancedSegmentStart = NaN;\n        bolaState.lastSegmentWasReplacement = false;\n        bolaState.lastSegmentStart = NaN;\n        bolaState.lastSegmentDurationS = NaN;\n        bolaState.lastSegmentRequestTimeMs = NaN;\n        bolaState.lastSegmentFinishTimeMs = NaN;\n    }\n\n    // If the buffer target is changed (can this happen mid-stream?), then adjust BOLA parameters accordingly.\n    function checkBolaStateStableBufferTime(bolaState, mediaType) {\n        const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n        if (bolaState.stableBufferTime !== stableBufferTime) {\n            const params = calculateBolaParameters(stableBufferTime, bolaState.bitrates, bolaState.utilities);\n            if (params.Vp !== bolaState.Vp || params.gp !== bolaState.gp) {\n                // correct placeholder buffer using two criteria:\n                // 1. do not change effective buffer level at effectiveBufferLevel === MINIMUM_BUFFER_S ( === Vp * gp )\n                // 2. scale placeholder buffer by Vp subject to offset indicated in 1.\n\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));\n                let effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer;\n\n                effectiveBufferLevel -= MINIMUM_BUFFER_S;\n                effectiveBufferLevel *= params.Vp / bolaState.Vp;\n                effectiveBufferLevel += MINIMUM_BUFFER_S;\n\n                bolaState.stableBufferTime = stableBufferTime;\n                bolaState.Vp = params.Vp;\n                bolaState.gp = params.gp;\n                bolaState.placeholderBuffer = Math.max(0, effectiveBufferLevel - bufferLevel);\n            }\n        }\n    }\n\n    function getBolaState(rulesContext) {\n        const mediaType = rulesContext.getMediaType();\n        let bolaState = bolaStateDict[mediaType];\n        if (!bolaState) {\n            bolaState = getInitialBolaState(rulesContext);\n            bolaStateDict[mediaType] = bolaState;\n        } else if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {\n            checkBolaStateStableBufferTime(bolaState, mediaType);\n        }\n        return bolaState;\n    }\n\n    // The core idea of BOLA.\n    function getQualityFromBufferLevel(bolaState, bufferLevel) {\n        const bitrateCount = bolaState.bitrates.length;\n        let quality = NaN;\n        let score = NaN;\n        for (let i = 0; i < bitrateCount; ++i) {\n            let s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];\n            if (isNaN(score) || s >= score) {\n                score = s;\n                quality = i;\n            }\n        }\n        return quality;\n    }\n\n    // maximum buffer level which prefers to download at quality rather than wait\n    function maxBufferLevelForQuality(bolaState, quality) {\n        return bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp);\n    }\n\n    // the minimum buffer level that would cause BOLA to choose quality rather than a lower bitrate\n    function minBufferLevelForQuality(bolaState, quality) {\n        const qBitrate = bolaState.bitrates[quality];\n        const qUtility = bolaState.utilities[quality];\n\n        let min = 0;\n        for (let i = quality - 1; i >= 0; --i) {\n            // for each bitrate less than bitrates[quality], BOLA should prefer quality (unless other bitrate has higher utility)\n            if (bolaState.utilities[i] < bolaState.utilities[quality]) {\n                const iBitrate = bolaState.bitrates[i];\n                const iUtility = bolaState.utilities[i];\n\n                const level = bolaState.Vp * (bolaState.gp + (qBitrate * iUtility - iBitrate * qUtility) / (qBitrate - iBitrate));\n                min = Math.max(min, level); // we want min to be small but at least level(i) for all i\n            }\n        }\n        return min;\n    }\n\n    /*\n     * The placeholder buffer increases the effective buffer that is used to calculate the bitrate.\n     * There are two main reasons we might want to increase the placeholder buffer:\n     *\n     * 1. When a segment finishes downloading, we would expect to get a call on getMaxIndex() regarding the quality for\n     *    the next segment. However, there might be a delay before the next call. E.g. when streaming live content, the\n     *    next segment might not be available yet. If the call to getMaxIndex() does happens after a delay, we don't\n     *    want the delay to change the BOLA decision - we only want to factor download time to decide on bitrate level.\n     *\n     * 2. It is possible to get a call to getMaxIndex() without having a segment download. The buffer target in dash.js\n     *    is different for top-quality segments and lower-quality segments. If getMaxIndex() returns a lower-than-top\n     *    quality, then the buffer controller might decide not to download a segment. When dash.js is ready for the next\n     *    segment, getMaxIndex() will be called again. We don't want this extra delay to factor in the bitrate decision.\n     */\n    function updatePlaceholderBuffer(bolaState, mediaType) {\n        const nowMs = Date.now();\n\n        if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {\n            // compensate for non-bandwidth-derived delays, e.g., live streaming availability, buffer controller\n            const delay = 0.001 * (nowMs - bolaState.lastSegmentFinishTimeMs);\n            bolaState.placeholderBuffer += Math.max(0, delay);\n        } else if (!isNaN(bolaState.lastCallTimeMs)) {\n            // no download after last call, compensate for delay between calls\n            const delay = 0.001 * (nowMs - bolaState.lastCallTimeMs);\n            bolaState.placeholderBuffer += Math.max(0, delay);\n        }\n\n        bolaState.lastCallTimeMs = nowMs;\n        bolaState.lastSegmentStart = NaN;\n        bolaState.lastSegmentRequestTimeMs = NaN;\n        bolaState.lastSegmentFinishTimeMs = NaN;\n\n        checkBolaStateStableBufferTime(bolaState, mediaType);\n    }\n\n    function onBufferEmpty() {\n        // if we rebuffer, we don't want the placeholder buffer to artificially raise BOLA quality\n        for (const mediaType in bolaStateDict) {\n            if (bolaStateDict.hasOwnProperty(mediaType) && bolaStateDict[mediaType].state === BOLA_STATE_STEADY) {\n                bolaStateDict[mediaType].placeholderBuffer = 0;\n            }\n        }\n    }\n\n    function onPlaybackSeeking() {\n        // TODO: 1. Verify what happens if we seek mid-fragment.\n        // TODO: 2. If e.g. we have 10s fragments and seek, we might want to download the first fragment at a lower quality to restart playback quickly.\n        for (const mediaType in bolaStateDict) {\n            if (bolaStateDict.hasOwnProperty(mediaType)) {\n                const bolaState = bolaStateDict[mediaType];\n                if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {\n                    bolaState.state = BOLA_STATE_STARTUP; // TODO: BOLA_STATE_SEEK?\n                    clearBolaStateOnSeek(bolaState);\n                }\n            }\n        }\n    }\n\n    function onPeriodSwitchStarted() {\n        // TODO: does this have to be handled here?\n    }\n\n    function onMediaFragmentLoaded(e) {\n        if (e && e.chunk && e.chunk.mediaInfo) {\n            const bolaState = bolaStateDict[e.chunk.mediaInfo.type];\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\n                const start = e.chunk.start;\n                if (isNaN(bolaState.mostAdvancedSegmentStart) || start > bolaState.mostAdvancedSegmentStart) {\n                    bolaState.mostAdvancedSegmentStart = start;\n                    bolaState.lastSegmentWasReplacement = false;\n                } else {\n                    bolaState.lastSegmentWasReplacement = true;\n                }\n\n                bolaState.lastSegmentStart = start;\n                bolaState.lastSegmentDurationS = e.chunk.duration;\n                bolaState.lastQuality = e.chunk.quality;\n\n                checkNewSegment(bolaState, e.chunk.mediaInfo.type);\n            }\n        }\n    }\n\n    function onMetricAdded(e) {\n        if (e && e.metric === MetricsConstants.HTTP_REQUEST && e.value && e.value.type === HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length) {\n            const bolaState = bolaStateDict[e.mediaType];\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\n                bolaState.lastSegmentRequestTimeMs = e.value.trequest.getTime();\n                bolaState.lastSegmentFinishTimeMs = e.value._tfinish.getTime();\n\n                checkNewSegment(bolaState, e.mediaType);\n            }\n        }\n    }\n\n    /*\n     * When a new segment is downloaded, we get two notifications: onMediaFragmentLoaded() and onMetricAdded(). It is\n     * possible that the quality for the downloaded segment was lower (not higher) than the quality indicated by BOLA.\n     * This might happen because of other rules such as the DroppedFramesRule. When this happens, we trim the\n     * placeholder buffer to make BOLA more stable. This mechanism also avoids inflating the buffer when BOLA itself\n     * decides not to increase the quality to avoid oscillations.\n     *\n     * We should also check for replacement segments (fast switching). In this case, a segment is downloaded but does\n     * not grow the actual buffer. Fast switching might cause the buffer to deplete, causing BOLA to drop the bitrate.\n     * We avoid this by growing the placeholder buffer.\n     */\n    function checkNewSegment(bolaState, mediaType) {\n        if (!isNaN(bolaState.lastSegmentStart) && !isNaN(bolaState.lastSegmentRequestTimeMs) && !isNaN(bolaState.placeholderBuffer)) {\n            bolaState.placeholderBuffer *= PLACEHOLDER_BUFFER_DECAY;\n\n            // Find what maximum buffer corresponding to last segment was, and ensure placeholder is not relatively larger.\n            if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));\n                const bufferAtLastSegmentRequest = bufferLevel + 0.001 * (bolaState.lastSegmentFinishTimeMs - bolaState.lastSegmentRequestTimeMs); // estimate\n                const maxEffectiveBufferForLastSegment = maxBufferLevelForQuality(bolaState, bolaState.lastQuality);\n                const maxPlaceholderBuffer = Math.max(0, maxEffectiveBufferForLastSegment - bufferAtLastSegmentRequest);\n                bolaState.placeholderBuffer = Math.min(maxPlaceholderBuffer, bolaState.placeholderBuffer);\n            }\n\n            // then see if we should grow placeholder buffer\n\n            if (bolaState.lastSegmentWasReplacement && !isNaN(bolaState.lastSegmentDurationS)) {\n                // compensate for segments that were downloaded but did not grow the buffer\n                bolaState.placeholderBuffer += bolaState.lastSegmentDurationS;\n            }\n\n            bolaState.lastSegmentStart = NaN;\n            bolaState.lastSegmentRequestTimeMs = NaN;\n        }\n    }\n\n    function onQualityChangeRequested(e) {\n        // Useful to store change requests when abandoning a download.\n        if (e) {\n            const bolaState = bolaStateDict[e.mediaType];\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\n                bolaState.abrQuality = e.newQuality;\n            }\n        }\n    }\n\n    function onFragmentLoadingAbandoned(e) {\n        if (e) {\n            const bolaState = bolaStateDict[e.mediaType];\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\n                // deflate placeholderBuffer - note that we want to be conservative when abandoning\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(e.mediaType));\n                let wantEffectiveBufferLevel;\n                if (bolaState.abrQuality > 0) {\n                    // deflate to point where BOLA just chooses newQuality over newQuality-1\n                    wantEffectiveBufferLevel = minBufferLevelForQuality(bolaState, bolaState.abrQuality);\n                } else {\n                    wantEffectiveBufferLevel = MINIMUM_BUFFER_S;\n                }\n                const maxPlaceholderBuffer = Math.max(0, wantEffectiveBufferLevel - bufferLevel);\n                bolaState.placeholderBuffer = Math.min(bolaState.placeholderBuffer, maxPlaceholderBuffer);\n            }\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const scheduleController = rulesContext.getScheduleController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const abrController = rulesContext.getAbrController();\n        const throughputHistory = abrController.getThroughputHistory();\n        const streamId = streamInfo ? streamInfo.id : null;\n        const isDynamic = streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic;\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n        const switchRequest = SwitchRequest(context).create();\n        switchRequest.reason = switchRequest.reason || {};\n\n        if (!useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        scheduleController.setTimeToLoadDelay(0);\n\n        const bolaState = getBolaState(rulesContext);\n\n        if (bolaState.state === BOLA_STATE_ONE_BITRATE) {\n            // shouldn't even have been called\n            return switchRequest;\n        }\n\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(metrics);\n        const throughput = throughputHistory.getAverageThroughput(mediaType, isDynamic);\n        const safeThroughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        let quality;\n\n        switchRequest.reason.state = bolaState.state;\n        switchRequest.reason.throughput = throughput;\n        switchRequest.reason.latency = latency;\n\n        if (isNaN(throughput)) { // isNaN(throughput) === isNaN(safeThroughput) === isNaN(latency)\n            // still starting up - not enough information\n            return switchRequest;\n        }\n\n        switch (bolaState.state) {\n            case BOLA_STATE_STARTUP:\n                quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\n\n                switchRequest.quality = quality;\n                switchRequest.reason.throughput = safeThroughput;\n\n                bolaState.placeholderBuffer = Math.max(0, minBufferLevelForQuality(bolaState, quality) - bufferLevel);\n                bolaState.lastQuality = quality;\n\n                if (!isNaN(bolaState.lastSegmentDurationS) && bufferLevel >= bolaState.lastSegmentDurationS) {\n                    bolaState.state = BOLA_STATE_STEADY;\n                }\n\n                break; // BOLA_STATE_STARTUP\n\n            case BOLA_STATE_STEADY:\n\n                // NB: The placeholder buffer is added to bufferLevel to come up with a bitrate.\n                //     This might lead BOLA to be too optimistic and to choose a bitrate that would lead to rebuffering -\n                //     if the real buffer bufferLevel runs out, the placeholder buffer cannot prevent rebuffering.\n                //     However, the InsufficientBufferRule takes care of this scenario.\n\n                updatePlaceholderBuffer(bolaState, mediaType);\n\n                quality = getQualityFromBufferLevel(bolaState, bufferLevel + bolaState.placeholderBuffer);\n\n                // we want to avoid oscillations\n                // We implement the \"BOLA-O\" variant: when network bandwidth lies between two encoded bitrate levels, stick to the lowest level.\n                const qualityForThroughput = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\n                if (quality > bolaState.lastQuality && quality > qualityForThroughput) {\n                    // only intervene if we are trying to *increase* quality to an *unsustainable* level\n                    // we are only avoid oscillations - do not drop below last quality\n\n                    quality = Math.max(qualityForThroughput, bolaState.lastQuality);\n                }\n\n                // We do not want to overfill buffer with low quality chunks.\n                // Note that there will be no delay if buffer level is below MINIMUM_BUFFER_S, probably even with some margin higher than MINIMUM_BUFFER_S.\n                let delayS = Math.max(0, bufferLevel + bolaState.placeholderBuffer - maxBufferLevelForQuality(bolaState, quality));\n\n                // First reduce placeholder buffer, then tell schedule controller to pause.\n                if (delayS <= bolaState.placeholderBuffer) {\n                    bolaState.placeholderBuffer -= delayS;\n                    delayS = 0;\n                } else {\n                    delayS -= bolaState.placeholderBuffer;\n                    bolaState.placeholderBuffer = 0;\n\n                    if (quality < abrController.getTopQualityIndexFor(mediaType, streamId)) {\n                        // At top quality, allow schedule controller to decide how far to fill buffer.\n                        scheduleController.setTimeToLoadDelay(1000 * delayS);\n                    } else {\n                        delayS = 0;\n                    }\n                }\n\n                switchRequest.quality = quality;\n                switchRequest.reason.throughput = throughput;\n                switchRequest.reason.latency = latency;\n                switchRequest.reason.bufferLevel = bufferLevel;\n                switchRequest.reason.placeholderBuffer = bolaState.placeholderBuffer;\n                switchRequest.reason.delay = delayS;\n\n                bolaState.lastQuality = quality;\n                // keep bolaState.state === BOLA_STATE_STEADY\n\n                break; // BOLA_STATE_STEADY\n\n            default:\n                logger.debug('BOLA ABR rule invoked in bad state.');\n                // should not arrive here, try to recover\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\n                switchRequest.reason.state = bolaState.state;\n                switchRequest.reason.throughput = safeThroughput;\n                switchRequest.reason.latency = latency;\n                bolaState.state = BOLA_STATE_STARTUP;\n                clearBolaStateOnSeek(bolaState);\n        }\n\n        return switchRequest;\n    }\n\n    function resetInitialSettings() {\n        bolaStateDict = {};\n    }\n\n    function reset() {\n        resetInitialSettings();\n\n        eventBus.off(Events.BUFFER_EMPTY, onBufferEmpty, instance);\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n        eventBus.off(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\n        eventBus.off(Events.METRIC_ADDED, onMetricAdded, instance);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nBolaRule.__dashjs_factory_name = 'BolaRule';\nexport default FactoryMaker.getClassFactory(BolaRule);\n"]}