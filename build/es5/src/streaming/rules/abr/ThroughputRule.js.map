{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":["BufferController","AbrController","FactoryMaker","Debug","SwitchRequest","Constants","ThroughputRule","config","context","metricsModel","instance","logger","setup","getInstance","getLogger","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","getMaxIndex","rulesContext","switchRequest","create","mediaInfo","getMediaInfo","mediaType","getMediaType","metrics","getReadOnlyMetricsFor","scheduleController","getScheduleController","abrController","getAbrController","streamInfo","getStreamInfo","isDynamic","manifestInfo","throughputHistory","getThroughputHistory","throughput","getSafeAverageThroughput","latency","getAverageLatency","bufferStateVO","BufferState","length","useBufferOccupancyABR","isNaN","getAbandonmentStateFor","ABANDON_LOAD","state","BUFFER_LOADED","quality","getQualityForBitrate","setTimeToLoadDelay","debug","Math","round","reason","reset","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"ThroughputRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport BufferController from '../../controllers/BufferController';\nimport AbrController from '../../controllers/AbrController';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\n\nfunction ThroughputRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const metricsModel = config.metricsModel;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function checkConfig() {\n        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const scheduleController = rulesContext.getScheduleController();\n        const abrController = rulesContext.getAbrController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n        const throughputHistory = abrController.getThroughputHistory();\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        const bufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n        if (!metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        if (abrController.getAbandonmentStateFor(mediaType) !== AbrController.ABANDON_LOAD) {\n            if (bufferStateVO.state === BufferController.BUFFER_LOADED || isDynamic) {\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                scheduleController.setTimeToLoadDelay(0);\n                logger.debug('requesting switch to index: ', switchRequest.quality, 'type: ',mediaType, 'Average throughput', Math.round(throughput), 'kbps');\n                switchRequest.reason = {throughput: throughput, latency: latency};\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        // no persistent information to reset\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]}