{"version":3,"sources":["../../../../../src/streaming/rules/DroppedFramesHistory.js"],"names":["FactoryMaker","DroppedFramesHistory","values","lastDroppedFrames","lastTotalFrames","push","index","playbackQuality","droppedVideoFrames","totalVideoFrames","intervalDroppedFrames","intervalTotalFrames","isNaN","getDroppedFrameHistory","reset","getFrameHistory","__dashjs_factory_name","factory","getClassFactory"],"mappings":";AACA,OAAOA,YAAP,MAAyB,yBAAzB;;AAGA,SAASC,oBAAT,GAAgC;;AAE5B,QAAIC,SAAS,EAAb;AACA,QAAIC,oBAAoB,CAAxB;AACA,QAAIC,kBAAkB,CAAtB;;AAEA,aAASC,IAAT,CAAcC,KAAd,EAAqBC,eAArB,EAAsC;AAClC,YAAIC,qBAAqBD,mBAAmBA,gBAAgBC,kBAAnC,GAAwDD,gBAAgBC,kBAAxE,GAA6F,CAAtH;AACA,YAAIC,mBAAmBF,mBAAmBA,gBAAgBE,gBAAnC,GAAsDF,gBAAgBE,gBAAtE,GAAyF,CAAhH;;AAEA,YAAIC,wBAAwBF,qBAAqBL,iBAAjD;AACAA,4BAAoBK,kBAApB;;AAEA,YAAIG,sBAAsBF,mBAAmBL,eAA7C;AACAA,0BAAkBK,gBAAlB;;AAEA,YAAI,CAACG,MAAMN,KAAN,CAAL,EAAmB;AACf,gBAAI,CAACJ,OAAOI,KAAP,CAAL,EAAoB;AAChBJ,uBAAOI,KAAP,IAAgB,EAACE,oBAAoBE,qBAArB,EAA4CD,kBAAkBE,mBAA9D,EAAhB;AACH,aAFD,MAEO;AACHT,uBAAOI,KAAP,EAAcE,kBAAd,IAAoCE,qBAApC;AACAR,uBAAOI,KAAP,EAAcG,gBAAd,IAAkCE,mBAAlC;AACH;AACJ;AACJ;;AAED,aAASE,sBAAT,GAAkC;AAC9B,eAAOX,MAAP;AACH;;AAED,aAASY,KAAT,CAAeP,eAAf,EAAgC;AAC5BL,iBAAS,EAAT;AACAC,4BAAoBI,gBAAgBC,kBAApC;AACAJ,0BAAkBG,gBAAgBE,gBAAlC;AACH;;AAED,WAAO;AACHJ,cAAMA,IADH;AAEHU,yBAAiBF,sBAFd;AAGHC,eAAOA;AAHJ,KAAP;AAKH;;AAEDb,qBAAqBe,qBAArB,GAA6C,sBAA7C;AACA,MAAMC,UAAUjB,aAAakB,eAAb,CAA6BjB,oBAA7B,CAAhB;AACA,eAAegB,OAAf","file":"DroppedFramesHistory.js","sourcesContent":["\nimport FactoryMaker from '../../core/FactoryMaker';\n\n\nfunction DroppedFramesHistory() {\n\n    let values = [];\n    let lastDroppedFrames = 0;\n    let lastTotalFrames = 0;\n\n    function push(index, playbackQuality) {\n        let droppedVideoFrames = playbackQuality && playbackQuality.droppedVideoFrames ? playbackQuality.droppedVideoFrames : 0;\n        let totalVideoFrames = playbackQuality && playbackQuality.totalVideoFrames ? playbackQuality.totalVideoFrames : 0;\n\n        let intervalDroppedFrames = droppedVideoFrames - lastDroppedFrames;\n        lastDroppedFrames = droppedVideoFrames;\n\n        let intervalTotalFrames = totalVideoFrames - lastTotalFrames;\n        lastTotalFrames = totalVideoFrames;\n\n        if (!isNaN(index)) {\n            if (!values[index]) {\n                values[index] = {droppedVideoFrames: intervalDroppedFrames, totalVideoFrames: intervalTotalFrames};\n            } else {\n                values[index].droppedVideoFrames += intervalDroppedFrames;\n                values[index].totalVideoFrames += intervalTotalFrames;\n            }\n        }\n    }\n\n    function getDroppedFrameHistory() {\n        return values;\n    }\n\n    function reset(playbackQuality) {\n        values = [];\n        lastDroppedFrames = playbackQuality.droppedVideoFrames;\n        lastTotalFrames = playbackQuality.totalVideoFrames;\n    }\n\n    return {\n        push: push,\n        getFrameHistory: getDroppedFrameHistory,\n        reset: reset\n    };\n}\n\nDroppedFramesHistory.__dashjs_factory_name = 'DroppedFramesHistory';\nconst factory = FactoryMaker.getClassFactory(DroppedFramesHistory);\nexport default factory;\n"]}