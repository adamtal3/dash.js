{"version":3,"sources":["../../../../src/streaming/MediaPlayerFactory.js"],"names":["MediaPlayer","MediaPlayerFactory","SUPPORTED_MIME_TYPE","logger","create","video","source","context","test","nodeName","_dashjs_player","player","videoID","id","name","slice","call","querySelectorAll","filter","s","type","src","document","createElement","initialize","autoplay","getDebug","getLogger","debug","createAll","selector","scope","aPlayers","videos","i","length","push","sources","findVideo","el","parentNode","instance","loadInterval","loadHandler","window","removeEventListener","loadIntervalHandler","dashjs","clearInterval","avoidAutoCreate","skipAutoCreate","addEventListener","readyState","setInterval"],"mappings":"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","file":"MediaPlayerFactory.js","sourcesContent":["import MediaPlayer from './MediaPlayer';\n\nfunction MediaPlayerFactory() {\n    /**\n     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.\n     * @type {string}\n     */\n    const SUPPORTED_MIME_TYPE = 'application/dash+xml';\n\n    let logger;\n\n    /**\n     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,\n     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose\n     *  type is application/dash+xml.\n     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * @param {HTMLMediaElement} video\n     * @param {HTMLSourceElement} source\n     * @param {Object} context\n     * @returns {MediaPlayer|null}\n     */\n    function create(video, source, context) {\n        if (!video || !(/^VIDEO$/i).test(video.nodeName)) return null;\n\n        if (video._dashjs_player) return video._dashjs_player;\n\n        let player;\n        let videoID = (video.id || video.name || 'video element');\n\n        source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {\n                return s.type == SUPPORTED_MIME_TYPE;\n            })[0];\n        if (!source && video.src) {\n            source = document.createElement('source');\n            source.src = video.src;\n        } else if (!source && !video.src) {\n            return null;\n        }\n\n        context = context || {};\n        player = MediaPlayer(context).create();\n        player.initialize(video, source.src, video.autoplay);\n\n        if (!logger) {\n            logger = player.getDebug().getLogger();\n        }\n        logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src);\n\n        // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its\n        // already been setup.\n        video._dashjs_player = player;\n\n        return player;\n    }\n\n    /**\n     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is\n     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.\n     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.\n     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.\n     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * Returns an array holding all the MediaPlayer instances that were added by this method.\n     * @param {string} selector - CSS selector\n     * @param {Object} scope\n     * @returns {Array} an array of MediaPlayer objects\n     */\n    function createAll(selector, scope) {\n        let aPlayers = [];\n        selector = selector || '[data-dashjs-player]';\n        scope = scope || document;\n        let videos = scope.querySelectorAll(selector);\n        for (let i = 0; i < videos.length; i++) {\n            let player = create(videos[i], null);\n            aPlayers.push(player);\n        }\n\n        let sources = scope.querySelectorAll('source[type=\"' + SUPPORTED_MIME_TYPE + '\"]');\n        for (let i = 0; i < sources.length; i++) {\n            let video = findVideo(sources[i]);\n            let player = create(video, null);\n            aPlayers.push(player);\n        }\n\n        return aPlayers;\n    }\n\n    function findVideo(el) {\n        if ((/^VIDEO$/i).test(el.nodeName)) {\n            return el;\n        } else {\n            return findVideo(el.parentNode);\n        }\n    }\n\n    return {\n        create: create,\n        createAll: createAll\n    };\n}\n\nlet instance = MediaPlayerFactory();\nlet loadInterval;\n\nfunction loadHandler() {\n    window.removeEventListener('load', loadHandler);\n    instance.createAll();\n}\n\nfunction loadIntervalHandler() {\n    if (window.dashjs) {\n        window.clearInterval(loadInterval);\n        instance.createAll();\n    }\n}\n\nlet avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;\n\nif (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {\n    if (window.document.readyState === 'complete') {\n        if (window.dashjs) {\n            instance.createAll();\n        } else {\n            // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet\n            loadInterval = window.setInterval(loadIntervalHandler, 500);\n        }\n    } else {\n        window.addEventListener('load', loadHandler);\n    }\n}\n\nexport default instance;\n"]}