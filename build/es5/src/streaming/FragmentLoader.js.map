{"version":3,"sources":["../../../../src/streaming/FragmentLoader.js"],"names":["HTTPLoader","HeadRequest","DashJSError","EventBus","BoxParser","Events","Errors","FactoryMaker","FragmentLoader","config","context","eventBus","getInstance","instance","httpLoader","setup","boxParser","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","useFetch","getLowLatencyEnabled","checkForExistence","request","report","success","trigger","CHECK_FOR_EXISTENCE_COMPLETED","exists","headRequest","url","load","error","data","LOADING_COMPLETED","response","sender","progress","event","LOADING_PROGRESS","stream","LOADING_DATA_PROGRESS","statusText","errorText","undefined","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","abort","LOADING_ABANDONED","mediaType","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","reset","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;;AAE5BA,aAASA,UAAU,EAAnB;AACA,UAAMC,UAAU,KAAKA,OAArB;AACA,UAAMC,WAAWR,SAASO,OAAT,EAAkBE,WAAlB,EAAjB;;AAEA,QAAIC,QAAJ,EACIC,UADJ;;AAGA,aAASC,KAAT,GAAiB;AACb,cAAMC,YAAYZ,UAAUM,OAAV,EAAmBE,WAAnB,EAAlB;AACAE,qBAAad,WAAWU,OAAX,EAAoBO,MAApB,CAA2B;AACpCC,wBAAYT,OAAOS,UADiB;AAEpCC,0BAAcV,OAAOU,YAFe;AAGpCC,8BAAkBX,OAAOW,gBAHW;AAIpCC,6BAAiBZ,OAAOY,eAJY;AAKpCL,uBAAWA,SALyB;AAMpCM,sBAAUb,OAAOW,gBAAP,CAAwBG,oBAAxB;AAN0B,SAA3B,CAAb;AAQH;;AAED,aAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAChC,cAAMC,SAAS,UAAUC,OAAV,EAAmB;AAC9BhB,qBAASiB,OAAT,CACIvB,OAAOwB,6BADX,EAC0C;AAClCJ,yBAASA,OADyB;AAElCK,wBAAQH;AAF0B,aAD1C;AAMH,SAPD;;AASA,YAAIF,OAAJ,EAAa;AACT,gBAAIM,cAAc,IAAI9B,WAAJ,CAAgBwB,QAAQO,GAAxB,CAAlB;;AAEAlB,uBAAWmB,IAAX,CAAgB;AACZR,yBAASM,WADG;AAEZJ,yBAAS,YAAY;AACjBD,2BAAO,IAAP;AACH,iBAJW;AAKZQ,uBAAO,YAAY;AACfR,2BAAO,KAAP;AACH;AAPW,aAAhB;AASH,SAZD,MAYO;AACHA,mBAAO,KAAP;AACH;AACJ;;AAED,aAASO,IAAT,CAAcR,OAAd,EAAuB;AACnB,cAAMC,SAAS,UAAUS,IAAV,EAAgBD,KAAhB,EAAuB;AAClCvB,qBAASiB,OAAT,CAAiBvB,OAAO+B,iBAAxB,EAA2C;AACvCX,yBAASA,OAD8B;AAEvCY,0BAAUF,QAAQ,IAFqB;AAGvCD,uBAAOA,SAAS,IAHuB;AAIvCI,wBAAQzB;AAJ+B,aAA3C;AAMH,SAPD;;AASA,YAAIY,OAAJ,EAAa;AACTX,uBAAWmB,IAAX,CAAgB;AACZR,yBAASA,OADG;AAEZc,0BAAU,UAAUC,KAAV,EAAiB;AACvB7B,6BAASiB,OAAT,CAAiBvB,OAAOoC,gBAAxB,EAA0C;AACtChB,iCAASA,OAD6B;AAEtCiB,gCAAQF,MAAME;AAFwB,qBAA1C;AAIA,wBAAIF,MAAML,IAAV,EAAgB;AACZxB,iCAASiB,OAAT,CAAiBvB,OAAOsC,qBAAxB,EAA+C;AAC3ClB,qCAASA,OADkC;AAE3CY,sCAAUG,MAAML,IAAN,IAAc,IAFmB;AAG3CD,mCAAO,IAHoC;AAI3CI,oCAAQzB;AAJmC,yBAA/C;AAMH;AACJ,iBAfW;AAgBZc,yBAAS,UAAUQ,IAAV,EAAgB;AACrBT,2BAAOS,IAAP;AACH,iBAlBW;AAmBZD,uBAAO,UAAUT,OAAV,EAAmBmB,UAAnB,EAA+BC,SAA/B,EAA0C;AAC7CnB,2BACIoB,SADJ,EAEI,IAAI5C,WAAJ,CACII,OAAOyC,0CADX,EAEIF,SAFJ,EAGID,UAHJ,CAFJ;AAQH,iBA5BW;AA6BZI,uBAAO,UAAUvB,OAAV,EAAmB;AACtB,wBAAIA,OAAJ,EAAa;AACTd,iCAASiB,OAAT,CAAiBvB,OAAO4C,iBAAxB,EAA2C,EAACxB,SAASA,OAAV,EAAmByB,WAAWzB,QAAQyB,SAAtC,EAAiDZ,QAAQzB,QAAzD,EAA3C;AACH;AACJ;AAjCW,aAAhB;AAmCH,SApCD,MAoCO;AACHa,mBACIoB,SADJ,EAEI,IAAI5C,WAAJ,CACII,OAAO6C,uCADX,EAEI7C,OAAO8C,0CAFX,CAFJ;AAOH;AACJ;;AAED,aAASJ,KAAT,GAAiB;AACb,YAAIlC,UAAJ,EAAgB;AACZA,uBAAWkC,KAAX;AACH;AACJ;;AAED,aAASK,KAAT,GAAiB;AACb,YAAIvC,UAAJ,EAAgB;AACZA,uBAAWkC,KAAX;AACAlC,yBAAa,IAAb;AACH;AACJ;;AAEDD,eAAW;AACPW,2BAAmBA,iBADZ;AAEPS,cAAMA,IAFC;AAGPe,eAAOA,KAHA;AAIPK,eAAOA;AAJA,KAAX;;AAOAtC;;AAEA,WAAOF,QAAP;AACH;;AAEDL,eAAe8C,qBAAf,GAAuC,gBAAvC;AACA,eAAe/C,aAAagD,eAAb,CAA6B/C,cAA7B,CAAf","file":"FragmentLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport HTTPLoader from './net/HTTPLoader';\nimport HeadRequest from './vo/HeadRequest';\nimport DashJSError from './vo/DashJSError';\nimport EventBus from './../core/EventBus';\nimport BoxParser from '../streaming/utils/BoxParser';\nimport Events from './../core/events/Events';\nimport Errors from './../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\n\nfunction FragmentLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        httpLoader;\n\n    function setup() {\n        const boxParser = BoxParser(context).getInstance();\n        httpLoader = HTTPLoader(context).create({\n            errHandler: config.errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            boxParser: boxParser,\n            useFetch: config.mediaPlayerModel.getLowLatencyEnabled()\n        });\n    }\n\n    function checkForExistence(request) {\n        const report = function (success) {\n            eventBus.trigger(\n                Events.CHECK_FOR_EXISTENCE_COMPLETED, {\n                    request: request,\n                    exists: success\n                }\n            );\n        };\n\n        if (request) {\n            let headRequest = new HeadRequest(request.url);\n\n            httpLoader.load({\n                request: headRequest,\n                success: function () {\n                    report(true);\n                },\n                error: function () {\n                    report(false);\n                }\n            });\n        } else {\n            report(false);\n        }\n    }\n\n    function load(request) {\n        const report = function (data, error) {\n            eventBus.trigger(Events.LOADING_COMPLETED, {\n                request: request,\n                response: data || null,\n                error: error || null,\n                sender: instance\n            });\n        };\n\n        if (request) {\n            httpLoader.load({\n                request: request,\n                progress: function (event) {\n                    eventBus.trigger(Events.LOADING_PROGRESS, {\n                        request: request,\n                        stream: event.stream\n                    });\n                    if (event.data) {\n                        eventBus.trigger(Events.LOADING_DATA_PROGRESS, {\n                            request: request,\n                            response: event.data || null,\n                            error: null,\n                            sender: instance\n                        });\n                    }\n                },\n                success: function (data) {\n                    report(data);\n                },\n                error: function (request, statusText, errorText) {\n                    report(\n                        undefined,\n                        new DashJSError(\n                            Errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\n                            errorText,\n                            statusText\n                        )\n                    );\n                },\n                abort: function (request) {\n                    if (request) {\n                        eventBus.trigger(Events.LOADING_ABANDONED, {request: request, mediaType: request.mediaType, sender: instance});\n                    }\n                }\n            });\n        } else {\n            report(\n                undefined,\n                new DashJSError(\n                    Errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\n                    Errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\n                )\n            );\n        }\n    }\n\n    function abort() {\n        if (httpLoader) {\n            httpLoader.abort();\n        }\n    }\n\n    function reset() {\n        if (httpLoader) {\n            httpLoader.abort();\n            httpLoader = null;\n        }\n    }\n\n    instance = {\n        checkForExistence: checkForExistence,\n        load: load,\n        abort: abort,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\nexport default FactoryMaker.getClassFactory(FragmentLoader);\n"]}