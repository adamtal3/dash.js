{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":["Constants","Events","EventBus","FactoryMaker","Debug","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_WIDEST_RANGE","DEFAULT_INIT_TRACK_SELECTION_MODE","MediaController","context","eventBus","getInstance","instance","logger","tracks","initialSettings","selectionMode","switchMode","domStorage","validTrackSwitchModes","validTrackSelectionModes","setup","getLogger","reset","checkInitialMediaSettingsForType","type","streamInfo","settings","getInitialSettings","tracksForType","getTracksFor","FRAGMENTED_TEXT","setTrack","getSavedMediaSettings","setInitialSettings","length","forEach","track","matchSettings","push","selectInitialTrack","addTrack","mediaType","isMultiTrackSupportedByType","streamId","id","createTrackInfo","mediaTracks","list","i","len","isTracksEqual","initSettings","getCurrentTrackFor","current","isCurrentTrack","trigger","CURRENT_TRACK_CHANGED","oldMediaInfo","newMediaInfo","extractSettings","storeLastSettings","roles","role","accessibility","audioChannelConfiguration","setSavedMediaSettings","value","setSwitchMode","mode","isModeSupported","indexOf","warn","getSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","AUDIO","VIDEO","TEXT","IMAGE","t1","t2","sameId","sameViewpoint","viewpoint","sameLang","lang","sameRoles","toString","sameAccessibility","sameAudioChannelConfiguration","setConfig","config","resetInitialSettings","resetSwitchMode","mediaInfo","notEmpty","matchLang","matchViewPoint","matchRole","filter","item","matchAccessibility","matchAudioChannelConfiguration","audio","video","tmpArr","getTracksWithHighestBitrate","trackArr","max","result","tmp","Math","apply","bitrateList","map","obj","bandwidth","getTracksWithWidestRange","representationCount","text","fragmentedText","image","__dashjs_factory_name","factory","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport Events from '../../core/events/Events';\nimport EventBus from '../../core/EventBus';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nconst TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\nconst TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\nconst TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\nconst TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\nconst DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\n\nfunction MediaController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        tracks,\n        initialSettings,\n        selectionMode,\n        switchMode,\n        domStorage;\n\n    const validTrackSwitchModes = [\n        TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n        TRACK_SWITCH_MODE_NEVER_REPLACE\n    ];\n\n    const validTrackSelectionModes = [\n        TRACK_SELECTION_MODE_HIGHEST_BITRATE,\n        TRACK_SELECTION_MODE_WIDEST_RANGE\n    ];\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @memberof MediaController#\n     */\n    function checkInitialMediaSettingsForType(type, streamInfo) {\n        let settings = getInitialSettings(type);\n        const tracksForType = getTracksFor(type, streamInfo);\n        const tracks = [];\n\n        if (type === Constants.FRAGMENTED_TEXT) {\n            // Choose the first track\n            setTrack(tracksForType[0]);\n            return;\n        }\n\n        if (!settings) {\n            settings = domStorage.getSavedMediaSettings(type);\n            setInitialSettings(type, settings);\n        }\n\n        if (!tracksForType || (tracksForType.length === 0)) return;\n\n        if (settings) {\n            tracksForType.forEach(function (track) {\n                if (matchSettings(settings, track)) {\n                    tracks.push(track);\n                }\n            });\n        }\n\n        if (tracks.length === 0) {\n            setTrack(selectInitialTrack(tracksForType));\n        } else {\n            if (tracks.length > 1) {\n                setTrack(selectInitialTrack(tracks));\n            } else {\n                setTrack(tracks[0]);\n            }\n        }\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function addTrack(track) {\n        if (!track) return;\n\n        const mediaType = track.type;\n        if (!isMultiTrackSupportedByType(mediaType)) return;\n\n        let streamId = track.streamInfo.id;\n        if (!tracks[streamId]) {\n            tracks[streamId] = createTrackInfo();\n        }\n\n        const mediaTracks = tracks[streamId][mediaType].list;\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\n            //track is already set.\n            if (isTracksEqual(mediaTracks[i], track)) {\n                return;\n            }\n        }\n\n        mediaTracks.push(track);\n\n        let initSettings = getInitialSettings(mediaType);\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\n            setTrack(track);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Array}\n     * @memberof MediaController#\n     */\n    function getTracksFor(type, streamInfo) {\n        if (!type || !streamInfo) return [];\n\n        const id = streamInfo.id;\n\n        if (!tracks[id] || !tracks[id][type]) return [];\n\n        return tracks[id][type].list;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getCurrentTrackFor(type, streamInfo) {\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\n        return tracks[streamInfo.id][type].current;\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isCurrentTrack(track) {\n        if (!track) {\n            return false;\n        }\n        const type = track.type;\n        const id = track.streamInfo.id;\n\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function setTrack(track) {\n        if (!track || !track.streamInfo) return;\n\n        const type = track.type;\n        const streamInfo = track.streamInfo;\n        const id = streamInfo.id;\n        const current = getCurrentTrackFor(type, streamInfo);\n\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\n\n        tracks[id][type].current = track;\n\n        if (tracks[id][type].current) {\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type]});\n        }\n\n        let settings = extractSettings(track);\n\n        if (!settings || !tracks[id][type].storeLastSettings) return;\n\n        if (settings.roles) {\n            settings.role = settings.roles[0];\n            delete settings.roles;\n        }\n\n        if (settings.accessibility) {\n            settings.accessibility = settings.accessibility[0];\n        }\n\n        if (settings.audioChannelConfiguration) {\n            settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\n        }\n\n        domStorage.setSavedMediaSettings(type, settings);\n    }\n\n    /**\n     * @param {string} type\n     * @param {Object} value\n     * @memberof MediaController#\n     */\n    function setInitialSettings(type, value) {\n        if (!type || !value) return;\n\n        initialSettings[type] = value;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getInitialSettings(type) {\n        if (!type) return null;\n\n        return initialSettings[type];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSwitchMode(type, mode) {\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track switch mode is not supported: ' + mode);\n            return;\n        }\n\n        switchMode[type] = mode;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSwitchMode(type) {\n        return switchMode[type];\n    }\n\n    /**\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track selection mode is not supported: ' + mode);\n            return;\n        }\n        selectionMode = mode;\n    }\n\n    /**\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSelectionModeForInitialTrack() {\n        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isMultiTrackSupportedByType(type) {\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\n    }\n\n    /**\n     * @param {MediaInfo} t1 - first track to compare\n     * @param {MediaInfo} t2 - second track to compare\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isTracksEqual(t1, t2) {\n        if (!t1 && !t2) {\n            return true;\n        }\n\n        if (!t1 || !t2) {\n            return false;\n        }\n\n        const sameId = t1.id === t2.id;\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\n        const sameLang = t1.lang === t2.lang;\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\n\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function reset() {\n        tracks = {};\n        resetInitialSettings();\n        resetSwitchMode();\n    }\n\n    function extractSettings(mediaInfo) {\n        const settings = {\n            lang: mediaInfo.lang,\n            viewpoint: mediaInfo.viewpoint,\n            roles: mediaInfo.roles,\n            accessibility: mediaInfo.accessibility,\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\n        };\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\n\n        return notEmpty ? settings : null;\n    }\n\n    function matchSettings(settings, track) {\n        const matchLang = !settings.lang || (settings.lang === track.lang);\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\n            return item === settings.role;\n        })[0];\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\n            return item === settings.accessibility;\n        })[0];\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\n            return item === settings.audioChannelConfiguration;\n        })[0];\n\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\n    }\n\n    function resetSwitchMode() {\n        switchMode = {\n            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n            video: TRACK_SWITCH_MODE_NEVER_REPLACE\n        };\n    }\n\n    function resetInitialSettings() {\n        initialSettings = {\n            audio: null,\n            video: null\n        };\n    }\n\n    function selectInitialTrack(tracks) {\n        let mode = getSelectionModeForInitialTrack();\n        let tmpArr = [];\n        const getTracksWithHighestBitrate = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n        const getTracksWithWidestRange = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = track.representationCount;\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n\n        switch (mode) {\n            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:\n                tmpArr = getTracksWithHighestBitrate(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithWidestRange(tmpArr);\n                }\n                break;\n            case TRACK_SELECTION_MODE_WIDEST_RANGE:\n                tmpArr = getTracksWithWidestRange(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tracks);\n                }\n                break;\n            default:\n                logger.warn('Track selection mode is not supported: ' + mode);\n                break;\n        }\n\n        return tmpArr[0];\n    }\n\n    function createTrackInfo() {\n        return {\n            audio: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            video: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            text: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            fragmentedText: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            image: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            }\n        };\n    }\n\n    instance = {\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\n        addTrack: addTrack,\n        getTracksFor: getTracksFor,\n        getCurrentTrackFor: getCurrentTrackFor,\n        isCurrentTrack: isCurrentTrack,\n        setTrack: setTrack,\n        setInitialSettings: setInitialSettings,\n        getInitialSettings: getInitialSettings,\n        setSwitchMode: setSwitchMode,\n        getSwitchMode: getSwitchMode,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\n        isTracksEqual: isTracksEqual,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMediaController.__dashjs_factory_name = 'MediaController';\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\nfactory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;\nfactory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;\nfactory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\nfactory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;\nfactory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\nexport default factory;\n"]}