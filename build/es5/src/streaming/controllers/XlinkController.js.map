{"version":3,"sources":["../../../../../src/streaming/controllers/XlinkController.js"],"names":["XlinkLoader","EventBus","Events","FactoryMaker","X2JS","URLUtils","DashConstants","RESOLVE_TYPE_ONLOAD","RESOLVE_TYPE_ONACTUATE","RESOLVE_TO_ZERO","XlinkController","config","context","eventBus","getInstance","urlUtils","instance","matchers","iron","manifest","converter","xlinkLoader","setup","on","XLINK_ELEMENT_LOADED","onXlinkElementLoaded","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","setMatchers","value","setIron","resolveManifestOnLoad","mpd","elements","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","getElementsToResolve","Period_asArray","PERIOD","resolve","reset","off","type","resolveType","resolveObject","element","url","length","onXlinkAllElementsLoaded","i","isHTTPURL","originalContent","BaseURL","load","event","openingTag","closingTag","mergedContent","resolvedContent","index","indexOf","substr","xml_str2json","isResolvingFinished","obj","mergeElementsBack","trigger","XLINK_READY","hasOwnProperty","ADAPTATION_SET","concat","EVENT_STREAM","parentElement","toResolve","xlinkObject","splice","createXlinkObject","push","resolvedElements","j","k","isInappropriateTarget","run","resolved","elementsToResolve","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"XlinkController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport XlinkLoader from '../XlinkLoader';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport X2JS from '../../../externals/xml2json';\nimport URLUtils from '../utils/URLUtils';\nimport DashConstants from '../../dash/constants/DashConstants';\n\nconst RESOLVE_TYPE_ONLOAD = 'onLoad';\nconst RESOLVE_TYPE_ONACTUATE = 'onActuate';\nconst RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\n\nfunction XlinkController(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        matchers,\n        iron,\n        manifest,\n        converter,\n        xlinkLoader;\n\n    function setup() {\n        eventBus.on(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\n\n        xlinkLoader = XlinkLoader(context).create({\n            errHandler: config.errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n    }\n\n    function setMatchers(value) {\n        if (value) {\n            matchers = value;\n        }\n    }\n\n    function setIron(value) {\n        if (value) {\n            iron = value;\n        }\n    }\n\n    /**\n     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>\n     * @param {Object} mpd - the manifest\n     */\n    function resolveManifestOnLoad(mpd) {\n        let elements;\n        // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: false,\n            ignoreRoot:         true,\n            matchers:           matchers\n        });\n\n        manifest = mpd;\n        elements = getElementsToResolve(manifest.Period_asArray, manifest, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\n        resolve(elements, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\n\n        if (xlinkLoader) {\n            xlinkLoader.reset();\n            xlinkLoader = null;\n        }\n    }\n\n    function resolve(elements, type, resolveType) {\n        let resolveObject = {};\n        let element,\n            url;\n\n        resolveObject.elements = elements;\n        resolveObject.type = type;\n        resolveObject.resolveType = resolveType;\n        // If nothing to resolve, directly call allElementsLoaded\n        if (resolveObject.elements.length === 0) {\n            onXlinkAllElementsLoaded(resolveObject);\n        }\n        for (let i = 0; i < resolveObject.elements.length; i++) {\n            element = resolveObject.elements[i];\n            if (urlUtils.isHTTPURL(element.url)) {\n                url = element.url;\n            } else {\n                url = element.originalContent.BaseURL + element.url;\n            }\n            xlinkLoader.load(url, element, resolveObject);\n        }\n    }\n\n    function onXlinkElementLoaded(event) {\n        let element,\n            resolveObject;\n\n        const openingTag = '<response>';\n        const closingTag = '</response>';\n        let mergedContent = '';\n\n        element = event.element;\n        resolveObject = event.resolveObject;\n        // if the element resolved into content parse the content\n        if (element.resolvedContent) {\n            let index = 0;\n            // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container\n            if (element.resolvedContent.indexOf('<?xml') === 0) {\n                index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.\n            }\n            mergedContent = element.resolvedContent.substr(0,index) + openingTag + element.resolvedContent.substr(index) + closingTag;\n            element.resolvedContent = converter.xml_str2json(mergedContent);\n        }\n        if (isResolvingFinished(resolveObject)) {\n            onXlinkAllElementsLoaded(resolveObject);\n        }\n    }\n\n    // We got to wait till all elements of the current queue are resolved before merging back\n    function onXlinkAllElementsLoaded (resolveObject) {\n        let elements = [];\n        let i,\n            obj;\n\n        mergeElementsBack(resolveObject);\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {\n            eventBus.trigger(Events.XLINK_READY, {manifest: manifest});\n        }\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {\n            switch (resolveObject.type) {\n                // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel\n                case DashConstants.PERIOD:\n                    for (i = 0; i < manifest[DashConstants.PERIOD + '_asArray'].length; i++) {\n                        obj = manifest[DashConstants.PERIOD + '_asArray'][i];\n                        if (obj.hasOwnProperty(DashConstants.ADAPTATION_SET + '_asArray')) {\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.ADAPTATION_SET + '_asArray'], obj, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));\n                        }\n                        if (obj.hasOwnProperty(DashConstants.EVENT_STREAM + '_asArray')) {\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.EVENT_STREAM + '_asArray'], obj, DashConstants.EVENT_STREAM, RESOLVE_TYPE_ONLOAD));\n                        }\n                    }\n                    resolve(elements, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);\n                    break;\n                case DashConstants.ADAPTATION_SET:\n                    // TODO: Resolve SegmentList here\n                    eventBus.trigger(Events.XLINK_READY, {manifest: manifest});\n                    break;\n            }\n        }\n    }\n\n    // Returns the elements with the specific resolve Type\n    function getElementsToResolve(elements, parentElement, type, resolveType) {\n        let toResolve = [];\n        let element,\n            i,\n            xlinkObject;\n        // first remove all the resolve-to-zero elements\n        for (i = elements.length - 1; i >= 0; i--) {\n            element = elements[i];\n            if (element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO) {\n                elements.splice(i, 1);\n            }\n        }\n        // now get the elements with the right resolve type\n        for (i = 0; i < elements.length; i++) {\n            element = elements[i];\n            if (element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType) {\n                xlinkObject = createXlinkObject(element['xlink:href'], parentElement, type, i, resolveType, element);\n                toResolve.push(xlinkObject);\n            }\n        }\n        return toResolve;\n    }\n\n    function mergeElementsBack(resolveObject) {\n        let resolvedElements = [];\n        let element,\n            type,\n            obj,\n            i,\n            j,\n            k;\n        // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending\n        for (i = resolveObject.elements.length - 1; i >= 0; i --) {\n            element = resolveObject.elements[i];\n            type = element.type + '_asArray';\n\n            // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes\n            if (!element.resolvedContent || isInappropriateTarget()) {\n                delete element.originalContent['xlink:actuate'];\n                delete element.originalContent['xlink:href'];\n                resolvedElements.push(element.originalContent);\n            }\n            // Element was successfully resolved\n            else if (element.resolvedContent) {\n                for (j = 0; j < element.resolvedContent[type].length; j++) {\n                    //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes\n                    obj = element.resolvedContent[type][j];\n                    resolvedElements.push(obj);\n                }\n            }\n            // Replace the old elements in the parent with the resolved ones\n            element.parentElement[type].splice(element.index, 1);\n            for (k = 0; k < resolvedElements.length; k++) {\n                element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);\n            }\n            resolvedElements = [];\n        }\n        if (resolveObject.elements.length > 0) {\n            iron.run(manifest);\n        }\n    }\n\n    function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {\n        return {\n            url: url,\n            parentElement: parentElement,\n            type: type,\n            index: index,\n            resolveType: resolveType,\n            originalContent: originalContent,\n            resolvedContent: null,\n            resolved: false\n        };\n    }\n\n    // Check if all pending requests are finished\n    function isResolvingFinished(elementsToResolve) {\n        let i,\n            obj;\n        for (i = 0; i < elementsToResolve.elements.length; i++) {\n            obj = elementsToResolve.elements[i];\n            if (obj.resolved === false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // TODO : Do some syntax check here if the target is valid or not\n    function isInappropriateTarget() {\n        return false;\n    }\n\n    instance = {\n        resolveManifestOnLoad: resolveManifestOnLoad,\n        setMatchers: setMatchers,\n        setIron: setIron,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nXlinkController.__dashjs_factory_name = 'XlinkController';\nexport default FactoryMaker.getClassFactory(XlinkController);\n"]}