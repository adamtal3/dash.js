{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":["Constants","HTTPRequest","DataChunk","FragmentModel","FragmentLoader","RequestModifier","EventBus","Events","FactoryMaker","Debug","FragmentController","config","context","eventBus","getInstance","errHandler","mediaPlayerModel","metricsModel","instance","logger","fragmentModels","setup","getLogger","resetInitialSettings","on","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","FRAGMENT_LOADING_PROGRESS","getModel","type","model","create","fragmentLoader","requestModifier","isInitializationRequest","request","INIT_SEGMENT_TYPE","reset","off","createDataChunk","bytes","streamId","endFragment","chunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","e","mediaType","sender","response","isInit","streamInfo","error","AUDIO","VIDEO","FRAGMENTED_TEXT","trigger","SERVICE_LOCATION_BLACKLIST_ADD","entry","serviceLocation","warn","id","INIT_FRAGMENT_LOADED","MEDIA_FRAGMENT_LOADED","fragmentModel","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"FragmentController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport FragmentLoader from '../FragmentLoader';\nimport RequestModifier from '../utils/RequestModifier';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController( config ) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n\n    let instance,\n        logger,\n        fragmentModels;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({\n                metricsModel: metricsModel,\n                fragmentLoader: FragmentLoader(context).create({\n                    metricsModel: metricsModel,\n                    mediaPlayerModel: mediaPlayerModel,\n                    errHandler: errHandler,\n                    requestModifier: RequestModifier(context).getInstance()\n                })\n            });\n\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function isInitializationRequest(request) {\n        return (request && request.type && request.type === HTTPRequest.INIT_SEGMENT_TYPE);\n    }\n\n    function resetInitialSettings() {\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n        resetInitialSettings();\n    }\n\n    function createDataChunk(bytes, request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (fragmentModels[e.request.mediaType] !== e.sender) {\n            return;\n        }\n\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = isInitializationRequest(request);\n        const streamInfo = request.mediaInfo.streamInfo;\n\n        if (e.error) {\n            if (e.request.mediaType === Constants.AUDIO || e.request.mediaType === Constants.VIDEO || e.request.mediaType === Constants.FRAGMENTED_TEXT) {\n                // add service location to blacklist controller - only for audio or video. text should not set errors\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, {entry: e.request.serviceLocation});\n            }\n        }\n\n        if (!bytes || !streamInfo) {\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: e.sender\n        });\n    }\n\n    instance = {\n        getModel: getModel,\n        isInitializationRequest: isInitializationRequest,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]}