{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":["Constants","HTTPRequest","DataChunk","FragmentModel","FragmentLoader","RequestModifier","EventBus","Events","FactoryMaker","Debug","FragmentController","config","context","eventBus","getInstance","errHandler","mediaPlayerModel","metricsModel","instance","logger","fragmentModels","setup","getLogger","resetInitialSettings","on","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","FRAGMENT_LOADING_PROGRESS","getModel","type","model","create","fragmentLoader","requestModifier","isInitializationRequest","request","INIT_SEGMENT_TYPE","reset","off","createDataChunk","bytes","streamId","endFragment","chunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","e","mediaType","sender","response","isInit","streamInfo","error","AUDIO","VIDEO","FRAGMENTED_TEXT","trigger","SERVICE_LOCATION_BLACKLIST_ADD","entry","serviceLocation","warn","id","INIT_FRAGMENT_LOADED","MEDIA_FRAGMENT_LOADED","fragmentModel","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"FragmentController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport FragmentLoader from '../FragmentLoader';\nimport RequestModifier from '../utils/RequestModifier';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController( config ) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n\n    let instance,\n        logger,\n        fragmentModels;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({\n                metricsModel: metricsModel,\n                fragmentLoader: FragmentLoader(context).create({\n                    metricsModel: metricsModel,\n                    mediaPlayerModel: mediaPlayerModel,\n                    errHandler: errHandler,\n                    requestModifier: RequestModifier(context).getInstance()\n                })\n            });\n\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function isInitializationRequest(request) {\n        return (request && request.type && request.type === HTTPRequest.INIT_SEGMENT_TYPE);\n    }\n\n    function resetInitialSettings() {\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n        resetInitialSettings();\n    }\n\n    function createDataChunk(bytes, request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (fragmentModels[e.request.mediaType] !== e.sender) {\n            return;\n        }\n\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = isInitializationRequest(request);\n        const streamInfo = request.mediaInfo.streamInfo;\n\n        if (e.error) {\n            if (e.request.mediaType === Constants.AUDIO || e.request.mediaType === Constants.VIDEO || e.request.mediaType === Constants.FRAGMENTED_TEXT) {\n                // add service location to blacklist controller - only for audio or video. text should not set errors\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, {entry: e.request.serviceLocation});\n            }\n        }\n\n        if (!bytes || !streamInfo) {\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: e.sender\n        });\n    }\n\n    instance = {\n        getModel: getModel,\n        isInitializationRequest: isInitializationRequest,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]}