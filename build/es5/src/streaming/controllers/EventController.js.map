{"version":3,"sources":["../../../../../src/streaming/controllers/EventController.js"],"names":["FactoryMaker","Debug","EventBus","Events","XHRLoader","EventController","MPD_RELOAD_SCHEME","MPD_RELOAD_VALUE","MPD_CALLBACK_SCHEME","MPD_CALLBACK_VALUE","context","eventBus","getInstance","instance","logger","inlineEvents","inbandEvents","activeEvents","eventInterval","refreshDelay","lastEventTimerCall","manifestUpdater","playbackController","isStarted","setup","getLogger","resetInitialSettings","Date","now","checkSetConfigCall","Error","stop","clearInterval","start","debug","isNaN","setInterval","onEventTimer","addInlineEvents","values","i","length","event","id","addInbandEvents","eventStream","schemeIdUri","undefined","handleManifestReloadEvent","value","timescale","validUntil","presentationTime","newDuration","NaN","duration","info","trigger","MANIFEST_VALIDITY_CHANGED","newManifestValidAfter","removeEvents","currentVideoTime","getTime","eventIds","Object","keys","eventId","curr","presentationTimeThreshold","triggerEvents","refreshManifest","sendCallbackRequest","url","loader","create","load","method","request","responseType","events","presentationTimeDelta","messageData","setConfig","config","reset","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"EventController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport XHRLoader from '../net/XHRLoader';\n\nfunction EventController() {\n\n    const MPD_RELOAD_SCHEME = 'urn:mpeg:dash:event:2012';\n    const MPD_RELOAD_VALUE = 1;\n\n    const MPD_CALLBACK_SCHEME = 'urn:mpeg:dash:event:callback:2015';\n    const MPD_CALLBACK_VALUE = 1;\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        inlineEvents, // Holds all Inline Events not triggered yet\n        inbandEvents, // Holds all Inband Events not triggered yet\n        activeEvents, // Holds all Events currently running\n        eventInterval, // variable holding the setInterval\n        refreshDelay, // refreshTime for the setInterval\n        lastEventTimerCall,\n        manifestUpdater,\n        playbackController,\n        isStarted;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n    }\n\n    function resetInitialSettings() {\n        isStarted = false;\n        inlineEvents = {};\n        inbandEvents = {};\n        activeEvents = {};\n        eventInterval = null;\n        refreshDelay = 100;\n        lastEventTimerCall = Date.now() / 1000;\n    }\n\n    function checkSetConfigCall() {\n        if (!manifestUpdater || !playbackController) {\n            throw new Error('setConfig function has to be called previously');\n        }\n    }\n\n    function stop() {\n        if (eventInterval !== null && isStarted) {\n            clearInterval(eventInterval);\n            eventInterval = null;\n            isStarted = false;\n        }\n    }\n\n    function start() {\n        checkSetConfigCall();\n        logger.debug('Start Event Controller');\n        if (!isStarted && !isNaN(refreshDelay)) {\n            isStarted = true;\n            eventInterval = setInterval(onEventTimer, refreshDelay);\n        }\n    }\n\n    /**\n     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted\n     * @param {Array.<Object>} values\n     */\n    function addInlineEvents(values) {\n        checkSetConfigCall();\n\n        inlineEvents = {};\n\n        if (values) {\n            for (let i = 0; i < values.length; i++) {\n                let event = values[i];\n                inlineEvents[event.id] = event;\n                logger.debug('Add inline event with id ' + event.id);\n            }\n        }\n        logger.debug('Added ' + values.length + ' inline events');\n    }\n\n    /**\n     * i.e. processing of any one event message box with the same id is sufficient\n     * @param {Array.<Object>} values\n     */\n    function addInbandEvents(values) {\n        checkSetConfigCall();\n\n        for (let i = 0; i < values.length; i++) {\n            let event = values[i];\n            if (!(event.id in inbandEvents)) {\n                if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined) {\n                    handleManifestReloadEvent(event);\n                }\n                inbandEvents[event.id] = event;\n                logger.debug('Add inband event with id ' + event.id);\n            } else {\n                logger.debug('Repeated event with id ' + event.id);\n            }\n        }\n    }\n\n    function handleManifestReloadEvent(event) {\n        if (event.eventStream.value == MPD_RELOAD_VALUE) {\n            const timescale = event.eventStream.timescale || 1;\n            const validUntil = event.presentationTime / timescale;\n            let newDuration;\n            if (event.presentationTime == 0xFFFFFFFF) {//0xFF... means remaining duration unknown\n                newDuration = NaN;\n            } else {\n                newDuration = (event.presentationTime + event.duration) / timescale;\n            }\n            logger.info('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);\n            eventBus.trigger(Events.MANIFEST_VALIDITY_CHANGED, {\n                id: event.id,\n                validUntil: validUntil,\n                newDuration: newDuration,\n                newManifestValidAfter: NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet\n            });\n        }\n    }\n\n    /**\n     * Remove events which are over from the list\n     */\n    function removeEvents() {\n        if (activeEvents) {\n            let currentVideoTime = playbackController.getTime();\n            let eventIds = Object.keys(activeEvents);\n\n            for (let i = 0; i < eventIds.length; i++) {\n                let eventId = eventIds[i];\n                let curr = activeEvents[eventId];\n                if (curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime) {\n                    logger.debug('Remove Event ' + eventId + ' at time ' + currentVideoTime);\n                    curr = null;\n                    delete activeEvents[eventId];\n                }\n            }\n        }\n    }\n\n    /**\n     * Iterate through the eventList and trigger/remove the events\n     */\n    function onEventTimer() {\n        var currentVideoTime = playbackController.getTime();\n        var presentationTimeThreshold = (currentVideoTime - lastEventTimerCall);\n        lastEventTimerCall = currentVideoTime;\n\n        triggerEvents(inbandEvents, presentationTimeThreshold, currentVideoTime);\n        triggerEvents(inlineEvents, presentationTimeThreshold, currentVideoTime);\n        removeEvents();\n    }\n\n    function refreshManifest() {\n        checkSetConfigCall();\n        manifestUpdater.refreshManifest();\n    }\n\n    function sendCallbackRequest(url) {\n        let loader = XHRLoader(context).create({});\n        loader.load({\n            method: 'get',\n            url: url,\n            request: {\n                responseType: 'arraybuffer'\n            }});\n    }\n\n    function triggerEvents(events, presentationTimeThreshold, currentVideoTime) {\n        var presentationTime;\n\n        /* == Trigger events that are ready == */\n        if (events) {\n            let eventIds = Object.keys(events);\n            for (let i = 0; i < eventIds.length; i++) {\n                let eventId = eventIds[i];\n                let curr = events[eventId];\n\n                if (curr !== undefined) {\n                    presentationTime = curr.presentationTime / curr.eventStream.timescale;\n                    if (presentationTime === 0 || (presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime)) {\n                        logger.debug('Start Event ' + eventId + ' at ' + currentVideoTime);\n                        if (curr.duration > 0) {\n                            activeEvents[eventId] = curr;\n                        }\n                        if (curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE) {\n                            if (curr.duration !== 0 || curr.presentationTimeDelta !== 0) { //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.\n                                refreshManifest();\n                            }\n                        } else if (curr.eventStream.schemeIdUri == MPD_CALLBACK_SCHEME && curr.eventStream.value == MPD_CALLBACK_VALUE) {\n                            sendCallbackRequest(curr.messageData);\n                        } else {\n                            eventBus.trigger(curr.eventStream.schemeIdUri, {event: curr});\n                        }\n                        delete events[eventId];\n                    }\n                }\n            }\n        }\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.manifestUpdater) {\n            manifestUpdater = config.manifestUpdater;\n        }\n\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n    }\n\n    function reset() {\n        stop();\n        resetInitialSettings();\n    }\n\n    instance = {\n        addInlineEvents: addInlineEvents,\n        addInbandEvents: addInbandEvents,\n        stop: stop,\n        start: start,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nEventController.__dashjs_factory_name = 'EventController';\nexport default FactoryMaker.getClassFactory(EventController);\n"]}