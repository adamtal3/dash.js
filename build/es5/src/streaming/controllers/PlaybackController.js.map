{"version":3,"sources":["../../../../../src/streaming/controllers/PlaybackController.js"],"names":["Constants","BufferController","EventBus","Events","FactoryMaker","Debug","LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS","PlaybackController","context","eventBus","getInstance","instance","logger","streamController","metricsModel","dashMetrics","manifestModel","dashManifestModel","adapter","videoModel","timelineConverter","liveStartTime","wallclockTimeIntervalId","commonEarliestTime","liveDelay","bufferedRange","streamInfo","isDynamic","mediaPlayerModel","playOnceInitialized","lastLivePlaybackTime","availabilityStartTime","compatibleWithPreviousStream","isLowLatencySeekingInProgress","playbackStalled","minPlaybackRateChange","uriFragmentModel","setup","getLogger","reset","initialize","StreamInfo","compatible","addAllListeners","manifestInfo","start","ua","navigator","userAgent","toLowerCase","isSafari","test","on","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","BYTES_APPENDED_END_FRAGMENT","onBytesAppended","LOADING_PROGRESS","onFragmentLoadProgress","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","PERIOD_SWITCH_STARTED","onPeriodSwitchStarted","PLAYBACK_PROGRESS","onPlaybackProgression","PLAYBACK_TIME_UPDATED","PLAYBACK_ENDED","onPlaybackEnded","play","e","fromStreamInfo","id","undefined","getTimeToStreamEnd","parseFloat","getStreamEndTime","getTime","toFixed","startTime","getStreamStartTime","offset","duration","getElement","isPaused","pause","isSeeking","seek","time","stickToBuffered","internalSeek","removeEventListener","onPlaybackSeeking","info","setCurrentTime","trigger","PLAYBACK_SEEK_ASKED","seekToLive","metrics","getReadOnlyMetricsFor","VIDEO","AUDIO","DVRMetrics","getCurrentDVRInfo","DVRWindow","range","end","getLiveDelay","getNormalizedTime","t","isNaN","timeOffset","getPlaybackRate","getPlayedRanges","getEnded","getIsDynamic","getStreamController","setLiveStartTime","value","getLiveStartTime","computeLiveDelay","fragmentDuration","dvrWindowSize","mpd","getMpd","getValue","delay","ret","END_OF_PLAYLIST_PADDING","getUseSuggestedPresentationDelay","hasOwnProperty","SUGGESTED_PRESENTATION_DELAY","suggestedPresentationDelay","getLowLatencyEnabled","getLiveDelayFragmentCount","minBufferTime","targetDelayCapping","Math","max","min","getCurrentLiveLatency","NaN","currentTime","now","Date","getClientTimeOffset","off","stopUpdatingWallclockTime","removeAllListeners","setConfig","config","getStartTimeFromUriParameters","fragData","getURIFragmentData","uriParameters","r","parseInt","DVRWindowSize","floor","availableFrom","fragS","s","fragT","ignoreStartOffset","liveEdge","presentationStartTime","startTimeOffset","earliestTime","audio","video","getActualPresentationTime","actualTime","startUpdatingWallclockTime","tick","onWallclockTime","setInterval","getWallclockTimeUpdateInterval","clearInterval","updateCurrentTime","getReadyState","timeChanged","error","representationInfo","convertDataToRepresentationInfo","currentRepresentation","mediaInfo","onCanPlay","CAN_PLAY","onPlaybackStart","PLAYBACK_STARTED","onPlaybackWaiting","PLAYBACK_WAITING","playingTime","onPlaybackPlaying","PLAYBACK_PLAYING","onPlaybackPaused","PLAYBACK_PAUSED","ended","seekTime","PLAYBACK_SEEKING","onPlaybackSeeked","PLAYBACK_SEEKED","addEventListener","onPlaybackTimeUpdated","timeToEnd","updateLivePlaybackTime","onPlaybackProgress","onPlaybackRateChanged","rate","PLAYBACK_RATE_CHANGED","playbackRate","onPlaybackMetaDataLoaded","PLAYBACK_METADATA_LOADED","onNativePlaybackEnded","getActiveStreamInfo","isLast","onPlaybackError","event","target","srcElement","PLAYBACK_ERROR","WALLCLOCK_TIME_UPDATED","checkTimeInRanges","ranges","length","i","len","getCatchUpPlaybackRate","needToCatchUp","startPlaybackCatchUp","stopPlaybackCatchUp","getBufferLevel","bufferLevel","getActiveStreamProcessors","forEach","p","bl","abs","getLowLatencyMinDrift","cpr","deltaLatency","d","pow","E","newRate","setPlaybackRate","getLowLatencyMaxDriftBeforeSeeking","initialStartTime","bufferedRanges","started","type","sender","getType","hasVideoTrack","isTrackTypePresent","hasAudioTrack","stream","request","minDelay","warn","setLiveDelay","state","BUFFER_EMPTY","setStallState","mediaType","onPlaybackStalled","PLAYBACK_STALLED","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"PlaybackController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport BufferController from './BufferController';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nconst LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS = 500;\n\nfunction PlaybackController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        streamController,\n        metricsModel,\n        dashMetrics,\n        manifestModel,\n        dashManifestModel,\n        adapter,\n        videoModel,\n        timelineConverter,\n        liveStartTime,\n        wallclockTimeIntervalId,\n        commonEarliestTime,\n        liveDelay,\n        bufferedRange,\n        streamInfo,\n        isDynamic,\n        mediaPlayerModel,\n        playOnceInitialized,\n        lastLivePlaybackTime,\n        availabilityStartTime,\n        compatibleWithPreviousStream,\n        isLowLatencySeekingInProgress,\n        playbackStalled,\n        minPlaybackRateChange,\n        uriFragmentModel;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n\n        reset();\n    }\n\n    function initialize(StreamInfo, compatible) {\n        streamInfo = StreamInfo;\n        addAllListeners();\n        isDynamic = streamInfo.manifestInfo.isDynamic;\n        isLowLatencySeekingInProgress = false;\n        playbackStalled = false;\n        liveStartTime = streamInfo.start;\n        compatibleWithPreviousStream = compatible;\n\n        const ua = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\n\n        // Detect safari browser (special behavior for low latency streams)\n        const isSafari = /safari/.test(ua) && !/chrome/.test(ua);\n        minPlaybackRateChange = isSafari ? 0.25 : 0.02;\n\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.on(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);\n        eventBus.on(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\n        eventBus.on(Events.PLAYBACK_ENDED, onPlaybackEnded, this);\n\n        if (playOnceInitialized) {\n            playOnceInitialized = false;\n            play();\n        }\n    }\n\n    function onPeriodSwitchStarted(e) {\n        if (!isDynamic && e.fromStreamInfo && commonEarliestTime[e.fromStreamInfo.id] !== undefined) {\n            delete bufferedRange[e.fromStreamInfo.id];\n            delete commonEarliestTime[e.fromStreamInfo.id];\n        }\n    }\n\n    function getTimeToStreamEnd() {\n        return parseFloat((getStreamEndTime() - getTime()).toFixed(5));\n    }\n\n    function getStreamEndTime() {\n        const startTime = getStreamStartTime(true);\n        const offset = isDynamic && streamInfo ? startTime - streamInfo.start : 0;\n        return startTime + (streamInfo ? streamInfo.duration - offset : offset);\n    }\n\n    function play() {\n        if (streamInfo && videoModel && videoModel.getElement()) {\n            videoModel.play();\n        } else {\n            playOnceInitialized = true;\n        }\n    }\n\n    function isPaused() {\n        return streamInfo && videoModel ? videoModel.isPaused() : null;\n    }\n\n    function pause() {\n        if (streamInfo && videoModel) {\n            videoModel.pause();\n        }\n    }\n\n    function isSeeking() {\n        return streamInfo && videoModel ? videoModel.isSeeking() : null;\n    }\n\n    function seek(time, stickToBuffered, internalSeek) {\n        if (streamInfo && videoModel) {\n            if (internalSeek === true) {\n                if (time !== videoModel.getTime()) {\n                    // Internal seek = seek video model only (disable 'seeking' listener),\n                    // buffer(s) are already appended at given time (see onBytesAppended())\n                    videoModel.removeEventListener('seeking', onPlaybackSeeking);\n                    logger.info('Requesting seek to time: ' + time);\n                    videoModel.setCurrentTime(time, stickToBuffered);\n                }\n            } else {\n                eventBus.trigger(Events.PLAYBACK_SEEK_ASKED);\n                logger.info('Requesting seek to time: ' + time);\n                videoModel.setCurrentTime(time, stickToBuffered);\n            }\n        }\n    }\n\n    function seekToLive() {\n        const metrics = metricsModel.getReadOnlyMetricsFor(Constants.VIDEO) || metricsModel.getReadOnlyMetricsFor(Constants.AUDIO);\n        const DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics);\n        const DVRWindow = DVRMetrics ? DVRMetrics.range : null;\n\n        seek(DVRWindow.end - mediaPlayerModel.getLiveDelay(), true, false);\n    }\n\n    function getTime() {\n        return streamInfo && videoModel ? videoModel.getTime() : null;\n    }\n\n    function getNormalizedTime() {\n        let t = getTime();\n\n        if (isDynamic && !isNaN(availabilityStartTime)) {\n            const timeOffset = availabilityStartTime / 1000;\n            // Fix current time for firefox and safari (returned as an absolute time)\n            if (t > timeOffset) {\n                t -= timeOffset;\n            }\n        }\n\n        return t;\n    }\n\n    function getPlaybackRate() {\n        return streamInfo && videoModel ? videoModel.getPlaybackRate() : null;\n    }\n\n    function getPlayedRanges() {\n        return streamInfo && videoModel ? videoModel.getPlayedRanges() : null;\n    }\n\n    function getEnded() {\n        return streamInfo && videoModel ? videoModel.getEnded() : null;\n    }\n\n    function getIsDynamic() {\n        return isDynamic;\n    }\n\n    function getStreamController() {\n        return streamController;\n    }\n\n    function setLiveStartTime(value) {\n        liveStartTime = value;\n    }\n\n    function getLiveStartTime() {\n        return liveStartTime;\n    }\n\n    /**\n     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge\n     * @param {number} fragmentDuration - seconds?\n     * @param {number} dvrWindowSize - seconds?\n     * @returns {number} object\n     * @memberof PlaybackController#\n     */\n    function computeLiveDelay(fragmentDuration, dvrWindowSize) {\n        const mpd = dashManifestModel.getMpd(manifestModel.getValue());\n\n        let delay;\n        let ret;\n        const END_OF_PLAYLIST_PADDING = 10;\n\n        if (mediaPlayerModel.getUseSuggestedPresentationDelay() && mpd.hasOwnProperty(Constants.SUGGESTED_PRESENTATION_DELAY)) {\n            delay = mpd.suggestedPresentationDelay;\n        } else if (mediaPlayerModel.getLowLatencyEnabled()) {\n            delay = 0;\n        } else if (mediaPlayerModel.getLiveDelay()) {\n            delay = mediaPlayerModel.getLiveDelay(); // If set by user, this value takes precedence\n        } else if (!isNaN(fragmentDuration)) {\n            delay = fragmentDuration * mediaPlayerModel.getLiveDelayFragmentCount();\n        } else {\n            delay = streamInfo.manifestInfo.minBufferTime * 2;\n        }\n\n        if (mpd.availabilityStartTime) {\n            availabilityStartTime = mpd.availabilityStartTime.getTime();\n        }\n\n        if (dvrWindowSize > 0) {\n            // cap target latency to:\n            // - dvrWindowSize / 2 for short playlists\n            // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists\n            const targetDelayCapping = Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING, dvrWindowSize / 2);\n            ret = Math.min(delay, targetDelayCapping);\n        } else {\n            ret = delay;\n        }\n        liveDelay = ret;\n        return ret;\n    }\n\n    function getLiveDelay() {\n        return liveDelay;\n    }\n\n    function getCurrentLiveLatency() {\n        if (!isDynamic || isNaN(availabilityStartTime)) {\n            return NaN;\n        }\n        let currentTime = getNormalizedTime();\n        if (isNaN(currentTime) || currentTime === 0) {\n            return 0;\n        }\n\n        const now = new Date().getTime() + timelineConverter.getClientTimeOffset() * 1000;\n        return Math.max(((now - availabilityStartTime - currentTime * 1000) / 1000).toFixed(3), 0);\n    }\n\n    function reset() {\n        liveStartTime = NaN;\n        playOnceInitialized = false;\n        commonEarliestTime = {};\n        liveDelay = 0;\n        availabilityStartTime = 0;\n        bufferedRange = {};\n        if (videoModel) {\n            eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n            eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n            eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n            eventBus.off(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\n            eventBus.off(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this);\n            eventBus.off(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\n            eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\n            eventBus.off(Events.PLAYBACK_ENDED, onPlaybackEnded, this);\n            stopUpdatingWallclockTime();\n            removeAllListeners();\n        }\n        wallclockTimeIntervalId = null;\n        videoModel = null;\n        streamInfo = null;\n        isDynamic = null;\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.uriFragmentModel) {\n            uriFragmentModel = config.uriFragmentModel;\n        }\n    }\n\n    function getStartTimeFromUriParameters() {\n        const fragData = uriFragmentModel.getURIFragmentData();\n        let uriParameters;\n        if (fragData) {\n            uriParameters = {};\n            const r = parseInt(fragData.r, 10);\n            if (r >= 0 && streamInfo && r < streamInfo.manifestInfo.DVRWindowSize && fragData.t === null) {\n                fragData.t = Math.max(Math.floor(Date.now() / 1000) - streamInfo.manifestInfo.DVRWindowSize, (streamInfo.manifestInfo.availableFrom.getTime() / 1000) + streamInfo.start) + r;\n            }\n            uriParameters.fragS = parseFloat(fragData.s);\n            uriParameters.fragT = parseFloat(fragData.t);\n        }\n        return uriParameters;\n    }\n\n    /**\n     * @param {boolean} ignoreStartOffset - ignore URL fragment start offset if true\n     * @param {number} liveEdge - liveEdge value\n     * @returns {number} object\n     * @memberof PlaybackController#\n     */\n    function getStreamStartTime(ignoreStartOffset, liveEdge) {\n        let presentationStartTime;\n        let startTimeOffset = NaN;\n\n        if (!ignoreStartOffset) {\n            const uriParameters = getStartTimeFromUriParameters();\n            if (uriParameters) {\n                startTimeOffset = !isNaN(uriParameters.fragS) ? uriParameters.fragS : uriParameters.fragT;\n            } else {\n                startTimeOffset = 0;\n            }\n        } else {\n            startTimeOffset = streamInfo ? streamInfo.start : startTimeOffset;\n        }\n\n        if (isDynamic) {\n            if (!isNaN(startTimeOffset) && streamInfo) {\n                presentationStartTime = startTimeOffset - (streamInfo.manifestInfo.availableFrom.getTime() / 1000);\n\n                if (presentationStartTime > liveStartTime ||\n                    presentationStartTime < (!isNaN(liveEdge) ? (liveEdge - streamInfo.manifestInfo.DVRWindowSize) : NaN)) {\n                    presentationStartTime = null;\n                }\n            }\n            presentationStartTime = presentationStartTime || liveStartTime;\n\n        } else {\n            if (streamInfo) {\n                if (!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration, streamInfo.duration) && startTimeOffset >= 0) {\n                    presentationStartTime = startTimeOffset;\n                } else {\n                    let earliestTime = commonEarliestTime[streamInfo.id]; //set by ready bufferStart after first onBytesAppended\n                    presentationStartTime = earliestTime !== undefined ? Math.max(earliestTime.audio !== undefined ? earliestTime.audio : 0, earliestTime.video !== undefined ? earliestTime.video : 0, streamInfo.start) : streamInfo.start;\n                }\n            }\n        }\n\n        return presentationStartTime;\n    }\n\n    function getActualPresentationTime(currentTime) {\n        const metrics = metricsModel.getReadOnlyMetricsFor(Constants.VIDEO) || metricsModel.getReadOnlyMetricsFor(Constants.AUDIO);\n        const DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics);\n        const DVRWindow = DVRMetrics ? DVRMetrics.range : null;\n        let actualTime;\n\n        if (!DVRWindow) return NaN;\n        if (currentTime > DVRWindow.end) {\n            actualTime = Math.max(DVRWindow.end - streamInfo.manifestInfo.minBufferTime * 2, DVRWindow.start);\n        } else if (currentTime + 0.250 < DVRWindow.start) {\n            // Checking currentTime plus 250ms as the 'timeupdate' is fired with a frequency between 4Hz and 66Hz\n            // https://developer.mozilla.org/en-US/docs/Web/Events/timeupdate\n            // http://w3c.github.io/html/single-page.html#offsets-into-the-media-resource\n            actualTime = DVRWindow.start;\n        } else {\n            return currentTime;\n        }\n\n        return actualTime;\n    }\n\n    function startUpdatingWallclockTime() {\n        if (wallclockTimeIntervalId !== null) return;\n\n        const tick = function () {\n            onWallclockTime();\n        };\n\n        wallclockTimeIntervalId = setInterval(tick, mediaPlayerModel.getWallclockTimeUpdateInterval());\n    }\n\n    function stopUpdatingWallclockTime() {\n        clearInterval(wallclockTimeIntervalId);\n        wallclockTimeIntervalId = null;\n    }\n\n    function updateCurrentTime() {\n        if (isPaused() || !isDynamic || videoModel.getReadyState() === 0) return;\n        const currentTime = getNormalizedTime();\n        const actualTime = getActualPresentationTime(currentTime);\n\n        const timeChanged = (!isNaN(actualTime) && actualTime !== currentTime);\n        if (timeChanged) {\n            seek(actualTime);\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error) return;\n\n        const representationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);\n        const info = representationInfo.mediaInfo.streamInfo;\n\n        if (streamInfo.id !== info.id) return;\n        streamInfo = info;\n\n        updateCurrentTime();\n    }\n\n    function onCanPlay() {\n        eventBus.trigger(Events.CAN_PLAY);\n    }\n\n    function onPlaybackStart() {\n        logger.info('Native video element event: play');\n        updateCurrentTime();\n        startUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_STARTED, {\n            startTime: getTime()\n        });\n    }\n\n    function onPlaybackWaiting() {\n        logger.info('Native video element event: waiting');\n        eventBus.trigger(Events.PLAYBACK_WAITING, {\n            playingTime: getTime()\n        });\n    }\n\n    function onPlaybackPlaying() {\n        logger.info('Native video element event: playing');\n        eventBus.trigger(Events.PLAYBACK_PLAYING, {\n            playingTime: getTime()\n        });\n    }\n\n    function onPlaybackPaused() {\n        logger.info('Native video element event: pause');\n        eventBus.trigger(Events.PLAYBACK_PAUSED, {\n            ended: getEnded()\n        });\n    }\n\n    function onPlaybackSeeking() {\n        const seekTime = getTime();\n        logger.info('Seeking to: ' + seekTime);\n        startUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_SEEKING, {\n            seekTime: seekTime\n        });\n    }\n\n    function onPlaybackSeeked() {\n        logger.info('Native video element event: seeked');\n        eventBus.trigger(Events.PLAYBACK_SEEKED);\n        // Reactivate 'seeking' event listener (see seek())\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\n    }\n\n    function onPlaybackTimeUpdated() {\n        if (streamInfo) {\n            eventBus.trigger(Events.PLAYBACK_TIME_UPDATED, {\n                timeToEnd: getTimeToStreamEnd(),\n                time: getTime()\n            });\n        }\n    }\n\n    function updateLivePlaybackTime() {\n        const now = Date.now();\n        if (!lastLivePlaybackTime || now > lastLivePlaybackTime + LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS) {\n            lastLivePlaybackTime = now;\n            onPlaybackTimeUpdated();\n        }\n    }\n\n    function onPlaybackProgress() {\n        eventBus.trigger(Events.PLAYBACK_PROGRESS);\n    }\n\n    function onPlaybackRateChanged() {\n        const rate = getPlaybackRate();\n        logger.info('Native video element event: ratechange: ', rate);\n        eventBus.trigger(Events.PLAYBACK_RATE_CHANGED, {\n            playbackRate: rate\n        });\n    }\n\n    function onPlaybackMetaDataLoaded() {\n        logger.info('Native video element event: loadedmetadata');\n        eventBus.trigger(Events.PLAYBACK_METADATA_LOADED);\n        startUpdatingWallclockTime();\n    }\n\n    // Event to handle the native video element ended event\n    function onNativePlaybackEnded() {\n        logger.info('Native video element event: ended');\n        pause();\n        stopUpdatingWallclockTime();\n        eventBus.trigger(Events.PLAYBACK_ENDED, {'isLast': streamController.getActiveStreamInfo().isLast});\n    }\n\n    // Handle DASH PLAYBACK_ENDED event\n    function onPlaybackEnded(e) {\n        if (wallclockTimeIntervalId && e.isLast) {\n            // PLAYBACK_ENDED was triggered elsewhere, react.\n            logger.info('onPlaybackEnded -- PLAYBACK_ENDED but native video element didn\\'t fire ended');\n            videoModel.setCurrentTime(getStreamEndTime());\n            pause();\n            stopUpdatingWallclockTime();\n        }\n    }\n\n    function onPlaybackError(event) {\n        const target = event.target || event.srcElement;\n        eventBus.trigger(Events.PLAYBACK_ERROR, {\n            error: target.error\n        });\n    }\n\n    function onWallclockTime() {\n        eventBus.trigger(Events.WALLCLOCK_TIME_UPDATED, {\n            isDynamic: isDynamic,\n            time: new Date()\n        });\n\n        // Updates playback time for paused dynamic streams\n        // (video element doesn't call timeupdate when the playback is paused)\n        if (getIsDynamic() && isPaused()) {\n            updateLivePlaybackTime();\n        }\n    }\n\n    function checkTimeInRanges(time, ranges) {\n        if (ranges && ranges.length > 0) {\n            for (let i = 0, len = ranges.length; i < len; i++) {\n                if (time >= ranges.start(i) && time < ranges.end(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function onPlaybackProgression() {\n        if (\n            isDynamic &&\n            mediaPlayerModel.getLowLatencyEnabled() &&\n            mediaPlayerModel.getCatchUpPlaybackRate() > 0 &&\n            !isPaused() &&\n            !isSeeking()\n        ) {\n            if (needToCatchUp()) {\n                startPlaybackCatchUp();\n            } else {\n                stopPlaybackCatchUp();\n            }\n        }\n    }\n\n    function getBufferLevel() {\n        let bufferLevel = null;\n        streamController.getActiveStreamProcessors().forEach(p => {\n            const bl = p.getBufferLevel();\n            if (bufferLevel === null) {\n                bufferLevel = bl;\n            } else {\n                bufferLevel = Math.min(bufferLevel, bl);\n            }\n        });\n\n        return bufferLevel;\n    }\n\n    function needToCatchUp() {\n        return mediaPlayerModel.getCatchUpPlaybackRate() > 0 && getTime() > 0 &&\n            Math.abs(getCurrentLiveLatency() - mediaPlayerModel.getLiveDelay()) > mediaPlayerModel.getLowLatencyMinDrift();\n    }\n\n    function startPlaybackCatchUp() {\n        if (videoModel) {\n            const cpr = mediaPlayerModel.getCatchUpPlaybackRate();\n            const liveDelay = mediaPlayerModel.getLiveDelay();\n            const deltaLatency = getCurrentLiveLatency() - liveDelay;\n            const d = deltaLatency * 5;\n            // Playback rate must be between (1 - cpr) - (1 + cpr)\n            // ex: if cpr is 0.5, it can have values between 0.5 - 1.5\n            const s = (cpr * 2) / (1 + Math.pow(Math.E, -d));\n            let newRate = (1 - cpr) + s;\n            // take into account situations in which there are buffer stalls,\n            // in which increasing playbackRate to reach target latency will\n            // just cause more and more stall situations\n            if (playbackStalled) {\n                const bufferLevel = getBufferLevel();\n                if (bufferLevel > liveDelay / 2) {\n                    playbackStalled = false;\n                } else if (deltaLatency > 0) {\n                    newRate = 1.0;\n                }\n            }\n\n            // don't change playbackrate for small variations (don't overload element with playbackrate changes)\n            if (Math.abs(videoModel.getPlaybackRate() - newRate) > minPlaybackRateChange) {\n                videoModel.setPlaybackRate(newRate);\n            }\n\n            if (mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking() > 0 && !isLowLatencySeekingInProgress &&\n                deltaLatency > mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking()) {\n                logger.info('Low Latency catchup mechanism. Latency too high, doing a seek to live point');\n                isLowLatencySeekingInProgress = true;\n                seekToLive();\n            } else {\n                isLowLatencySeekingInProgress = false;\n            }\n        }\n    }\n\n    function stopPlaybackCatchUp() {\n        if (videoModel) {\n            videoModel.setPlaybackRate(1.0);\n        }\n    }\n\n    function onBytesAppended(e) {\n        let earliestTime,\n            initialStartTime;\n        let ranges = e.bufferedRanges;\n        if (!ranges || !ranges.length) return;\n        if (commonEarliestTime[streamInfo.id] && commonEarliestTime[streamInfo.id].started === true) {\n            //stream has already been started.\n            return;\n        }\n\n        const type = e.sender.getType();\n\n        if (bufferedRange[streamInfo.id] === undefined) {\n            bufferedRange[streamInfo.id] = [];\n        }\n\n        bufferedRange[streamInfo.id][type] = ranges;\n\n        if (commonEarliestTime[streamInfo.id] === undefined) {\n            commonEarliestTime[streamInfo.id] = [];\n            commonEarliestTime[streamInfo.id].started = false;\n        }\n\n        if (commonEarliestTime[streamInfo.id][type] === undefined) {\n            commonEarliestTime[streamInfo.id][type] = Math.max(ranges.start(0), streamInfo.start);\n        }\n\n        const hasVideoTrack = streamController.isTrackTypePresent(Constants.VIDEO);\n        const hasAudioTrack = streamController.isTrackTypePresent(Constants.AUDIO);\n\n        initialStartTime = getStreamStartTime(false);\n        if (hasAudioTrack && hasVideoTrack) {\n            //current stream has audio and video contents\n            if (!isNaN(commonEarliestTime[streamInfo.id].audio) && !isNaN(commonEarliestTime[streamInfo.id].video)) {\n\n                if (commonEarliestTime[streamInfo.id].audio < commonEarliestTime[streamInfo.id].video) {\n                    // common earliest is video time\n                    // check buffered audio range has video time, if ok, we seek, otherwise, we wait some other data\n                    earliestTime = commonEarliestTime[streamInfo.id].video > initialStartTime ? commonEarliestTime[streamInfo.id].video : initialStartTime;\n                    ranges = bufferedRange[streamInfo.id].audio;\n                } else {\n                    // common earliest is audio time\n                    // check buffered video range has audio time, if ok, we seek, otherwise, we wait some other data\n                    earliestTime = commonEarliestTime[streamInfo.id].audio > initialStartTime ? commonEarliestTime[streamInfo.id].audio : initialStartTime;\n                    ranges = bufferedRange[streamInfo.id].video;\n                }\n                if (checkTimeInRanges(earliestTime, ranges)) {\n                    if (!isSeeking() && !compatibleWithPreviousStream && earliestTime !== 0) {\n                        seek(earliestTime, true, true);\n                    }\n                    commonEarliestTime[streamInfo.id].started = true;\n                }\n            }\n        } else {\n            //current stream has only audio or only video content\n            if (commonEarliestTime[streamInfo.id][type]) {\n                earliestTime = commonEarliestTime[streamInfo.id][type] > initialStartTime ? commonEarliestTime[streamInfo.id][type] : initialStartTime;\n                if (!isSeeking() && !compatibleWithPreviousStream) {\n                    seek(earliestTime, false, true);\n                }\n                commonEarliestTime[streamInfo.id].started = true;\n            }\n        }\n    }\n\n    function onFragmentLoadProgress(e) {\n        // If using fetch and stream mode is not available, readjust live latency so it is 20% higher than segment duration\n        if (e.stream === false && mediaPlayerModel.getLowLatencyEnabled() && !isNaN(e.request.duration)) {\n            const minDelay = 1.2 * e.request.duration;\n            if (minDelay > mediaPlayerModel.getLiveDelay()) {\n                logger.warn('Browser does not support fetch API with StreamReader. Increasing live delay to be 20% higher than segment duration:', minDelay.toFixed(2));\n                mediaPlayerModel.setLiveDelay(minDelay);\n            }\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        // do not stall playback when get an event from Stream that is not active\n        if (e.streamInfo.id !== streamInfo.id) return;\n\n        if (mediaPlayerModel.getLowLatencyEnabled()) {\n            if (e.state === BufferController.BUFFER_EMPTY && !isSeeking()) {\n                if (!playbackStalled) {\n                    playbackStalled = true;\n                    stopPlaybackCatchUp();\n                }\n            }\n        } else {\n            videoModel.setStallState(e.mediaType, e.state === BufferController.BUFFER_EMPTY);\n        }\n    }\n\n\n    function onPlaybackStalled(e) {\n        eventBus.trigger(Events.PLAYBACK_STALLED, {\n            e: e\n        });\n    }\n\n    function addAllListeners() {\n        videoModel.addEventListener('canplay', onCanPlay);\n        videoModel.addEventListener('play', onPlaybackStart);\n        videoModel.addEventListener('waiting', onPlaybackWaiting);\n        videoModel.addEventListener('playing', onPlaybackPlaying);\n        videoModel.addEventListener('pause', onPlaybackPaused);\n        videoModel.addEventListener('error', onPlaybackError);\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\n        videoModel.addEventListener('seeked', onPlaybackSeeked);\n        videoModel.addEventListener('timeupdate', onPlaybackTimeUpdated);\n        videoModel.addEventListener('progress', onPlaybackProgress);\n        videoModel.addEventListener('ratechange', onPlaybackRateChanged);\n        videoModel.addEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\n        videoModel.addEventListener('stalled', onPlaybackStalled);\n        videoModel.addEventListener('ended', onNativePlaybackEnded);\n    }\n\n    function removeAllListeners() {\n        videoModel.removeEventListener('canplay', onCanPlay);\n        videoModel.removeEventListener('play', onPlaybackStart);\n        videoModel.removeEventListener('waiting', onPlaybackWaiting);\n        videoModel.removeEventListener('playing', onPlaybackPlaying);\n        videoModel.removeEventListener('pause', onPlaybackPaused);\n        videoModel.removeEventListener('error', onPlaybackError);\n        videoModel.removeEventListener('seeking', onPlaybackSeeking);\n        videoModel.removeEventListener('seeked', onPlaybackSeeked);\n        videoModel.removeEventListener('timeupdate', onPlaybackTimeUpdated);\n        videoModel.removeEventListener('progress', onPlaybackProgress);\n        videoModel.removeEventListener('ratechange', onPlaybackRateChanged);\n        videoModel.removeEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\n        videoModel.removeEventListener('stalled', onPlaybackStalled);\n        videoModel.removeEventListener('ended', onNativePlaybackEnded);\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getStartTimeFromUriParameters: getStartTimeFromUriParameters,\n        getStreamStartTime: getStreamStartTime,\n        getTimeToStreamEnd: getTimeToStreamEnd,\n        getTime: getTime,\n        getNormalizedTime: getNormalizedTime,\n        getPlaybackRate: getPlaybackRate,\n        getPlayedRanges: getPlayedRanges,\n        getEnded: getEnded,\n        getIsDynamic: getIsDynamic,\n        getStreamController: getStreamController,\n        setLiveStartTime: setLiveStartTime,\n        getLiveStartTime: getLiveStartTime,\n        computeLiveDelay: computeLiveDelay,\n        getLiveDelay: getLiveDelay,\n        getCurrentLiveLatency: getCurrentLiveLatency,\n        play: play,\n        isPaused: isPaused,\n        pause: pause,\n        isSeeking: isSeeking,\n        seek: seek,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nPlaybackController.__dashjs_factory_name = 'PlaybackController';\nexport default FactoryMaker.getSingletonFactory(PlaybackController);\n"]}