{"version":3,"sources":["../../../../../src/streaming/controllers/BlacklistController.js"],"names":["FactoryMaker","EventBus","BlackListController","config","blacklist","eventBus","context","getInstance","updateEventName","addBlacklistEventName","contains","query","length","indexOf","add","entry","push","trigger","onAddBlackList","e","setup","on","reset","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;;AAEjCA,aAASA,UAAU,EAAnB;AACA,QAAIC,YAAY,EAAhB;;AAEA,UAAMC,WAAWJ,SAAS,KAAKK,OAAd,EAAuBC,WAAvB,EAAjB;AACA,UAAMC,kBAAkBL,OAAOK,eAA/B;AACA,UAAMC,wBAAwBN,OAAOM,qBAArC;;AAEA,aAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,YAAI,CAACP,UAAUQ,MAAX,IAAqB,CAACD,KAAtB,IAA+B,CAACA,MAAMC,MAA1C,EAAkD;AAC9C,mBAAO,KAAP;AACH;;AAED,eAAQR,UAAUS,OAAV,CAAkBF,KAAlB,MAA6B,CAAC,CAAtC;AACH;;AAED,aAASG,GAAT,CAAaC,KAAb,EAAoB;AAChB,YAAIX,UAAUS,OAAV,CAAkBE,KAAlB,MAA6B,CAAC,CAAlC,EAAqC;AACjC;AACH;;AAEDX,kBAAUY,IAAV,CAAeD,KAAf;;AAEAV,iBAASY,OAAT,CACIT,eADJ,EAEI;AACIO,mBAAOA;AADX,SAFJ;AAMH;;AAED,aAASG,cAAT,CAAwBC,CAAxB,EAA2B;AACvBL,YAAIK,EAAEJ,KAAN;AACH;;AAED,aAASK,KAAT,GAAiB;AACb,YAAIX,qBAAJ,EAA2B;AACvBJ,qBAASgB,EAAT,CAAYZ,qBAAZ,EAAmCS,cAAnC,EAAmD,IAAnD;AACH;AACJ;;AAED,aAASI,KAAT,GAAiB;AACblB,oBAAY,EAAZ;AACH;;AAEDgB;;AAEA,WAAO;AACHN,aAAKA,GADF;AAEHJ,kBAAUA,QAFP;AAGHY,eAAOA;AAHJ,KAAP;AAKH;;AAEDpB,oBAAoBqB,qBAApB,GAA4C,qBAA5C;AACA,eAAevB,aAAawB,eAAb,CAA6BtB,mBAA7B,CAAf","file":"BlacklistController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport EventBus from '../../core/EventBus';\n\nfunction BlackListController(config) {\n\n    config = config || {};\n    let blacklist = [];\n\n    const eventBus = EventBus(this.context).getInstance();\n    const updateEventName = config.updateEventName;\n    const addBlacklistEventName = config.addBlacklistEventName;\n\n    function contains(query) {\n        if (!blacklist.length || !query || !query.length) {\n            return false;\n        }\n\n        return (blacklist.indexOf(query) !== -1);\n    }\n\n    function add(entry) {\n        if (blacklist.indexOf(entry) !== -1) {\n            return;\n        }\n\n        blacklist.push(entry);\n\n        eventBus.trigger(\n            updateEventName,\n            {\n                entry: entry\n            }\n        );\n    }\n\n    function onAddBlackList(e) {\n        add(e.entry);\n    }\n\n    function setup() {\n        if (addBlacklistEventName) {\n            eventBus.on(addBlacklistEventName, onAddBlackList, this);\n        }\n    }\n\n    function reset() {\n        blacklist = [];\n    }\n\n    setup();\n\n    return {\n        add: add,\n        contains: contains,\n        reset: reset\n    };\n}\n\nBlackListController.__dashjs_factory_name = 'BlackListController';\nexport default FactoryMaker.getClassFactory(BlackListController);\n"]}