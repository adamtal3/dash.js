{"version":3,"sources":["../../../../src/streaming/ManifestLoader.js"],"names":["Constants","XlinkController","HTTPLoader","URLUtils","TextRequest","DashJSError","HTTPRequest","EventBus","Events","Errors","FactoryMaker","DashParser","Debug","ManifestLoader","config","context","eventBus","getInstance","urlUtils","instance","logger","httpLoader","xlinkController","parser","mssHandler","errHandler","setup","getLogger","on","XLINK_READY","onXlinkReady","create","metricsModel","mediaPlayerModel","requestModifier","event","trigger","INTERNAL_MANIFEST_LOADED","manifest","createParser","data","indexOf","createMssParser","registerEvents","load","url","request","MPD_TYPE","success","textStatus","responseURL","actualUrl","baseUri","parseBaseUrl","isRelative","resolve","window","location","href","error","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE","setMatchers","getMatchers","setIron","getIron","parse","e","originalUrl","hasOwnProperty","LOCATION","Location_asArray","debug","loadedTime","Date","resolveManifestOnLoad","statusText","errorText","MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE","reset","off","abort","__dashjs_factory_name","factory","getClassFactory"],"mappings":"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","file":"ManifestLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport XlinkController from './controllers/XlinkController';\nimport HTTPLoader from './net/HTTPLoader';\nimport URLUtils from './utils/URLUtils';\nimport TextRequest from './vo/TextRequest';\nimport DashJSError from './vo/DashJSError';\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport Errors from '../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashParser from '../dash/parser/DashParser';\nimport Debug from '../core/Debug';\n\nfunction ManifestLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        logger,\n        httpLoader,\n        xlinkController,\n        parser;\n\n    let mssHandler = config.mssHandler;\n    let errHandler = config.errHandler;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\n\n        httpLoader = HTTPLoader(context).create({\n            errHandler: errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n\n        xlinkController = XlinkController(context).create({\n            errHandler: errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n\n        parser = null;\n    }\n\n    function onXlinkReady(event) {\n        eventBus.trigger(\n            Events.INTERNAL_MANIFEST_LOADED, {\n                manifest: event.manifest\n            }\n        );\n    }\n\n    function createParser(data) {\n        let parser = null;\n        // Analyze manifest content to detect protocol and select appropriate parser\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\n            //do some business to transform it into a Dash Manifest\n            if (mssHandler) {\n                parser = mssHandler.createMssParser();\n                mssHandler.registerEvents();\n            }\n            return parser;\n        } else if (data.indexOf('MPD') > -1) {\n            return DashParser(context).create();\n        } else {\n            return parser;\n        }\n    }\n\n    function load(url) {\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\n\n        httpLoader.load({\n            request: request,\n            success: function (data, textStatus, responseURL) {\n                // Manage situations in which success is called after calling reset\n                if (!xlinkController) return;\n\n                let actualUrl,\n                    baseUri,\n                    manifest;\n\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\n                // also handily resolves relative MPD URLs to absolute\n                if (responseURL && responseURL !== url) {\n                    baseUri = urlUtils.parseBaseUrl(responseURL);\n                    actualUrl = responseURL;\n                } else {\n                    // usually this case will be caught and resolved by\n                    // responseURL above but it is not available for IE11 and Edge/12 and Edge/13\n                    // baseUri must be absolute for BaseURL resolution later\n                    if (urlUtils.isRelative(url)) {\n                        url = urlUtils.resolve(url, window.location.href);\n                    }\n\n                    baseUri = urlUtils.parseBaseUrl(url);\n                }\n\n                // Create parser according to manifest type\n                if (parser === null) {\n                    parser = createParser(data);\n                }\n\n                if (parser === null) {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                            )\n                        }\n                    );\n                    return;\n                }\n\n                // init xlinkcontroller with matchers and iron object from created parser\n                xlinkController.setMatchers(parser.getMatchers());\n                xlinkController.setIron(parser.getIron());\n\n                try {\n                    manifest = parser.parse(data);\n                } catch (e) {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                           )\n                        }\n                    );\n                    return;\n                }\n\n                if (manifest) {\n                    manifest.url = actualUrl || url;\n\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\n                    if (!manifest.originalUrl) {\n                        manifest.originalUrl = manifest.url;\n                    }\n\n                    // In the following, we only use the first Location entry even if many are available\n                    // Compare with ManifestUpdater/DashManifestModel\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\n                        logger.debug('BaseURI set by Location to: ' + baseUri);\n                    }\n\n                    manifest.baseUri = baseUri;\n                    manifest.loadedTime = new Date();\n                    xlinkController.resolveManifestOnLoad(manifest);\n                } else {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                            )\n                        }\n                    );\n                }\n            },\n            error: function (request, statusText, errorText) {\n                eventBus.trigger(\n                    Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE,\n                            Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + `${url}, ${errorText}`\n                        )\n                    }\n                );\n            }\n        });\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\n\n        if (xlinkController) {\n            xlinkController.reset();\n            xlinkController = null;\n        }\n\n        if (httpLoader) {\n            httpLoader.abort();\n            httpLoader = null;\n        }\n\n        if (mssHandler) {\n            mssHandler.reset();\n        }\n    }\n\n    instance = {\n        load: load,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\n\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\nexport default factory;\n"]}