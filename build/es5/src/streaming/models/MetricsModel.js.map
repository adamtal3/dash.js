{"version":3,"sources":["../../../../../src/streaming/models/MetricsModel.js"],"names":["Constants","MetricsConstants","MetricsList","HTTPRequest","HTTPRequestTrace","TrackSwitch","BufferLevel","BufferState","DVRInfo","DroppedFrames","ManifestUpdate","ManifestUpdateStreamInfo","ManifestUpdateRepresentationInfo","SchedulingInfo","EventBus","RequestsQueue","Events","FactoryMaker","MetricsModel","MAXIMUM_LIST_DEPTH","context","eventBus","getInstance","instance","streamMetrics","setup","metricsChanged","trigger","METRICS_CHANGED","metricChanged","mediaType","METRIC_CHANGED","metricUpdated","metricType","vo","METRIC_UPDATED","metric","value","metricAdded","METRIC_ADDED","clearCurrentMetricsForType","type","clearAllCurrentMetrics","getReadOnlyMetricsFor","hasOwnProperty","getMetricsFor","metrics","pushMetrics","list","push","length","shift","appendHttpTrace","httpRequest","s","d","b","trace","interval","addHttpRequest","tcpid","url","actualurl","serviceLocation","range","trequest","tresponse","tfinish","responsecode","mediaduration","responseHeaders","traces","_tfinish","_stream","_mediaduration","_responseHeaders","_serviceLocation","forEach","pushAndNotify","HTTP_REQUEST","addRepresentationSwitch","t","mt","to","lto","TRACK_SWITCH","metricObject","addBufferLevel","level","BUFFER_LEVEL","addBufferState","state","target","BUFFER_STATE","addDVRInfo","currentTime","mpd","time","manifestInfo","DVR_INFO","addDroppedFrames","quality","creationTime","droppedFrames","droppedVideoFrames","DROPPED_FRAMES","addSchedulingInfo","startTime","availabilityStartTime","duration","SCHEDULING_INFO","addRequestsQueue","loadingRequests","executedRequests","REQUESTS_QUEUE","addManifestUpdate","requestTime","fetchTime","presentationStartTime","clientTimeOffset","buffered","latency","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","manifestUpdate","updatedFields","field","addManifestUpdateStreamInfo","id","index","start","streamInfo","MANIFEST_UPDATE_STREAM_INFO","addManifestUpdateRepresentationInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","representationInfo","MANIFEST_UPDATE_TRACK_INFO","addPlayList","Array","isArray","subreplevel","PLAY_LIST","addDVBErrors","DVB_ERRORS","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"MetricsModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport MetricsList from '../vo/MetricsList';\nimport {HTTPRequest, HTTPRequestTrace} from '../vo/metrics/HTTPRequest';\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\nimport BufferLevel from '../vo/metrics/BufferLevel';\nimport BufferState from '../vo/metrics/BufferState';\nimport DVRInfo from '../vo/metrics/DVRInfo';\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\nimport {ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo} from '../vo/metrics/ManifestUpdate';\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\nimport EventBus from '../../core/EventBus';\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsModel() {\n\n    const MAXIMUM_LIST_DEPTH = 1000;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        streamMetrics;\n\n    function setup() {\n        streamMetrics = {};\n    }\n\n    function metricsChanged() {\n        eventBus.trigger(Events.METRICS_CHANGED);\n    }\n\n    function metricChanged(mediaType) {\n        eventBus.trigger(Events.METRIC_CHANGED, {mediaType: mediaType});\n        metricsChanged();\n    }\n\n    function metricUpdated(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_UPDATED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function metricAdded(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_ADDED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function clearCurrentMetricsForType(type) {\n        delete streamMetrics[type];\n        metricChanged(type);\n    }\n\n    function clearAllCurrentMetrics() {\n        streamMetrics = {};\n        metricsChanged();\n    }\n\n    function getReadOnlyMetricsFor(type) {\n        if (streamMetrics.hasOwnProperty(type)) {\n            return streamMetrics[type];\n        }\n\n        return null;\n    }\n\n    function getMetricsFor(type) {\n        let metrics;\n\n        if (streamMetrics.hasOwnProperty(type)) {\n            metrics = streamMetrics[type];\n        } else {\n            metrics = new MetricsList();\n            streamMetrics[type] = metrics;\n        }\n\n        return metrics;\n    }\n\n    function pushMetrics(type, list, value) {\n        let metrics = getMetricsFor(type);\n        metrics[list].push(value);\n        if ( metrics[list].length > MAXIMUM_LIST_DEPTH ) {\n            metrics[list].shift();\n        }\n    }\n\n    function appendHttpTrace(httpRequest, s, d, b) {\n        let vo = new HTTPRequestTrace();\n\n        vo.s = s;\n        vo.d = d;\n        vo.b = b;\n\n        httpRequest.trace.push(vo);\n\n        if (!httpRequest.interval) {\n            httpRequest.interval = 0;\n        }\n\n        httpRequest.interval += d;\n\n        return vo;\n    }\n\n    function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n        let vo = new HTTPRequest();\n\n        // ISO 23009-1 D.4.3 NOTE 2:\n        // All entries for a given object will have the same URL and range\n        // and so can easily be correlated. If there were redirects or\n        // failures there will be one entry for each redirect/failure.\n        // The redirect-to URL or alternative url (where multiple have been\n        // provided in the MPD) will appear as the actualurl of the next\n        // entry with the same url value.\n        if (actualurl && (actualurl !== url)) {\n\n            // given the above, add an entry for the original request\n            addHttpRequest(\n                mediaType,\n                null,\n                type,\n                url,\n                null,\n                null,\n                range,\n                trequest,\n                null, // unknown\n                null, // unknown\n                null, // unknown, probably a 302\n                mediaduration,\n                null,\n                null\n            );\n\n            vo.actualurl = actualurl;\n        }\n\n        vo.tcpid = tcpid;\n        vo.type = type;\n        vo.url = url;\n        vo.range = range;\n        vo.trequest = trequest;\n        vo.tresponse = tresponse;\n        vo.responsecode = responsecode;\n\n        vo._tfinish = tfinish;\n        vo._stream = mediaType;\n        vo._mediaduration = mediaduration;\n        vo._responseHeaders = responseHeaders;\n        vo._serviceLocation = serviceLocation;\n\n        if (traces) {\n            traces.forEach(trace => {\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\n            });\n        } else {\n            // The interval and trace shall be absent for redirect and failure records.\n            delete vo.interval;\n            delete vo.trace;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\n    }\n\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        let vo = new TrackSwitch();\n\n        vo.t = t;\n        vo.mt = mt;\n        vo.to = to;\n\n        if (lto) {\n            vo.lto = lto;\n        } else {\n            delete vo.lto;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\n    }\n\n    function pushAndNotify(mediaType, metricType, metricObject) {\n        pushMetrics(mediaType, metricType, metricObject);\n        metricAdded(mediaType, metricType, metricObject);\n    }\n\n    function addBufferLevel(mediaType, t, level) {\n        let vo = new BufferLevel();\n        vo.t = t;\n        vo.level = level;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\n    }\n\n    function addBufferState(mediaType, state, target) {\n        let vo = new BufferState();\n        vo.target = target;\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\n    }\n\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        let vo = new DVRInfo();\n        vo.time = currentTime ;\n        vo.range = range;\n        vo.manifestInfo = mpd;\n\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\n    }\n\n    function addDroppedFrames(mediaType, quality) {\n        let vo = new DroppedFrames();\n        let list = getMetricsFor(mediaType).DroppedFrames;\n\n        vo.time = quality.creationTime;\n        vo.droppedFrames = quality.droppedVideoFrames;\n\n        if (list.length > 0 && list[list.length - 1] == vo) {\n            return;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\n    }\n\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n        let vo = new SchedulingInfo();\n\n        vo.mediaType = mediaType;\n        vo.t = t;\n\n        vo.type = type;\n        vo.startTime = startTime;\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.duration = duration;\n        vo.quality = quality;\n        vo.range = range;\n\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\n    }\n\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        let vo = new RequestsQueue();\n        vo.loadingRequests = loadingRequests;\n        vo.executedRequests = executedRequests;\n\n        getMetricsFor(mediaType).RequestsQueue = vo;\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\n    }\n\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n        let vo = new ManifestUpdate();\n\n        vo.mediaType = mediaType;\n        vo.type = type;\n        vo.requestTime = requestTime; // when this manifest update was requested\n        vo.fetchTime = fetchTime; // when this manifest update was received\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n        vo.currentTime = currentTime; // actual element.currentTime\n        vo.buffered = buffered; // actual element.ranges\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\n    }\n\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n        if (manifestUpdate) {\n            for (let field in updatedFields) {\n                manifestUpdate[field] = updatedFields[field];\n            }\n\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n        if (manifestUpdate) {\n            let vo = new ManifestUpdateStreamInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.streamInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n        if (manifestUpdate) {\n\n            const vo = new ManifestUpdateRepresentationInfo();\n            vo.id = id;\n            vo.index = index;\n            vo.streamIndex = streamIndex;\n            vo.mediaType = mediaType;\n            vo.startNumber = startNumber;\n            vo.fragmentInfoType = fragmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n        }\n    }\n\n    function addPlayList(vo) {\n        let type = Constants.STREAM;\n\n        if (vo.trace && Array.isArray(vo.trace)) {\n            vo.trace.forEach(trace => {\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n                    delete trace.subreplevel;\n                }\n            });\n        } else {\n            delete vo.trace;\n        }\n\n        pushAndNotify(type, MetricsConstants.PLAY_LIST, vo);\n    }\n\n    function addDVBErrors(vo) {\n        let type = Constants.STREAM;\n\n        pushAndNotify(type, MetricsConstants.DVB_ERRORS, vo);\n    }\n\n    instance = {\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\n        getReadOnlyMetricsFor: getReadOnlyMetricsFor,\n        getMetricsFor: getMetricsFor,\n        addHttpRequest: addHttpRequest,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDVRInfo: addDVRInfo,\n        addDroppedFrames: addDroppedFrames,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addManifestUpdate: addManifestUpdate,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\n"]}