{"version":3,"sources":["../../../../../src/streaming/models/MetricsModel.js"],"names":["Constants","MetricsConstants","MetricsList","HTTPRequest","HTTPRequestTrace","TrackSwitch","BufferLevel","BufferState","DVRInfo","DroppedFrames","ManifestUpdate","ManifestUpdateStreamInfo","ManifestUpdateRepresentationInfo","SchedulingInfo","EventBus","RequestsQueue","Events","FactoryMaker","MetricsModel","MAXIMUM_LIST_DEPTH","context","eventBus","getInstance","instance","streamMetrics","setup","metricsChanged","trigger","METRICS_CHANGED","metricChanged","mediaType","METRIC_CHANGED","metricUpdated","metricType","vo","METRIC_UPDATED","metric","value","metricAdded","METRIC_ADDED","clearCurrentMetricsForType","type","clearAllCurrentMetrics","getReadOnlyMetricsFor","hasOwnProperty","getMetricsFor","metrics","pushMetrics","list","push","length","shift","appendHttpTrace","httpRequest","s","d","b","trace","interval","addHttpRequest","tcpid","url","actualurl","serviceLocation","range","trequest","tresponse","tfinish","responsecode","mediaduration","responseHeaders","traces","_tfinish","_stream","_mediaduration","_responseHeaders","_serviceLocation","forEach","pushAndNotify","HTTP_REQUEST","addRepresentationSwitch","t","mt","to","lto","TRACK_SWITCH","metricObject","addBufferLevel","level","BUFFER_LEVEL","addBufferState","state","target","BUFFER_STATE","addDVRInfo","currentTime","mpd","time","manifestInfo","DVR_INFO","addDroppedFrames","quality","creationTime","droppedFrames","droppedVideoFrames","DROPPED_FRAMES","addSchedulingInfo","startTime","availabilityStartTime","duration","SCHEDULING_INFO","addRequestsQueue","loadingRequests","executedRequests","REQUESTS_QUEUE","addManifestUpdate","requestTime","fetchTime","presentationStartTime","clientTimeOffset","buffered","latency","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","manifestUpdate","updatedFields","field","addManifestUpdateStreamInfo","id","index","start","streamInfo","MANIFEST_UPDATE_STREAM_INFO","addManifestUpdateRepresentationInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","representationInfo","MANIFEST_UPDATE_TRACK_INFO","addPlayList","Array","isArray","subreplevel","PLAY_LIST","addDVBErrors","DVB_ERRORS","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"MetricsModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport MetricsList from '../vo/MetricsList';\nimport {HTTPRequest, HTTPRequestTrace} from '../vo/metrics/HTTPRequest';\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\nimport BufferLevel from '../vo/metrics/BufferLevel';\nimport BufferState from '../vo/metrics/BufferState';\nimport DVRInfo from '../vo/metrics/DVRInfo';\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\nimport {ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo} from '../vo/metrics/ManifestUpdate';\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\nimport EventBus from '../../core/EventBus';\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsModel() {\n\n    const MAXIMUM_LIST_DEPTH = 1000;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        streamMetrics;\n\n    function setup() {\n        streamMetrics = {};\n    }\n\n    function metricsChanged() {\n        eventBus.trigger(Events.METRICS_CHANGED);\n    }\n\n    function metricChanged(mediaType) {\n        eventBus.trigger(Events.METRIC_CHANGED, {mediaType: mediaType});\n        metricsChanged();\n    }\n\n    function metricUpdated(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_UPDATED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function metricAdded(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_ADDED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function clearCurrentMetricsForType(type) {\n        delete streamMetrics[type];\n        metricChanged(type);\n    }\n\n    function clearAllCurrentMetrics() {\n        streamMetrics = {};\n        metricsChanged();\n    }\n\n    function getReadOnlyMetricsFor(type) {\n        if (streamMetrics.hasOwnProperty(type)) {\n            return streamMetrics[type];\n        }\n\n        return null;\n    }\n\n    function getMetricsFor(type) {\n        let metrics;\n\n        if (streamMetrics.hasOwnProperty(type)) {\n            metrics = streamMetrics[type];\n        } else {\n            metrics = new MetricsList();\n            streamMetrics[type] = metrics;\n        }\n\n        return metrics;\n    }\n\n    function pushMetrics(type, list, value) {\n        let metrics = getMetricsFor(type);\n        metrics[list].push(value);\n        if ( metrics[list].length > MAXIMUM_LIST_DEPTH ) {\n            metrics[list].shift();\n        }\n    }\n\n    function appendHttpTrace(httpRequest, s, d, b) {\n        let vo = new HTTPRequestTrace();\n\n        vo.s = s;\n        vo.d = d;\n        vo.b = b;\n\n        httpRequest.trace.push(vo);\n\n        if (!httpRequest.interval) {\n            httpRequest.interval = 0;\n        }\n\n        httpRequest.interval += d;\n\n        return vo;\n    }\n\n    function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n        let vo = new HTTPRequest();\n\n        // ISO 23009-1 D.4.3 NOTE 2:\n        // All entries for a given object will have the same URL and range\n        // and so can easily be correlated. If there were redirects or\n        // failures there will be one entry for each redirect/failure.\n        // The redirect-to URL or alternative url (where multiple have been\n        // provided in the MPD) will appear as the actualurl of the next\n        // entry with the same url value.\n        if (actualurl && (actualurl !== url)) {\n\n            // given the above, add an entry for the original request\n            addHttpRequest(\n                mediaType,\n                null,\n                type,\n                url,\n                null,\n                null,\n                range,\n                trequest,\n                null, // unknown\n                null, // unknown\n                null, // unknown, probably a 302\n                mediaduration,\n                null,\n                null\n            );\n\n            vo.actualurl = actualurl;\n        }\n\n        vo.tcpid = tcpid;\n        vo.type = type;\n        vo.url = url;\n        vo.range = range;\n        vo.trequest = trequest;\n        vo.tresponse = tresponse;\n        vo.responsecode = responsecode;\n\n        vo._tfinish = tfinish;\n        vo._stream = mediaType;\n        vo._mediaduration = mediaduration;\n        vo._responseHeaders = responseHeaders;\n        vo._serviceLocation = serviceLocation;\n\n        if (traces) {\n            traces.forEach(trace => {\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\n            });\n        } else {\n            // The interval and trace shall be absent for redirect and failure records.\n            delete vo.interval;\n            delete vo.trace;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\n    }\n\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        let vo = new TrackSwitch();\n\n        vo.t = t;\n        vo.mt = mt;\n        vo.to = to;\n\n        if (lto) {\n            vo.lto = lto;\n        } else {\n            delete vo.lto;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\n    }\n\n    function pushAndNotify(mediaType, metricType, metricObject) {\n        pushMetrics(mediaType, metricType, metricObject);\n        metricAdded(mediaType, metricType, metricObject);\n    }\n\n    function addBufferLevel(mediaType, t, level) {\n        let vo = new BufferLevel();\n        vo.t = t;\n        vo.level = level;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\n    }\n\n    function addBufferState(mediaType, state, target) {\n        let vo = new BufferState();\n        vo.target = target;\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\n    }\n\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        let vo = new DVRInfo();\n        vo.time = currentTime ;\n        vo.range = range;\n        vo.manifestInfo = mpd;\n\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\n    }\n\n    function addDroppedFrames(mediaType, quality) {\n        let vo = new DroppedFrames();\n        let list = getMetricsFor(mediaType).DroppedFrames;\n\n        vo.time = quality.creationTime;\n        vo.droppedFrames = quality.droppedVideoFrames;\n\n        if (list.length > 0 && list[list.length - 1] == vo) {\n            return;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\n    }\n\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n        let vo = new SchedulingInfo();\n\n        vo.mediaType = mediaType;\n        vo.t = t;\n\n        vo.type = type;\n        vo.startTime = startTime;\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.duration = duration;\n        vo.quality = quality;\n        vo.range = range;\n\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\n    }\n\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        let vo = new RequestsQueue();\n        vo.loadingRequests = loadingRequests;\n        vo.executedRequests = executedRequests;\n\n        getMetricsFor(mediaType).RequestsQueue = vo;\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\n    }\n\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n        let vo = new ManifestUpdate();\n\n        vo.mediaType = mediaType;\n        vo.type = type;\n        vo.requestTime = requestTime; // when this manifest update was requested\n        vo.fetchTime = fetchTime; // when this manifest update was received\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n        vo.currentTime = currentTime; // actual element.currentTime\n        vo.buffered = buffered; // actual element.ranges\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\n    }\n\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n        if (manifestUpdate) {\n            for (let field in updatedFields) {\n                manifestUpdate[field] = updatedFields[field];\n            }\n\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n        if (manifestUpdate) {\n            let vo = new ManifestUpdateStreamInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.streamInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n        if (manifestUpdate) {\n\n            const vo = new ManifestUpdateRepresentationInfo();\n            vo.id = id;\n            vo.index = index;\n            vo.streamIndex = streamIndex;\n            vo.mediaType = mediaType;\n            vo.startNumber = startNumber;\n            vo.fragmentInfoType = fragmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n        }\n    }\n\n    function addPlayList(vo) {\n        let type = Constants.STREAM;\n\n        if (vo.trace && Array.isArray(vo.trace)) {\n            vo.trace.forEach(trace => {\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n                    delete trace.subreplevel;\n                }\n            });\n        } else {\n            delete vo.trace;\n        }\n\n        pushAndNotify(type, MetricsConstants.PLAY_LIST, vo);\n    }\n\n    function addDVBErrors(vo) {\n        let type = Constants.STREAM;\n\n        pushAndNotify(type, MetricsConstants.DVB_ERRORS, vo);\n    }\n\n    instance = {\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\n        getReadOnlyMetricsFor: getReadOnlyMetricsFor,\n        getMetricsFor: getMetricsFor,\n        addHttpRequest: addHttpRequest,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDVRInfo: addDVRInfo,\n        addDroppedFrames: addDroppedFrames,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addManifestUpdate: addManifestUpdate,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\n"]}