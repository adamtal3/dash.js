{"version":3,"sources":["../../../../../src/streaming/models/URIFragmentModel.js"],"names":["URIFragmentData","FactoryMaker","URIFragmentModel","instance","URIFragmentDataVO","initialize","uri","hashIndex","indexOf","fragments","substr","split","i","len","length","fragment","equalIndex","key","substring","hasOwnProperty","getURIFragmentData","__dashjs_factory_name","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,eAAP,MAA4B,uBAA5B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA;;;AAGA,SAASC,gBAAT,GAA4B;;AAExB,QAAIC,QAAJ,EACIC,iBADJ;;AAGA;;;;;AAKA,aAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrBF,4BAAoB,IAAIJ,eAAJ,EAApB;;AAEA,YAAI,CAACM,GAAL,EAAU,OAAO,IAAP;;AAEV,cAAMC,YAAYD,IAAIE,OAAJ,CAAY,GAAZ,CAAlB;AACA,YAAID,cAAc,CAAC,CAAnB,EAAsB;AAClB,kBAAME,YAAYH,IAAII,MAAJ,CAAWH,YAAY,CAAvB,EAA0BI,KAA1B,CAAgC,GAAhC,CAAlB;AACA,iBAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMJ,UAAUK,MAAhC,EAAwCF,IAAIC,GAA5C,EAAiD,EAAED,CAAnD,EAAsD;AAClD,sBAAMG,WAAWN,UAAUG,CAAV,CAAjB;AACA,sBAAMI,aAAaD,SAASP,OAAT,CAAiB,GAAjB,CAAnB;AACA,oBAAIQ,eAAe,CAAC,CAApB,EAAuB;AACnB,0BAAMC,MAAMF,SAASG,SAAT,CAAmB,CAAnB,EAAqBF,UAArB,CAAZ;AACA,wBAAIZ,kBAAkBe,cAAlB,CAAiCF,GAAjC,CAAJ,EAA2C;AACvCb,0CAAkBa,GAAlB,IAAyBF,SAASL,MAAT,CAAgBM,aAAa,CAA7B,CAAzB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;;;;;AAKA,aAASI,kBAAT,GAA8B;AAC1B,eAAOhB,iBAAP;AACH;;AAEDD,eAAW;AACPE,oBAAYA,UADL;AAEPe,4BAAoBA;AAFb,KAAX;;AAKA,WAAOjB,QAAP;AACH;;AAEDD,iBAAiBmB,qBAAjB,GAAyC,kBAAzC;AACA,eAAepB,aAAaqB,mBAAb,CAAiCpB,gBAAjC,CAAf","file":"URIFragmentModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport URIFragmentData from '../vo/URIFragmentData';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * Model class managing URI fragments.\n */\nfunction URIFragmentModel() {\n\n    let instance,\n        URIFragmentDataVO;\n\n    /**\n     * @param {string} uri The URI to parse for fragment extraction\n     * @memberof module:URIFragmentModel\n     * @instance\n     */\n    function initialize(uri) {\n        URIFragmentDataVO = new URIFragmentData();\n\n        if (!uri) return null;\n\n        const hashIndex = uri.indexOf('#');\n        if (hashIndex !== -1) {\n            const fragments = uri.substr(hashIndex + 1).split('&');\n            for (let i = 0, len = fragments.length; i < len; ++i) {\n                const fragment = fragments[i];\n                const equalIndex = fragment.indexOf('=');\n                if (equalIndex !== -1) {\n                    const key = fragment.substring(0,equalIndex);\n                    if (URIFragmentDataVO.hasOwnProperty(key)) {\n                        URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns {URIFragmentData} Object containing supported URI fragments\n     * @memberof module:URIFragmentModel\n     * @instance\n     */\n    function getURIFragmentData() {\n        return URIFragmentDataVO;\n    }\n\n    instance = {\n        initialize: initialize,\n        getURIFragmentData: getURIFragmentData\n    };\n\n    return instance;\n}\n\nURIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';\nexport default FactoryMaker.getSingletonFactory(URIFragmentModel);\n"]}