{"version":3,"sources":["../../../../../../src/streaming/metrics/reporting/ReportingFactory.js"],"names":["DVBReporting","ReportingFactory","config","knownReportingSchemeIdUris","context","debug","metricsConstants","instance","create","entry","rangeController","reporting","schemeIdUri","initialize","e","error","message","register","moduleName","unregister","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,YAAP,MAAyB,0BAAzB;;AAEA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9BA,aAASA,UAAU,EAAnB;;AAEA,UAAMC,6BAA6B;AAC/B,uCAA+BH;AADA,KAAnC;;AAIA,UAAMI,UAAU,KAAKA,OAArB;AACA,UAAMC,QAAQH,OAAOG,KAArB;AACA,UAAMC,mBAAmBJ,OAAOI,gBAAhC;;AAEA,QAAIC,QAAJ;;AAEA,aAASC,MAAT,CAAgBC,KAAhB,EAAuBC,eAAvB,EAAwC;AACpC,YAAIC,SAAJ;;AAEA,YAAI;AACAA,wBAAYR,2BAA2BM,MAAMG,WAAjC,EAA8CR,OAA9C,EAAuDI,MAAvD,CAA8D;AACtEF,kCAAkBA;AADoD,aAA9D,CAAZ;;AAIAK,sBAAUE,UAAV,CAAqBJ,KAArB,EAA4BC,eAA5B;AACH,SAND,CAME,OAAOI,CAAP,EAAU;AACRH,wBAAY,IAAZ;AACAN,kBAAMU,KAAN,CAAa,iEAAgEN,MAAMG,WAAY,KAAIE,EAAEE,OAAQ,GAA7G;AACH;;AAED,eAAOL,SAAP;AACH;;AAED,aAASM,QAAT,CAAkBL,WAAlB,EAA+BM,UAA/B,EAA2C;AACvCf,mCAA2BS,WAA3B,IAA0CM,UAA1C;AACH;;AAED,aAASC,UAAT,CAAoBP,WAApB,EAAiC;AAC7B,eAAOT,2BAA2BS,WAA3B,CAAP;AACH;;AAEDL,eAAW;AACPC,gBAAYA,MADL;AAEPS,kBAAYA,QAFL;AAGPE,oBAAYA;AAHL,KAAX;;AAMA,WAAOZ,QAAP;AACH;;AAEDN,iBAAiBmB,qBAAjB,GAAyC,kBAAzC;AACA,eAAeC,OAAOC,YAAP,CAAoBC,mBAApB,CAAwCtB,gBAAxC,CAAf,C,CAA0E","file":"ReportingFactory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBReporting from './reporters/DVBReporting';\n\nfunction ReportingFactory(config) {\n    config = config || {};\n\n    const knownReportingSchemeIdUris = {\n        'urn:dvb:dash:reporting:2014': DVBReporting\n    };\n\n    const context = this.context;\n    const debug = config.debug;\n    const metricsConstants = config.metricsConstants;\n\n    let instance;\n\n    function create(entry, rangeController) {\n        let reporting;\n\n        try {\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\n                metricsConstants: metricsConstants\n            });\n\n            reporting.initialize(entry, rangeController);\n        } catch (e) {\n            reporting = null;\n            debug.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\n        }\n\n        return reporting;\n    }\n\n    function register(schemeIdUri, moduleName) {\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n    }\n\n    function unregister(schemeIdUri) {\n        delete knownReportingSchemeIdUris[schemeIdUri];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\n"]}