{"version":3,"sources":["../../../../../../../src/streaming/metrics/reporting/reporters/DVBReporting.js"],"names":["MetricSerialiser","RNG","DVBReporting","config","instance","context","metricSerialiser","randomNumberGenerator","reportingPlayerStatusDecided","isReportingPlayer","reportingUrl","rangeController","USE_DRAFT_DVB_SPEC","allowPendingRequestsToCompleteOnReset","pendingRequests","metricsConstants","setup","getInstance","resetInitialSettings","doGetRequest","url","successCB","failureCB","req","XMLHttpRequest","oncomplete","reqIndex","indexOf","splice","status","push","open","onloadend","onerror","send","e","report","type","vos","Array","isArray","isEnabled","forEach","vo","serialise","DVB_ERRORS","initialize","entry","rc","probability","Error","random","reset","abort","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"DVBReporting.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting(config) {\n    config = config || {};\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser,\n        randomNumberGenerator,\n        reportingPlayerStatusDecided,\n        isReportingPlayer,\n        reportingUrl,\n        rangeController;\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function setup() {\n        metricSerialiser = MetricSerialiser(context).getInstance();\n        randomNumberGenerator = RNG(context).getInstance();\n\n        resetInitialSettings();\n    }\n\n    function doGetRequest(url, successCB, failureCB) {\n        let req = new XMLHttpRequest();\n        const oncomplete = function () {\n            let reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                let url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        let probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry['dvb:reportingUrl'];\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            // NOTE: DVB spec has a typo where it incorrectly references the\n            // priority attribute, which should be probability\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function resetInitialSettings() {\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        resetInitialSettings();\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\n"]}