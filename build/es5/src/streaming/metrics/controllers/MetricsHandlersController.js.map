{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsHandlersController.js"],"names":["MetricsHandlerFactory","MetricsHandlersController","config","handlers","instance","context","eventBus","Events","events","metricsHandlerFactory","getInstance","debug","metricsConstants","handle","e","forEach","handler","handleNewMetric","metric","value","mediaType","initialize","metrics","reportingController","split","m","midx","ms","indexOf","nextm","create","push","on","METRIC_ADDED","METRIC_UPDATED","reset","off","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,qBAAP,MAAkC,kCAAlC;;AAEA,SAASC,yBAAT,CAAmCC,MAAnC,EAA2C;;AAEvCA,aAASA,UAAU,EAAnB;AACA,QAAIC,WAAW,EAAf;;AAEA,QAAIC,QAAJ;AACA,UAAMC,UAAU,KAAKA,OAArB;AACA,UAAMC,WAAWJ,OAAOI,QAAxB;AACA,UAAMC,SAASL,OAAOM,MAAtB;;AAEA,QAAIC,wBAAwBT,sBAAsBK,OAAtB,EAA+BK,WAA/B,CAA2C;AACnEC,eAAOT,OAAOS,KADqD;AAEnEL,kBAAUJ,OAAOI,QAFkD;AAGnEM,0BAAkBV,OAAOU;AAH0C,KAA3C,CAA5B;;AAMA,aAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACfX,iBAASY,OAAT,CAAiBC,WAAW;AACxBA,oBAAQC,eAAR,CAAwBH,EAAEI,MAA1B,EAAkCJ,EAAEK,KAApC,EAA2CL,EAAEM,SAA7C;AACH,SAFD;AAGH;;AAED,aAASC,UAAT,CAAoBC,OAApB,EAA6BC,mBAA7B,EAAkD;AAC9CD,gBAAQE,KAAR,CAAc,GAAd,EAAmBT,OAAnB,CACI,CAACU,CAAD,EAAIC,IAAJ,EAAUC,EAAV,KAAiB;AACb,gBAAIX,OAAJ;;AAEA;AACA;AACA;AACA,gBAAKS,EAAEG,OAAF,CAAU,GAAV,MAAmB,CAAC,CAArB,IAA2BH,EAAEG,OAAF,CAAU,GAAV,MAAmB,CAAC,CAAnD,EAAsD;AAClD,oBAAIC,QAAQF,GAAGD,OAAO,CAAV,CAAZ;;AAEA,oBAAIG,SACKA,MAAMD,OAAN,CAAc,GAAd,MAAuB,CAAC,CAD7B,IAEKC,MAAMD,OAAN,CAAc,GAAd,MAAuB,CAAC,CAFjC,EAEqC;AACjCH,yBAAK,MAAMI,KAAX;;AAEA;AACA,2BAAOF,GAAGD,OAAO,CAAV,CAAP;AACH;AACJ;;AAEDV,sBAAUP,sBAAsBqB,MAAtB,CACNL,CADM,EAENF,mBAFM,CAAV;;AAKA,gBAAIP,OAAJ,EAAa;AACTb,yBAAS4B,IAAT,CAAcf,OAAd;AACH;AACJ,SA5BL;;AA+BAV,iBAAS0B,EAAT,CACIzB,OAAO0B,YADX,EAEIpB,MAFJ,EAGIT,QAHJ;;AAMAE,iBAAS0B,EAAT,CACIzB,OAAO2B,cADX,EAEIrB,MAFJ,EAGIT,QAHJ;AAKH;;AAED,aAAS+B,KAAT,GAAiB;AACb7B,iBAAS8B,GAAT,CACI7B,OAAO0B,YADX,EAEIpB,MAFJ,EAGIT,QAHJ;;AAMAE,iBAAS8B,GAAT,CACI7B,OAAO2B,cADX,EAEIrB,MAFJ,EAGIT,QAHJ;;AAMAD,iBAASY,OAAT,CAAiBC,WAAWA,QAAQmB,KAAR,EAA5B;;AAEAhC,mBAAW,EAAX;AACH;;AAEDC,eAAW;AACPiB,oBAAYA,UADL;AAEPc,eAAYA;AAFL,KAAX;;AAKA,WAAO/B,QAAP;AACH;;AAEDH,0BAA0BoC,qBAA1B,GAAkD,2BAAlD;AACA,eAAeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoCvC,yBAApC,CAAf,C,CAA+E","file":"MetricsHandlersController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\n\nfunction MetricsHandlersController(config) {\n\n    config = config || {};\n    let handlers = [];\n\n    let instance;\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const Events = config.events;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        debug: config.debug,\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                let handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\n"]}