{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/RangeController.js"],"names":["CustomTimeRanges","RangeController","config","useWallClockTime","context","instance","ranges","mediaElement","initialize","rs","length","forEach","r","start","starttime","end","duration","add","_useWallClockTime","reset","clear","setup","create","isEnabled","numRanges","time","Date","getTime","currentTime","i","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,gBAAP,MAA6B,8BAA7B;;AAEA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;;AAE7BA,aAASA,UAAU,EAAnB;AACA,QAAIC,mBAAmB,KAAvB;AACA,QAAIC,UAAU,KAAKA,OAAnB;AACA,QAAIC,QAAJ,EACIC,MADJ;;AAGA,QAAIC,eAAeL,OAAOK,YAA1B;;AAEA,aAASC,UAAT,CAAoBC,EAApB,EAAwB;AACpB,YAAIA,MAAMA,GAAGC,MAAb,EAAqB;AACjBD,eAAGE,OAAH,CAAWC,KAAK;AACZ,oBAAIC,QAAQD,EAAEE,SAAd;AACA,oBAAIC,MAAMF,QAAQD,EAAEI,QAApB;;AAEAV,uBAAOW,GAAP,CAAWJ,KAAX,EAAkBE,GAAlB;AACH,aALD;;AAOAZ,+BAAmB,CAAC,CAACM,GAAG,CAAH,EAAMS,iBAA3B;AACH;AACJ;;AAED,aAASC,KAAT,GAAiB;AACbb,eAAOc,KAAP;AACH;;AAED,aAASC,KAAT,GAAiB;AACbf,iBAASN,iBAAiBI,OAAjB,EAA0BkB,MAA1B,EAAT;AACH;;AAED,aAASC,SAAT,GAAqB;AACjB,YAAIC,YAAYlB,OAAOI,MAAvB;AACA,YAAIe,IAAJ;;AAEA,YAAI,CAACD,SAAL,EAAgB;AACZ,mBAAO,IAAP;AACH;;AAED;AACA;AACAC,eAAOtB,mBACE,IAAIuB,IAAJ,GAAWC,OAAX,KAAuB,IADzB,GAECpB,aAAaqB,WAFrB;;AAIA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,SAApB,EAA+BK,KAAK,CAApC,EAAuC;AACnC,gBAAIhB,QAAQP,OAAOO,KAAP,CAAagB,CAAb,CAAZ;AACA,gBAAId,MAAMT,OAAOS,GAAP,CAAWc,CAAX,CAAV;;AAEA,gBAAKhB,SAASY,IAAV,IAAoBA,OAAOV,GAA/B,EAAqC;AACjC,uBAAO,IAAP;AACH;AACJ;;AAED,eAAO,KAAP;AACH;;AAEDV,eAAW;AACPG,oBAAYA,UADL;AAEPW,eAAYA,KAFL;AAGPI,mBAAYA;AAHL,KAAX;;AAMAF;;AAEA,WAAOhB,QAAP;AACH;;AAEDJ,gBAAgB6B,qBAAhB,GAAwC,iBAAxC;AACA,eAAeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoChC,eAApC,CAAf,C,CAAqE","file":"RangeController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    config = config || {};\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                let start = r.starttime;\n                let end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        let numRanges = ranges.length;\n        let time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (let i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\n"]}