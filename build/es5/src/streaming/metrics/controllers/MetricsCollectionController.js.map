{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsCollectionController.js"],"names":["MetricsController","ManifestParsing","MetricsReportingEvents","MetricsCollectionController","config","metricsControllers","context","eventBus","events","update","e","error","controllersToRemove","Object","keys","metrics","getInstance","dashManifestModel","constants","getMetrics","manifest","forEach","m","key","JSON","stringify","hasOwnProperty","controller","create","initialize","splice","c","reset","trigger","METRICS_INITIALISATION_COMPLETE","resetMetricsControllers","setup","on","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","off","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,SAASC,2BAAT,CAAqCC,MAArC,EAA6C;;AAEzCA,aAASA,UAAU,EAAnB;AACA,QAAIC,qBAAqB,EAAzB;;AAEA,QAAIC,UAAU,KAAKA,OAAnB;AACA,QAAIC,WAAWH,OAAOG,QAAtB;AACA,UAAMC,SAASJ,OAAOI,MAAtB;;AAEA,aAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACf,YAAIA,EAAEC,KAAN,EAAa;AACT;AACH;;AAED;AACA,YAAIC,sBAAsBC,OAAOC,IAAP,CAAYT,kBAAZ,CAA1B;;AAEA,cAAMU,UAAUd,gBAAgBK,OAAhB,EAAyBU,WAAzB,CAAqC;AACjDC,+BAAmBb,OAAOa,iBADuB;AAEjDC,uBAAWd,OAAOc;AAF+B,SAArC,EAGbC,UAHa,CAGFT,EAAEU,QAHA,CAAhB;;AAKAL,gBAAQM,OAAR,CAAgBC,KAAK;AACjB,kBAAMC,MAAMC,KAAKC,SAAL,CAAeH,CAAf,CAAZ;;AAEA,gBAAI,CAACjB,mBAAmBqB,cAAnB,CAAkCH,GAAlC,CAAL,EAA6C;AACzC,oBAAI;AACA,wBAAII,aAAa3B,kBAAkBM,OAAlB,EAA2BsB,MAA3B,CAAkCxB,MAAlC,CAAjB;AACAuB,+BAAWE,UAAX,CAAsBP,CAAtB;AACAjB,uCAAmBkB,GAAnB,IAA0BI,UAA1B;AACH,iBAJD,CAIE,OAAOjB,CAAP,EAAU;AACR;AACH;AACJ,aARD,MAQO;AACH;AACAE,oCAAoBkB,MAApB,CAA2BP,GAA3B,EAAgC,CAAhC;AACH;AACJ,SAfD;;AAiBA;AACAX,4BAAoBS,OAApB,CAA4BU,KAAK;AAC7B1B,+BAAmB0B,CAAnB,EAAsBC,KAAtB;AACA,mBAAO3B,mBAAmB0B,CAAnB,CAAP;AACH,SAHD;;AAKAxB,iBAAS0B,OAAT,CACI/B,uBAAuBgC,+BAD3B;AAGH;;AAED,aAASC,uBAAT,GAAmC;AAC/BtB,eAAOC,IAAP,CAAYT,kBAAZ,EAAgCgB,OAAhC,CAAwCE,OAAO;AAC3ClB,+BAAmBkB,GAAnB,EAAwBS,KAAxB;AACH,SAFD;;AAIA3B,6BAAqB,EAArB;AACH;;AAED,aAAS+B,KAAT,GAAiB;AACb7B,iBAAS8B,EAAT,CAAY7B,OAAO8B,gBAAnB,EAAqC7B,MAArC;AACAF,iBAAS8B,EAAT,CAAY7B,OAAO+B,wBAAnB,EAA6CJ,uBAA7C;AACH;;AAED,aAASH,KAAT,GAAiB;AACbzB,iBAASiC,GAAT,CAAahC,OAAO8B,gBAApB,EAAsC7B,MAAtC;AACAF,iBAASiC,GAAT,CAAahC,OAAO+B,wBAApB,EAA8CJ,uBAA9C;AACH;;AAEDC;;AAEA,WAAO;AACHJ,eAAOA;AADJ,KAAP;AAGH;;AAED7B,4BAA4BsC,qBAA5B,GAAoD,6BAApD;AACA,eAAeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoCzC,2BAApC,CAAf,C,CAAiF","file":"MetricsCollectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction MetricsCollectionController(config) {\n\n    config = config || {};\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            dashManifestModel: config.dashManifestModel,\n            constants: config.constants\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(events.MANIFEST_UPDATED, update);\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    function reset() {\n        eventBus.off(events.MANIFEST_UPDATED, update);\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    setup();\n\n    return {\n        reset: reset\n    };\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\n"]}