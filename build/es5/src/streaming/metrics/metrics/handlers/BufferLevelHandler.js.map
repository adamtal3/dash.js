{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/BufferLevelHandler.js"],"names":["HandlerHelpers","BufferLevelHandler","config","instance","reportingController","n","name","interval","lastReportedTime","context","handlerHelpers","getInstance","storedVOs","metricsConstants","getLowestBufferLevelVO","Object","keys","map","key","reduce","a","b","level","e","intervalCallback","vo","t","report","initialize","basename","rc","n_ms","validateN","reconstructFullMetricName","setInterval","reset","clearInterval","handleNewMetric","metric","type","BUFFER_LEVEL","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,cAAP,MAA2B,4BAA3B;;AAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;;AAEhCA,aAASA,UAAU,EAAnB;AACA,QAAIC,QAAJ,EACIC,mBADJ,EAEIC,CAFJ,EAGIC,IAHJ,EAIIC,QAJJ,EAKIC,gBALJ;;AAOA,QAAIC,UAAU,KAAKA,OAAnB;AACA,QAAIC,iBAAiBV,eAAeS,OAAf,EAAwBE,WAAxB,EAArB;;AAEA,QAAIC,YAAY,EAAhB;;AAEA,UAAMC,mBAAmBX,OAAOW,gBAAhC;;AAEA,aAASC,sBAAT,GAAkC;AAC9B,YAAI;AACA,mBAAOC,OAAOC,IAAP,CAAYJ,SAAZ,EAAuBK,GAAvB,CACHC,OAAON,UAAUM,GAAV,CADJ,EAELC,MAFK,CAGH,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACN,uBAAQD,EAAEE,KAAF,GAAUD,EAAEC,KAAb,GAAsBF,CAAtB,GAA0BC,CAAjC;AACH,aALE,CAAP;AAOH,SARD,CAQE,OAAOE,CAAP,EAAU;AACR;AACH;AACJ;;AAED,aAASC,gBAAT,GAA4B;AACxB,YAAIC,KAAKX,wBAAT;;AAEA,YAAIW,EAAJ,EAAQ;AACJ,gBAAIjB,qBAAqBiB,GAAGC,CAA5B,EAA+B;AAC3BlB,mCAAmBiB,GAAGC,CAAtB;AACAtB,oCAAoBuB,MAApB,CAA2BrB,IAA3B,EAAiCmB,EAAjC;AACH;AACJ;AACJ;;AAED,aAASG,UAAT,CAAoBC,QAApB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAwC;AACpC,YAAID,EAAJ,EAAQ;AACJ;AACA;AACAzB,gBAAIK,eAAesB,SAAf,CAAyBD,IAAzB,CAAJ;AACA3B,kCAAsB0B,EAAtB;AACAxB,mBAAOI,eAAeuB,yBAAf,CAAyCJ,QAAzC,EAAmDE,IAAnD,CAAP;AACAxB,uBAAW2B,YAAYV,gBAAZ,EAA8BnB,CAA9B,CAAX;AACH;AACJ;;AAED,aAAS8B,KAAT,GAAiB;AACbC,sBAAc7B,QAAd;AACAA,mBAAW,IAAX;AACAF,YAAI,CAAJ;AACAD,8BAAsB,IAAtB;AACAI,2BAAmB,IAAnB;AACH;;AAED,aAAS6B,eAAT,CAAyBC,MAAzB,EAAiCb,EAAjC,EAAqCc,IAArC,EAA2C;AACvC,YAAID,WAAWzB,iBAAiB2B,YAAhC,EAA8C;AAC1C5B,sBAAU2B,IAAV,IAAkBd,EAAlB;AACH;AACJ;;AAEDtB,eAAW;AACPyB,oBAAoBA,UADb;AAEPO,eAAoBA,KAFb;AAGPE,yBAAoBA;AAHb,KAAX;;AAMA,WAAOlC,QAAP;AACH;;AAEDF,mBAAmBwC,qBAAnB,GAA2C,oBAA3C;AACA,eAAeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoC3C,kBAApC,CAAf,C,CAAwE","file":"BufferLevelHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n"]}