{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/HttpListHandler.js"],"names":["HandlerHelpers","HttpListHandler","config","instance","reportingController","n","type","name","interval","storedVos","handlerHelpers","context","getInstance","metricsConstants","intervalCallback","vos","length","report","initialize","basename","rc","n_ms","requestType","validateN","reconstructFullMetricName","setInterval","reset","clearInterval","handleNewMetric","metric","vo","HTTP_REQUEST","push","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,cAAP,MAA2B,4BAA3B;;AAEA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;;AAE7BA,aAASA,UAAU,EAAnB;AACA,QAAIC,QAAJ,EACIC,mBADJ,EAEIC,CAFJ,EAGIC,IAHJ,EAIIC,IAJJ,EAKIC,QALJ;;AAOA,QAAIC,YAAY,EAAhB;;AAEA,QAAIC,iBAAiBV,eAAe,KAAKW,OAApB,EAA6BC,WAA7B,EAArB;;AAEA,UAAMC,mBAAmBX,OAAOW,gBAAhC;;AAEA,aAASC,gBAAT,GAA4B;AACxB,YAAIC,MAAMN,SAAV;;AAEA,YAAIM,IAAIC,MAAR,EAAgB;AACZ,gBAAIZ,mBAAJ,EAAyB;AACrBA,oCAAoBa,MAApB,CAA2BV,IAA3B,EAAiCQ,GAAjC;AACH;AACJ;;AAEDN,oBAAY,EAAZ;AACH;;AAED,aAASS,UAAT,CAAoBC,QAApB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqD;AACjD,YAAIF,EAAJ,EAAQ;;AAEJ;AACA;AACAf,gBAAIK,eAAea,SAAf,CAAyBF,IAAzB,CAAJ;;AAEAjB,kCAAsBgB,EAAtB;;AAEA,gBAAIE,eAAeA,YAAYN,MAA/B,EAAuC;AACnCV,uBAAOgB,WAAP;AACH;;AAEDf,mBAAOG,eAAec,yBAAf,CACHL,QADG,EAEHE,IAFG,EAGHC,WAHG,CAAP;;AAMAd,uBAAWiB,YAAYX,gBAAZ,EAA8BT,CAA9B,CAAX;AACH;AACJ;;AAED,aAASqB,KAAT,GAAiB;AACbC,sBAAcnB,QAAd;AACAA,mBAAW,IAAX;AACAH,YAAI,IAAJ;AACAC,eAAO,IAAP;AACAG,oBAAY,EAAZ;AACAL,8BAAsB,IAAtB;AACH;;AAED,aAASwB,eAAT,CAAyBC,MAAzB,EAAiCC,EAAjC,EAAqC;AACjC,YAAID,WAAWhB,iBAAiBkB,YAAhC,EAA8C;AAC1C,gBAAI,CAACzB,IAAD,IAAUA,SAASwB,GAAGxB,IAA1B,EAAiC;AAC7BG,0BAAUuB,IAAV,CAAeF,EAAf;AACH;AACJ;AACJ;;AAED3B,eAAW;AACPe,oBAAoBA,UADb;AAEPQ,eAAoBA,KAFb;AAGPE,yBAAoBA;AAHb,KAAX;;AAMA,WAAOzB,QAAP;AACH;;AAEDF,gBAAgBgC,qBAAhB,GAAwC,iBAAxC;AACA,eAAeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoCnC,eAApC,CAAf,C,CAAqE","file":"HttpListHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction HttpListHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        type,\n        name,\n        interval;\n\n    let storedVos = [];\n\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\n\n    const metricsConstants = config.metricsConstants;\n\n    function intervalCallback() {\n        var vos = storedVos;\n\n        if (vos.length) {\n            if (reportingController) {\n                reportingController.report(name, vos);\n            }\n        }\n\n        storedVos = [];\n    }\n\n    function initialize(basename, rc, n_ms, requestType) {\n        if (rc) {\n\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n\n            reportingController = rc;\n\n            if (requestType && requestType.length) {\n                type = requestType;\n            }\n\n            name = handlerHelpers.reconstructFullMetricName(\n                basename,\n                n_ms,\n                requestType\n            );\n\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = null;\n        type = null;\n        storedVos = [];\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        if (metric === metricsConstants.HTTP_REQUEST) {\n            if (!type || (type === vo.type)) {\n                storedVos.push(vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexport default dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */\n"]}