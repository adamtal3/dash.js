{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js"],"names":["MetricsReportingEvents","DVBErrorsHandler","config","instance","reportingController","eventBus","metricsConstants","onInitialisationComplete","off","METRICS_INITIALISATION_COMPLETE","trigger","BECAME_REPORTING_PLAYER","initialize","unused","rc","on","reset","handleNewMetric","metric","vo","DVB_ERRORS","report","dashjs","FactoryMaker","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,sBAAP,MAAmC,8BAAnC;;AAEA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;;AAE9BA,aAASA,UAAU,EAAnB;AACA,QAAIC,QAAJ,EACIC,mBADJ;;AAGA,QAAIC,WAAWH,OAAOG,QAAtB;AACA,UAAMC,mBAAmBJ,OAAOI,gBAAhC;;AAEA,aAASC,wBAAT,GAAoC;AAChC;AACAF,iBAASG,GAAT,CACIR,uBAAuBS,+BAD3B,EAEIF,wBAFJ,EAGI,IAHJ;;AAMA;AACA;AACAF,iBAASK,OAAT,CACIV,uBAAuBW,uBAD3B;AAGH;;AAED,aAASC,UAAT,CAAoBC,MAApB,EAA4BC,EAA5B,EAAgC;AAC5B,YAAIA,EAAJ,EAAQ;AACJV,kCAAsBU,EAAtB;;AAEAT,qBAASU,EAAT,CACIf,uBAAuBS,+BAD3B,EAEIF,wBAFJ,EAGI,IAHJ;AAKH;AACJ;;AAED,aAASS,KAAT,GAAiB;AACbZ,8BAAsB,IAAtB;AACH;;AAED,aAASa,eAAT,CAAyBC,MAAzB,EAAiCC,EAAjC,EAAqC;AACjC;AACA,YAAID,WAAWZ,iBAAiBc,UAAhC,EAA4C;AACxC,gBAAIhB,mBAAJ,EAAyB;AACrBA,oCAAoBiB,MAApB,CAA2BH,MAA3B,EAAmCC,EAAnC;AACH;AACJ;AACJ;;AAEDhB,eAAW;AACPS,oBAAoBA,UADb;AAEPI,eAAoBA,KAFb;AAGPC,yBAAoBA;AAHb,KAAX;;AAMA,WAAOd,QAAP;AACH;;AAED,eAAemB,OAAOC,YAAP,CAAoBC,eAApB,CAAoCvB,gBAApC,CAAf,C,CAAsE","file":"DVBErrorsHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n    const metricsConstants = config.metricsConstants;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\n        );\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\n"]}