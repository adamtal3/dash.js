{"version":3,"sources":["../../../../../src/streaming/metrics/MetricsReporting.js"],"names":["DVBErrorsTranslator","MetricsReportingEvents","MetricsCollectionController","MetricsHandlerFactory","ReportingFactory","MetricsReporting","context","instance","dvbErrorsTranslator","createMetricsReporting","config","getInstance","eventBus","metricsModel","metricsConstants","events","create","getReportingFactory","getMetricsHandlerFactory","__dashjs_factory_name","factory","dashjs","FactoryMaker","getClassFactory","updateClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA,MAAOA,oBAAP,KAAgC,6BAAhC,CACA,MAAOC,uBAAP,KAAmC,0BAAnC,CACA,MAAOC,4BAAP,KAAwC,2CAAxC,CACA,MAAOC,sBAAP,KAAkC,iCAAlC,CACA,MAAOC,iBAAP,KAA6B,8BAA7B,CAEA,QAASC,iBAAT,EAA4B,CAExB,GAAIC,SAAU,KAAKA,OAAnB,CACA,GAAIC,SAAJ,CACIC,mBADJ,CAGA;;;;OAKA,QAASC,uBAAT,CAAgCC,MAAhC,CAAwC,CACpCF,oBAAsBR,oBAAoBM,OAApB,EAA6BK,WAA7B,CAAyC,CAC3DC,SAAUF,OAAOE,QAD0C,CAE3DC,aAAcH,OAAOG,YAFsC,CAG3DC,iBAAkBJ,OAAOI,gBAHkC,CAI3DC,OAAQL,OAAOK,MAJ4C,CAAzC,CAAtB,CAOA,MAAOb,6BAA4BI,OAA5B,EAAqCU,MAArC,CAA4CN,MAA5C,CAAP,CACH,CAED;;;OAIA,QAASO,oBAAT,EAA+B,CAC3B,MAAOb,kBAAiBE,OAAjB,EAA0BK,WAA1B,EAAP,CACH,CAED;;;OAIA,QAASO,yBAAT,EAAoC,CAChC,MAAOf,uBAAsBG,OAAtB,EAA+BK,WAA/B,EAAP,CACH,CAEDJ,SAAW,CACPE,uBAA4BA,sBADrB,CAEPQ,oBAA4BA,mBAFrB,CAGPC,yBAA4BA,wBAHrB,CAAX,CAMA,MAAOX,SAAP,CACH,CAEDF,iBAAiBc,qBAAjB,CAAyC,kBAAzC,CACA,KAAMC,SAAUC,OAAOC,YAAP,CAAoBC,eAApB,CAAoClB,gBAApC,CAAhB,CAAuE,wBACvEe,QAAQL,MAAR,CAAiBd,sBAAjB,CACAoB,OAAOC,YAAP,CAAoBE,kBAApB,CAAuCnB,iBAAiBc,qBAAxD,CAA+EC,OAA/E,EAAyF,wBACzF,cAAeA,QAAf","file":"MetricsReporting.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance,\n        dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            metricsModel: config.metricsModel,\n            metricsConstants: config.metricsConstants,\n            events: config.events\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\nfactory.events = MetricsReportingEvents;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n"]}