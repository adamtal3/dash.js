{"version":3,"sources":["../../../../../src/streaming/metrics/MetricsReporting.js"],"names":["DVBErrorsTranslator","MetricsReportingEvents","MetricsCollectionController","MetricsHandlerFactory","ReportingFactory","MetricsReporting","context","instance","dvbErrorsTranslator","createMetricsReporting","config","getInstance","eventBus","metricsModel","metricsConstants","events","create","getReportingFactory","getMetricsHandlerFactory","__dashjs_factory_name","factory","dashjs","FactoryMaker","getClassFactory","updateClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,mBAAP,MAAgC,6BAAhC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,2BAAP,MAAwC,2CAAxC;AACA,OAAOC,qBAAP,MAAkC,iCAAlC;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;;AAEA,SAASC,gBAAT,GAA4B;;AAExB,QAAIC,UAAU,KAAKA,OAAnB;AACA,QAAIC,QAAJ,EACIC,mBADJ;;AAGA;;;;;AAKA,aAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AACpCF,8BAAsBR,oBAAoBM,OAApB,EAA6BK,WAA7B,CAAyC;AAC3DC,sBAAUF,OAAOE,QAD0C;AAE3DC,0BAAcH,OAAOG,YAFsC;AAG3DC,8BAAkBJ,OAAOI,gBAHkC;AAI3DC,oBAAQL,OAAOK;AAJ4C,SAAzC,CAAtB;;AAOA,eAAOb,4BAA4BI,OAA5B,EAAqCU,MAArC,CAA4CN,MAA5C,CAAP;AACH;;AAED;;;;AAIA,aAASO,mBAAT,GAA+B;AAC3B,eAAOb,iBAAiBE,OAAjB,EAA0BK,WAA1B,EAAP;AACH;;AAED;;;;AAIA,aAASO,wBAAT,GAAoC;AAChC,eAAOf,sBAAsBG,OAAtB,EAA+BK,WAA/B,EAAP;AACH;;AAEDJ,eAAW;AACPE,gCAA4BA,sBADrB;AAEPQ,6BAA4BA,mBAFrB;AAGPC,kCAA4BA;AAHrB,KAAX;;AAMA,WAAOX,QAAP;AACH;;AAEDF,iBAAiBc,qBAAjB,GAAyC,kBAAzC;AACA,MAAMC,UAAUC,OAAOC,YAAP,CAAoBC,eAApB,CAAoClB,gBAApC,CAAhB,C,CAAuE;AACvEe,QAAQL,MAAR,GAAiBd,sBAAjB;AACAoB,OAAOC,YAAP,CAAoBE,kBAApB,CAAuCnB,iBAAiBc,qBAAxD,EAA+EC,OAA/E,E,CAAyF;AACzF,eAAeA,OAAf","file":"MetricsReporting.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance,\n        dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            metricsModel: config.metricsModel,\n            metricsConstants: config.metricsConstants,\n            events: config.events\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\nfactory.events = MetricsReportingEvents;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n"]}