{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/ManifestParsing.js"],"names":["Metrics","Range","Reporting","ManifestParsing","config","instance","dashManifestModel","constants","getMetricsRangeStartTime","manifest","dynamic","range","mpd","getMpd","voPeriods","presentationStartTime","reportingStartTime","availabilityStartTime","getTime","getRegularPeriods","length","start","hasOwnProperty","START_TIME","starttime","getMetrics","metrics","Metrics_asArray","forEach","metric","metricEntry","isDynamic","getIsDynamic","Range_asArray","rangeEntry","duration","getDuration","_useWallClockTime","push","Reporting_asArray","reporting","reportingEntry","SCHEME_ID_URI","schemeIdUri","prop","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"ManifestParsing.js","sourcesContent":["import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        var mpd = dashManifestModel.getMpd(manifest);\n        var voPeriods;\n        var presentationStartTime = 0;\n        var reportingStartTime;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = this.getRegularPeriods(mpd);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        var metrics = [];\n\n        if (manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */"]}