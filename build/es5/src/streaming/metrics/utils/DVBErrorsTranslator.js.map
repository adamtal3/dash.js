{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/DVBErrorsTranslator.js"],"names":["DVBErrors","MetricsReportingEvents","DVBErrorsTranslator","config","instance","mpd","eventBus","metricModel","metricsModel","metricsConstants","Events","events","report","vo","o","key","hasOwnProperty","mpdurl","originalUrl","url","terror","Date","addDVBErrors","onManifestUpdate","e","error","manifest","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","entry","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","metric","HTTP_REQUEST","value","onPlaybackError","reason","code","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","on","MANIFEST_UPDATED","SERVICE_LOCATION_BLACKLIST_CHANGED","METRIC_ADDED","METRIC_UPDATED","PLAYBACK_ERROR","BECAME_REPORTING_PLAYER","reset","off","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"DVBErrorsTranslator.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction DVBErrorsTranslator(config) {\n\n    config = config || {};\n    let instance,\n        mpd;\n    const eventBus = config.eventBus;\n    const metricModel = config.metricsModel;\n    const metricsConstants = config.metricsConstants;\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\n    const Events = config.events;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        metricModel.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case metricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\n"]}