{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/MetricSerialiser.js"],"names":["MetricSerialiser","serialise","metric","pairs","obj","key","value","hasOwnProperty","indexOf","undefined","Array","isArray","length","forEach","v","isBuiltIn","Object","prototype","toString","call","slice","push","map","encodeURIComponent","join","Date","toISOString","Math","round","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAASA,gBAAT,GAA4B;;AAExB;AACA;AACA;AACA,aAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,YAAIC,QAAQ,EAAZ;AACA,YAAIC,MAAM,EAAV;AACA,YAAIC,GAAJ,EACIC,KADJ;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAKD,GAAL,IAAYH,MAAZ,EAAoB;AAChB,gBAAIA,OAAOK,cAAP,CAAsBF,GAAtB,KAA+BA,IAAIG,OAAJ,CAAY,GAAZ,MAAqB,CAAxD,EAA4D;AACxDF,wBAAQJ,OAAOG,GAAP,CAAR;;AAEA;AACA;AACA,oBAAKC,UAAUG,SAAX,IAA0BH,UAAU,IAAxC,EAA+C;AAC3CA,4BAAQ,EAAR;AACH;;AAED;AACA,oBAAII,MAAMC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACtB;AACA,wBAAI,CAACA,MAAMM,MAAX,EAAmB;AACf;AACH;;AAEDR,0BAAM,EAAN;;AAEAE,0BAAMO,OAAN,CAAc,UAAUC,CAAV,EAAa;AACvB,4BAAIC,YAAYC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,CAA/B,EAAkCM,KAAlC,CAAwC,CAAxC,EAA2C,CAAC,CAA5C,MAAmD,QAAnE;;AAEAhB,4BAAIiB,IAAJ,CAASN,YAAYD,CAAZ,GAAgBb,UAAUa,CAAV,CAAzB;AACH,qBAJD;;AAMAR,4BAAQF,IAAIkB,GAAJ,CAAQC,kBAAR,EAA4BC,IAA5B,CAAiC,GAAjC,CAAR;AACH,iBAfD,MAeO,IAAI,OAAOlB,KAAP,KAAiB,QAArB,EAA+B;AAClCA,4BAAQiB,mBAAmBjB,KAAnB,CAAR;AACH,iBAFM,MAEA,IAAIA,iBAAiBmB,IAArB,EAA2B;AAC9BnB,4BAAQA,MAAMoB,WAAN,EAAR;AACH,iBAFM,MAEA,IAAI,OAAOpB,KAAP,KAAiB,QAArB,EAA+B;AAClCA,4BAAQqB,KAAKC,KAAL,CAAWtB,KAAX,CAAR;AACH;;AAEDH,sBAAMkB,IAAN,CAAWhB,MAAM,GAAN,GAAYC,KAAvB;AACH;AACJ;;AAED;AACA;AACA,eAAOH,MAAMqB,IAAN,CAAW,GAAX,CAAP;AACH;;AAED,WAAO;AACHvB,mBAAWA;AADR,KAAP;AAGH;;AAEDD,iBAAiB6B,qBAAjB,GAAyC,kBAAzC;AACA,eAAeC,OAAOC,YAAP,CAAoBC,mBAApB,CAAwChC,gBAAxC,CAAf,C,CAA0E","file":"MetricSerialiser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        let pairs = [];\n        let obj = [];\n        let key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = obj.map(encodeURIComponent).join(',');\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\n"]}