{"version":3,"sources":["../../../../../src/streaming/net/XHRLoader.js"],"names":["FactoryMaker","XHRLoader","cfg","requestModifier","instance","load","httpRequest","requestStartTime","Date","request","xhr","XMLHttpRequest","open","method","url","responseType","range","setRequestHeader","requestStartDate","modifyRequestHeader","withCredentials","onload","onloadend","onend","onerror","onprogress","progress","onabort","send","response","abort","x","undefined","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,YAAP,MAAyB,yBAAzB;;AAEA;;;;;AAKA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;;AAEpBA,UAAMA,OAAO,EAAb;AACA,UAAMC,kBAAkBD,IAAIC,eAA5B;;AAEA,QAAIC,QAAJ;;AAEA,aAASC,IAAT,CAAcC,WAAd,EAA2B;;AAEvB;AACA,cAAMC,mBAAmB,IAAIC,IAAJ,EAAzB;AACA,cAAMC,UAAUH,YAAYG,OAA5B;;AAEA,YAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,YAAIE,IAAJ,CAASN,YAAYO,MAArB,EAA6BP,YAAYQ,GAAzC,EAA8C,IAA9C;;AAEA,YAAIL,QAAQM,YAAZ,EAA0B;AACtBL,gBAAIK,YAAJ,GAAmBN,QAAQM,YAA3B;AACH;;AAED,YAAIN,QAAQO,KAAZ,EAAmB;AACfN,gBAAIO,gBAAJ,CAAqB,OAArB,EAA8B,WAAWR,QAAQO,KAAjD;AACH;;AAED,YAAI,CAACP,QAAQS,gBAAb,EAA+B;AAC3BT,oBAAQS,gBAAR,GAA2BX,gBAA3B;AACH;;AAED,YAAIJ,eAAJ,EAAqB;AACjBO,kBAAMP,gBAAgBgB,mBAAhB,CAAoCT,GAApC,CAAN;AACH;;AAEDA,YAAIU,eAAJ,GAAsBd,YAAYc,eAAlC;;AAEAV,YAAIW,MAAJ,GAAaf,YAAYe,MAAzB;AACAX,YAAIY,SAAJ,GAAgBhB,YAAYiB,KAA5B;AACAb,YAAIc,OAAJ,GAAclB,YAAYkB,OAA1B;AACAd,YAAIe,UAAJ,GAAiBnB,YAAYoB,QAA7B;AACAhB,YAAIiB,OAAJ,GAAcrB,YAAYqB,OAA1B;;AAEAjB,YAAIkB,IAAJ;;AAEAtB,oBAAYuB,QAAZ,GAAuBnB,GAAvB;AACH;;AAED,aAASoB,KAAT,CAAerB,OAAf,EAAwB;AACpB,cAAMsB,IAAItB,QAAQoB,QAAlB;AACAE,UAAET,SAAF,GAAcS,EAAEP,OAAF,GAAYO,EAAEN,UAAF,GAAeO,SAAzC,CAFoB,CAEgC;AACpDD,UAAED,KAAF;AACH;;AAED1B,eAAW;AACPC,cAAMA,IADC;AAEPyB,eAAOA;AAFA,KAAX;;AAKA,WAAO1B,QAAP;AACH;;AAEDH,UAAUgC,qBAAV,GAAkC,WAAlC;;AAEA,MAAMC,UAAUlC,aAAamC,eAAb,CAA6BlC,SAA7B,CAAhB;AACA,eAAeiC,OAAf","file":"XHRLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module XHRLoader\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependencies from parent\n */\nfunction XHRLoader(cfg) {\n\n    cfg = cfg || {};\n    const requestModifier = cfg.requestModifier;\n\n    let instance;\n\n    function load(httpRequest) {\n\n        // Variables will be used in the callback functions\n        const requestStartTime = new Date();\n        const request = httpRequest.request;\n\n        let xhr = new XMLHttpRequest();\n        xhr.open(httpRequest.method, httpRequest.url, true);\n\n        if (request.responseType) {\n            xhr.responseType = request.responseType;\n        }\n\n        if (request.range) {\n            xhr.setRequestHeader('Range', 'bytes=' + request.range);\n        }\n\n        if (!request.requestStartDate) {\n            request.requestStartDate = requestStartTime;\n        }\n\n        if (requestModifier) {\n            xhr = requestModifier.modifyRequestHeader(xhr);\n        }\n\n        xhr.withCredentials = httpRequest.withCredentials;\n\n        xhr.onload = httpRequest.onload;\n        xhr.onloadend = httpRequest.onend;\n        xhr.onerror = httpRequest.onerror;\n        xhr.onprogress = httpRequest.progress;\n        xhr.onabort = httpRequest.onabort;\n\n        xhr.send();\n\n        httpRequest.response = xhr;\n    }\n\n    function abort(request) {\n        const x = request.response;\n        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\n        x.abort();\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    return instance;\n}\n\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\n\nconst factory = FactoryMaker.getClassFactory(XHRLoader);\nexport default factory;\n"]}