{"version":3,"sources":["../../../../../src/streaming/net/HTTPLoader.js"],"names":["XHRLoader","FetchLoader","HTTPRequest","FactoryMaker","Errors","DashJSError","HTTPLoader","cfg","context","errHandler","metricsModel","mediaPlayerModel","requestModifier","boxParser","useFetch","instance","requests","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","newDownloadErrorToRequestTypeMap","setup","MPD_TYPE","DOWNLOAD_ERROR_ID_MANIFEST","XLINK_EXPANSION_TYPE","DOWNLOAD_ERROR_ID_XLINK","INIT_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_INITIALIZATION","MEDIA_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_CONTENT","INDEX_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","DOWNLOAD_ERROR_ID_XLINK_CODE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","DOWNLOAD_ERROR_ID_CONTENT_CODE","internalLoad","config","remainingAttempts","request","traces","firstProgress","needFailureReport","requestStartTime","Date","lastTraceTime","lastTraceReceivedCount","httpRequest","Error","handleLoaded","success","requestStartDate","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","mediaType","type","url","response","responseURL","serviceLocation","range","status","duration","getAllResponseHeaders","responseHeaders","addManifestUpdate","onloadend","indexOf","splice","retryRequest","push","timeout","setTimeout","getRetryIntervalForType","downloadError","error","statusText","complete","progress","event","currentTime","lengthComputable","total","loaded","bytesLoaded","bytesTotal","noTrace","s","d","time","getTime","b","onload","onabort","abort","loader","window","fetch","responseType","create","modifiedUrl","modifyRequestURL","verb","HEAD","GET","withCredentials","getXHRWithCredentialsForType","method","onend","onerror","now","isNaN","delayLoadingTime","load","delayedRequest","delayTimeout","e","getRetryAttemptsForType","forEach","t","clearTimeout","x","onprogress","undefined","__dashjs_factory_name","factory","getClassFactory"],"mappings":"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","file":"HTTPLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport XHRLoader from './XHRLoader';\nimport FetchLoader from './FetchLoader';\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Errors from '../../core/errors/Errors';\nimport DashJSError from '../vo/DashJSError';\n\n/**\n * @module HTTPLoader\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependancies from parent\n */\nfunction HTTPLoader(cfg) {\n\n    cfg = cfg || {};\n\n    const context = this.context;\n    const errHandler = cfg.errHandler;\n    const metricsModel = cfg.metricsModel;\n    const mediaPlayerModel = cfg.mediaPlayerModel;\n    const requestModifier = cfg.requestModifier;\n    const boxParser = cfg.boxParser;\n    const useFetch = cfg.useFetch || false;\n\n    let instance,\n        requests,\n        delayedRequests,\n        retryRequests,\n        downloadErrorToRequestTypeMap,\n        newDownloadErrorToRequestTypeMap;\n\n    function setup() {\n        requests = [];\n        delayedRequests = [];\n        retryRequests = [];\n\n        downloadErrorToRequestTypeMap = {\n            [HTTPRequest.MPD_TYPE]: Errors.DOWNLOAD_ERROR_ID_MANIFEST,\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: Errors.DOWNLOAD_ERROR_ID_XLINK,\n            [HTTPRequest.INIT_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_INITIALIZATION,\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\n            [HTTPRequest.OTHER_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT\n        };\n\n        newDownloadErrorToRequestTypeMap = {\n            [HTTPRequest.MPD_TYPE]: Errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: Errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\n            [HTTPRequest.INIT_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.OTHER_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\n        };\n    }\n\n    function internalLoad(config, remainingAttempts) {\n        const request = config.request;\n        const traces = [];\n        let firstProgress = true;\n        let needFailureReport = true;\n        let requestStartTime = new Date();\n        let lastTraceTime = requestStartTime;\n        let lastTraceReceivedCount = 0;\n        let httpRequest;\n\n        if (!requestModifier || !metricsModel || !errHandler) {\n            throw new Error('config object is not correct or missing');\n        }\n\n        const handleLoaded = function (success) {\n            needFailureReport = false;\n\n            request.requestStartDate = requestStartTime;\n            request.requestEndDate = new Date();\n            request.firstByteDate = request.firstByteDate || requestStartTime;\n\n            if (!request.checkExistenceOnly) {\n                metricsModel.addHttpRequest(\n                    request.mediaType,\n                    null,\n                    request.type,\n                    request.url,\n                    httpRequest.response ? httpRequest.response.responseURL : null,\n                    request.serviceLocation || null,\n                    request.range || null,\n                    request.requestStartDate,\n                    request.firstByteDate,\n                    request.requestEndDate,\n                    httpRequest.response ? httpRequest.response.status : null,\n                    request.duration,\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\n                    success ? traces : null\n                );\n\n                if (request.type === HTTPRequest.MPD_TYPE) {\n                    metricsModel.addManifestUpdate('stream', request.type, request.requestStartDate, request.requestEndDate);\n                }\n            }\n        };\n\n        const onloadend = function () {\n            if (requests.indexOf(httpRequest) === -1) {\n                return;\n            } else {\n                requests.splice(requests.indexOf(httpRequest), 1);\n            }\n\n            if (needFailureReport) {\n                handleLoaded(false);\n\n                if (remainingAttempts > 0) {\n                    remainingAttempts--;\n                    let retryRequest = { config: config };\n                    retryRequests.push(retryRequest);\n                    retryRequest.timeout = setTimeout(function () {\n                        if (retryRequests.indexOf(retryRequest) === -1) {\n                            return;\n                        } else {\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\n                        }\n                        internalLoad(config, remainingAttempts);\n                    }, mediaPlayerModel.getRetryIntervalForType(request.type));\n                } else {\n                    errHandler.downloadError(\n                        downloadErrorToRequestTypeMap[request.type],\n                        request.url,\n                        request\n                    );\n\n                    errHandler.error(new DashJSError(newDownloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {request: request, response: httpRequest.response}));\n\n                    if (config.error) {\n                        config.error(request, 'error', httpRequest.response.statusText);\n                    }\n\n                    if (config.complete) {\n                        config.complete(request, httpRequest.response.statusText);\n                    }\n                }\n            }\n        };\n\n        const progress = function (event) {\n            const currentTime = new Date();\n\n            if (firstProgress) {\n                firstProgress = false;\n                if (!event.lengthComputable ||\n                    (event.lengthComputable && event.total !== event.loaded)) {\n                    request.firstByteDate = currentTime;\n                }\n            }\n\n            if (event.lengthComputable) {\n                request.bytesLoaded = event.loaded;\n                request.bytesTotal = event.total;\n            }\n\n            if (!event.noTrace) {\n                traces.push({\n                    s: lastTraceTime,\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\n                });\n\n                lastTraceTime = currentTime;\n                lastTraceReceivedCount = event.loaded;\n            }\n\n            if (config.progress && event) {\n                config.progress(event);\n            }\n        };\n\n        const onload = function () {\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\n                handleLoaded(true);\n\n                if (config.success) {\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\n                }\n\n                if (config.complete) {\n                    config.complete(request, httpRequest.response.statusText);\n                }\n            }\n        };\n\n        const onabort = function () {\n            if (config.abort) {\n                config.abort(request);\n            }\n        };\n\n        let loader;\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n            loader = FetchLoader(context).create({\n                requestModifier: requestModifier,\n                boxParser: boxParser\n            });\n        } else {\n            loader = XHRLoader(context).create({\n                requestModifier: requestModifier,\n                boxParser: boxParser\n            });\n        }\n\n        const modifiedUrl = requestModifier.modifyRequestURL(request.url);\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\n\n        httpRequest = {\n            url: modifiedUrl,\n            method: verb,\n            withCredentials: withCredentials,\n            request: request,\n            onload: onload,\n            onend: onloadend,\n            onerror: onloadend,\n            progress: progress,\n            onabort: onabort,\n            loader: loader\n        };\n\n        // Adds the ability to delay single fragment loading time to control buffer.\n        let now = new Date().getTime();\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\n            // no delay - just send\n            requests.push(httpRequest);\n            loader.load(httpRequest);\n        } else {\n            // delay\n            let delayedRequest = { httpRequest: httpRequest };\n            delayedRequests.push(delayedRequest);\n            delayedRequest.delayTimeout = setTimeout(function () {\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\n                    return;\n                } else {\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\n                }\n                try {\n                    requestStartTime = new Date();\n                    lastTraceTime = requestStartTime;\n                    requests.push(delayedRequest.httpRequest);\n                    loader.load(delayedRequest.httpRequest);\n                } catch (e) {\n                    delayedRequest.httpRequest.onerror();\n                }\n            }, (request.delayLoadingTime - now));\n        }\n    }\n\n    /**\n     * Initiates a download of the resource described by config.request\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function load(config) {\n        if (config.request) {\n            internalLoad(\n                config,\n                mediaPlayerModel.getRetryAttemptsForType(\n                    config.request.type\n                )\n            );\n        }\n    }\n\n    /**\n     * Aborts any inflight downloads\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function abort() {\n        retryRequests.forEach(t => {\n            clearTimeout(t.timeout);\n            // abort request in order to trigger LOADING_ABANDONED event\n            if (t.config.request && t.config.abort) {\n                t.config.abort(t.config.request);\n            }\n        });\n        retryRequests = [];\n\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\n        delayedRequests = [];\n\n        requests.forEach(x => {\n            // abort will trigger onloadend which we don't want\n            // when deliberately aborting inflight requests -\n            // set them to undefined so they are not called\n            x.onloadend = x.onerror = x.onprogress = undefined;\n            x.loader.abort(x);\n            x.onabort();\n        });\n        requests = [];\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    setup();\n\n    return instance;\n}\n\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\n\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\nexport default factory;\n"]}