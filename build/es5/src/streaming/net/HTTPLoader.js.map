{"version":3,"sources":["../../../../../src/streaming/net/HTTPLoader.js"],"names":["XHRLoader","FetchLoader","HTTPRequest","FactoryMaker","Errors","DashJSError","HTTPLoader","cfg","context","errHandler","metricsModel","mediaPlayerModel","requestModifier","boxParser","useFetch","instance","requests","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","newDownloadErrorToRequestTypeMap","setup","MPD_TYPE","DOWNLOAD_ERROR_ID_MANIFEST","XLINK_EXPANSION_TYPE","DOWNLOAD_ERROR_ID_XLINK","INIT_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_INITIALIZATION","MEDIA_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_CONTENT","INDEX_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","DOWNLOAD_ERROR_ID_XLINK_CODE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","DOWNLOAD_ERROR_ID_CONTENT_CODE","internalLoad","config","remainingAttempts","request","traces","firstProgress","needFailureReport","requestStartTime","Date","lastTraceTime","lastTraceReceivedCount","httpRequest","Error","handleLoaded","success","requestStartDate","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","mediaType","type","url","response","responseURL","serviceLocation","range","status","duration","getAllResponseHeaders","responseHeaders","addManifestUpdate","onloadend","indexOf","splice","retryRequest","push","timeout","setTimeout","getRetryIntervalForType","downloadError","error","statusText","complete","progress","event","currentTime","lengthComputable","total","loaded","bytesLoaded","bytesTotal","noTrace","s","d","time","getTime","b","onload","onabort","abort","loader","window","fetch","responseType","create","modifiedUrl","modifyRequestURL","verb","HEAD","GET","withCredentials","getXHRWithCredentialsForType","method","onend","onerror","now","isNaN","delayLoadingTime","load","delayedRequest","delayTimeout","e","getRetryAttemptsForType","forEach","t","clearTimeout","x","onprogress","undefined","__dashjs_factory_name","factory","getClassFactory"],"mappings":"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","file":"HTTPLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport XHRLoader from './XHRLoader';\nimport FetchLoader from './FetchLoader';\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Errors from '../../core/errors/Errors';\nimport DashJSError from '../vo/DashJSError';\n\n/**\n * @module HTTPLoader\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependancies from parent\n */\nfunction HTTPLoader(cfg) {\n\n    cfg = cfg || {};\n\n    const context = this.context;\n    const errHandler = cfg.errHandler;\n    const metricsModel = cfg.metricsModel;\n    const mediaPlayerModel = cfg.mediaPlayerModel;\n    const requestModifier = cfg.requestModifier;\n    const boxParser = cfg.boxParser;\n    const useFetch = cfg.useFetch || false;\n\n    let instance,\n        requests,\n        delayedRequests,\n        retryRequests,\n        downloadErrorToRequestTypeMap,\n        newDownloadErrorToRequestTypeMap;\n\n    function setup() {\n        requests = [];\n        delayedRequests = [];\n        retryRequests = [];\n\n        downloadErrorToRequestTypeMap = {\n            [HTTPRequest.MPD_TYPE]: Errors.DOWNLOAD_ERROR_ID_MANIFEST,\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: Errors.DOWNLOAD_ERROR_ID_XLINK,\n            [HTTPRequest.INIT_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_INITIALIZATION,\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\n            [HTTPRequest.OTHER_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT\n        };\n\n        newDownloadErrorToRequestTypeMap = {\n            [HTTPRequest.MPD_TYPE]: Errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: Errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\n            [HTTPRequest.INIT_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.OTHER_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\n        };\n    }\n\n    function internalLoad(config, remainingAttempts) {\n        const request = config.request;\n        const traces = [];\n        let firstProgress = true;\n        let needFailureReport = true;\n        let requestStartTime = new Date();\n        let lastTraceTime = requestStartTime;\n        let lastTraceReceivedCount = 0;\n        let httpRequest;\n\n        if (!requestModifier || !metricsModel || !errHandler) {\n            throw new Error('config object is not correct or missing');\n        }\n\n        const handleLoaded = function (success) {\n            needFailureReport = false;\n\n            request.requestStartDate = requestStartTime;\n            request.requestEndDate = new Date();\n            request.firstByteDate = request.firstByteDate || requestStartTime;\n\n            if (!request.checkExistenceOnly) {\n                metricsModel.addHttpRequest(\n                    request.mediaType,\n                    null,\n                    request.type,\n                    request.url,\n                    httpRequest.response ? httpRequest.response.responseURL : null,\n                    request.serviceLocation || null,\n                    request.range || null,\n                    request.requestStartDate,\n                    request.firstByteDate,\n                    request.requestEndDate,\n                    httpRequest.response ? httpRequest.response.status : null,\n                    request.duration,\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\n                    success ? traces : null\n                );\n\n                if (request.type === HTTPRequest.MPD_TYPE) {\n                    metricsModel.addManifestUpdate('stream', request.type, request.requestStartDate, request.requestEndDate);\n                }\n            }\n        };\n\n        const onloadend = function () {\n            if (requests.indexOf(httpRequest) === -1) {\n                return;\n            } else {\n                requests.splice(requests.indexOf(httpRequest), 1);\n            }\n\n            if (needFailureReport) {\n                handleLoaded(false);\n\n                if (remainingAttempts > 0) {\n                    remainingAttempts--;\n                    let retryRequest = { config: config };\n                    retryRequests.push(retryRequest);\n                    retryRequest.timeout = setTimeout(function () {\n                        if (retryRequests.indexOf(retryRequest) === -1) {\n                            return;\n                        } else {\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\n                        }\n                        internalLoad(config, remainingAttempts);\n                    }, mediaPlayerModel.getRetryIntervalForType(request.type));\n                } else {\n                    errHandler.downloadError(\n                        downloadErrorToRequestTypeMap[request.type],\n                        request.url,\n                        request\n                    );\n\n                    errHandler.error(new DashJSError(newDownloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {request: request, response: httpRequest.response}));\n\n                    if (config.error) {\n                        config.error(request, 'error', httpRequest.response.statusText);\n                    }\n\n                    if (config.complete) {\n                        config.complete(request, httpRequest.response.statusText);\n                    }\n                }\n            }\n        };\n\n        const progress = function (event) {\n            const currentTime = new Date();\n\n            if (firstProgress) {\n                firstProgress = false;\n                if (!event.lengthComputable ||\n                    (event.lengthComputable && event.total !== event.loaded)) {\n                    request.firstByteDate = currentTime;\n                }\n            }\n\n            if (event.lengthComputable) {\n                request.bytesLoaded = event.loaded;\n                request.bytesTotal = event.total;\n            }\n\n            if (!event.noTrace) {\n                traces.push({\n                    s: lastTraceTime,\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\n                });\n\n                lastTraceTime = currentTime;\n                lastTraceReceivedCount = event.loaded;\n            }\n\n            if (config.progress && event) {\n                config.progress(event);\n            }\n        };\n\n        const onload = function () {\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\n                handleLoaded(true);\n\n                if (config.success) {\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\n                }\n\n                if (config.complete) {\n                    config.complete(request, httpRequest.response.statusText);\n                }\n            }\n        };\n\n        const onabort = function () {\n            if (config.abort) {\n                config.abort(request);\n            }\n        };\n\n        let loader;\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n            loader = FetchLoader(context).create({\n                requestModifier: requestModifier,\n                boxParser: boxParser\n            });\n        } else {\n            loader = XHRLoader(context).create({\n                requestModifier: requestModifier,\n                boxParser: boxParser\n            });\n        }\n\n        const modifiedUrl = requestModifier.modifyRequestURL(request.url);\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\n\n        httpRequest = {\n            url: modifiedUrl,\n            method: verb,\n            withCredentials: withCredentials,\n            request: request,\n            onload: onload,\n            onend: onloadend,\n            onerror: onloadend,\n            progress: progress,\n            onabort: onabort,\n            loader: loader\n        };\n\n        // Adds the ability to delay single fragment loading time to control buffer.\n        let now = new Date().getTime();\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\n            // no delay - just send\n            requests.push(httpRequest);\n            loader.load(httpRequest);\n        } else {\n            // delay\n            let delayedRequest = { httpRequest: httpRequest };\n            delayedRequests.push(delayedRequest);\n            delayedRequest.delayTimeout = setTimeout(function () {\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\n                    return;\n                } else {\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\n                }\n                try {\n                    requestStartTime = new Date();\n                    lastTraceTime = requestStartTime;\n                    requests.push(delayedRequest.httpRequest);\n                    loader.load(delayedRequest.httpRequest);\n                } catch (e) {\n                    delayedRequest.httpRequest.onerror();\n                }\n            }, (request.delayLoadingTime - now));\n        }\n    }\n\n    /**\n     * Initiates a download of the resource described by config.request\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function load(config) {\n        if (config.request) {\n            internalLoad(\n                config,\n                mediaPlayerModel.getRetryAttemptsForType(\n                    config.request.type\n                )\n            );\n        }\n    }\n\n    /**\n     * Aborts any inflight downloads\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function abort() {\n        retryRequests.forEach(t => {\n            clearTimeout(t.timeout);\n            // abort request in order to trigger LOADING_ABANDONED event\n            if (t.config.request && t.config.abort) {\n                t.config.abort(t.config.request);\n            }\n        });\n        retryRequests = [];\n\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\n        delayedRequests = [];\n\n        requests.forEach(x => {\n            // abort will trigger onloadend which we don't want\n            // when deliberately aborting inflight requests -\n            // set them to undefined so they are not called\n            x.onloadend = x.onerror = x.onprogress = undefined;\n            x.loader.abort(x);\n            x.onabort();\n        });\n        requests = [];\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    setup();\n\n    return instance;\n}\n\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\n\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\nexport default factory;\n"]}