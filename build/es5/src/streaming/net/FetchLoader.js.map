{"version":3,"sources":["../../../../../src/streaming/net/FetchLoader.js"],"names":["FactoryMaker","FetchLoader","cfg","requestModifier","boxParser","instance","load","httpRequest","requestStartTime","Date","request","headers","Headers","range","append","requestStartDate","modifyRequestHeader","setRequestHeader","header","value","abortController","window","AbortController","reqOptions","method","credentials","withCredentials","undefined","signal","fetch","url","then","response","status","statusText","responseURL","ok","onerror","responseHeaders","key","keys","get","body","arrayBuffer","buffer","event","loaded","byteLength","total","stream","progress","onload","onend","totalBytes","parseInt","bytesReceived","signaledFirstByte","remaining","Uint8Array","offset","reader","getReader","downLoadedData","processResult","done","isNaN","lengthComputable","time","calculateDownloadedTime","length","concatTypedArray","push","ts","now","bytes","boxesInfo","findLastTopIsoBoxCompleted","found","end","lastCompletedOffset","size","data","subarray","noTrace","read","catch","e","result","set","abort","cancel","datum","filter","avgTimeDistance","forEach","index","next","distance","__dashjs_factory_name","factory","getClassFactory"],"mappings":"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","file":"FetchLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n* @module FetchLoader\n* @description Manages download of resources via HTTP using fetch.\n* @param {Object} cfg - dependencies from parent\n*/\nfunction FetchLoader(cfg) {\n\n    cfg = cfg || {};\n    const requestModifier = cfg.requestModifier;\n    const boxParser = cfg.boxParser;\n\n    let instance;\n\n    function load(httpRequest) {\n\n        // Variables will be used in the callback functions\n        const requestStartTime = new Date();\n        const request = httpRequest.request;\n\n        const headers = new Headers(); /*jshint ignore:line*/\n        if (request.range) {\n            headers.append('Range', 'bytes=' + request.range);\n        }\n\n        if (!request.requestStartDate) {\n            request.requestStartDate = requestStartTime;\n        }\n\n        if (requestModifier) {\n            // modifyRequestHeader expects a XMLHttpRequest object so,\n            // to keep backward compatibility, we should expose a setRequestHeader method\n            // TODO: Remove RequestModifier dependency on XMLHttpRequest object and define\n            // a more generic way to intercept/modify requests\n            requestModifier.modifyRequestHeader({\n                setRequestHeader: function (header, value) {\n                    headers.append(header, value);\n                }\n            });\n        }\n\n        let abortController;\n        if (typeof window.AbortController === 'function') {\n            abortController = new AbortController(); /*jshint ignore:line*/\n            httpRequest.abortController = abortController;\n        }\n\n        const reqOptions = {\n            method: httpRequest.method,\n            headers: headers,\n            credentials: httpRequest.withCredentials ? 'include' : undefined,\n            signal: abortController ? abortController.signal : undefined\n        };\n\n        fetch(httpRequest.url, reqOptions).then(function (response) {\n            if (!httpRequest.response) {\n                httpRequest.response = {};\n            }\n            httpRequest.response.status = response.status;\n            httpRequest.response.statusText = response.statusText;\n            httpRequest.response.responseURL = response.url;\n\n            if (!response.ok) {\n                httpRequest.onerror();\n            }\n\n            let responseHeaders = '';\n            for (const key of response.headers.keys()) {\n                responseHeaders += key + ': ' + response.headers.get(key) + '\\n';\n            }\n            httpRequest.response.responseHeaders = responseHeaders;\n\n            if (!response.body) {\n                // Fetch returning a ReadableStream response body is not currently supported by all browsers.\n                // Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n                // If it is not supported, returning the whole segment when it's ready (as xhr)\n                return response.arrayBuffer().then(function (buffer) {\n                    httpRequest.response.response = buffer;\n                    const event = {\n                        loaded: buffer.byteLength,\n                        total: buffer.byteLength,\n                        stream: false\n                    };\n                    httpRequest.progress(event);\n                    httpRequest.onload();\n                    httpRequest.onend();\n                    return;\n                });\n            }\n\n            const totalBytes = parseInt(response.headers.get('Content-Length'), 10);\n            let bytesReceived = 0;\n            let signaledFirstByte = false;\n            let remaining = new Uint8Array();\n            let offset = 0;\n\n            httpRequest.reader = response.body.getReader();\n            let downLoadedData = [];\n\n            const processResult = function ({ value, done }) {\n                if (done) {\n                    if (remaining) {\n                        // If there is pending data, call progress so network metrics\n                        // are correctly generated\n                        // Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress\n                        httpRequest.progress({\n                            loaded: bytesReceived,\n                            total: isNaN(totalBytes) ? bytesReceived : totalBytes,\n                            lengthComputable: true,\n                            time: calculateDownloadedTime(downLoadedData, bytesReceived),\n                            stream: true\n                        });\n\n                        httpRequest.response.response = remaining.buffer;\n                    }\n                    httpRequest.onload();\n                    httpRequest.onend();\n                    return;\n                }\n\n                if (value && value.length > 0) {\n                    remaining = concatTypedArray(remaining, value);\n                    bytesReceived += value.length;\n                    downLoadedData.push({\n                        ts: Date.now(),\n                        bytes: value.length\n                    });\n\n                    const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moov', 'mdat'], remaining, offset);\n                    if (boxesInfo.found) {\n                        const end = boxesInfo.lastCompletedOffset + boxesInfo.size;\n\n                        // If we are going to pass full buffer, avoid copying it and pass\n                        // complete buffer. Otherwise clone the part of the buffer that is completed\n                        // and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array\n                        // keeps a reference to the original data\n                        let data;\n                        if (end === remaining.length) {\n                            data = remaining;\n                            remaining = new Uint8Array();\n                        } else {\n                            data = new Uint8Array(remaining.subarray(0, end));\n                            remaining = remaining.subarray(end);\n                        }\n\n                        // Announce progress but don't track traces. Throughput measures are quite unstable\n                        // when they are based in small amount of data\n                        httpRequest.progress({\n                            data: data.buffer,\n                            lengthComputable: false,\n                            noTrace: true\n                        });\n\n                        offset = 0;\n                    } else {\n                        offset = boxesInfo.lastCompletedOffset;\n\n                        // Call progress so it generates traces that will be later used to know when the first byte\n                        // were received\n                        if (!signaledFirstByte) {\n                            httpRequest.progress({\n                                lengthComputable: false,\n                                noTrace: true\n                            });\n                            signaledFirstByte = true;\n                        }\n                    }\n                }\n                read(httpRequest, processResult);\n            };\n\n            read(httpRequest, processResult);\n        })\n        .catch( function (e) {\n            if (httpRequest.onerror) {\n                httpRequest.onerror(e);\n            }\n        });\n    }\n\n    function read(httpRequest, processResult) {\n        httpRequest.reader.read()\n        .then(processResult)\n        .catch(function (e) {\n            if (httpRequest.onerror && httpRequest.response.status === 200) {\n                // Error, but response code is 200, trigger error\n                httpRequest.onerror(e);\n            }\n        });\n    }\n\n    function concatTypedArray(remaining, data) {\n        if (remaining.length === 0) {\n            return data;\n        }\n        const result = new Uint8Array(remaining.length + data.length);\n        result.set(remaining);\n        result.set(data, remaining.length);\n        return result;\n    }\n\n    function abort(request) {\n        if (request.abortController) {\n            // For firefox and edge\n            request.abortController.abort();\n        } else if (request.reader) {\n            // For Chrome\n            try {\n                request.reader.cancel();\n            } catch (e) {\n                // throw exceptions (TypeError) when reader was previously closed,\n                // for example, because a network issue\n            }\n        }\n    }\n\n    function calculateDownloadedTime(datum, bytesReceived) {\n        datum = datum.filter(data => data.bytes > ((bytesReceived / 4) / datum.length) );\n        if (datum.length > 1) {\n            let time = 0;\n            const avgTimeDistance = (datum[datum.length - 1].ts - datum[0].ts) / datum.length;\n            datum.forEach((data, index) => {\n                // To be counted the data has to be over a threshold\n                const next = datum[index + 1];\n                if (next) {\n                    const distance = next.ts - data.ts;\n                    time += distance < avgTimeDistance ? distance : 0;\n                }\n            });\n            return time;\n        }\n        return null;\n    }\n\n    instance = {\n        load: load,\n        abort: abort,\n        calculateDownloadedTime: calculateDownloadedTime\n    };\n\n    return instance;\n}\n\nFetchLoader.__dashjs_factory_name = 'FetchLoader';\n\nconst factory = FactoryMaker.getClassFactory(FetchLoader);\nexport default factory;\n"]}