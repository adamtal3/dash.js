{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel_21Jan2015.js"],"names":["ProtectionKeyController","NeedKey","ProtectionErrors","DashJSError","KeyMessage","KeySystemAccess","ProtectionConstants","ProtectionModel_21Jan2015","config","context","eventBus","events","debug","instance","logger","keySystem","videoElement","mediaKeys","sessions","eventHandler","protectionKeyController","setup","getLogger","getInstance","createEventHandler","reset","numSessions","length","session","done","removeSession","removeEventListener","setMediaKeys","then","trigger","TEARDOWN_COMPLETE","i","s","closed","closeKeySessionInternal","catch","stop","getUsable","getKeySystem","getAllInitData","retVal","initData","push","requestKeySystemAccess","ksConfigurations","requestKeySystemAccessInternal","selectKeySystem","keySystemAccess","mksa","createMediaKeys","mkeys","INTERNAL_KEY_SYSTEM_SELECTED","error","systemString","setMediaElement","mediaElement","addEventListener","setServerCertificate","serverCertificate","Error","info","SERVER_CERTIFICATE_UPDATED","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","name","createKeySession","protData","sessionType","createSession","sessionToken","createSessionToken","ks","dataType","CLEARKEY_KEYSTEM_STRING","clearkeys","generateRequest","getSessionID","KEY_SESSION_CREATED","data","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","updateKeySession","message","isClearKey","toJWK","update","KEY_ERROR","MEDIA_KEYERR_CODE","loadKeySession","sessionID","sessionId","warn","load","success","removeKeySession","remove","KEY_SESSION_REMOVED","closeKeySession","KEY_SESSION_CLOSED","idx","navigator","requestMediaKeySystemAccess","undefined","KEY_SYSTEM_ACCESS_COMPLETE","configs","PLAYREADY_KEYSTEM_STRING","persistentState","mediaKeySystemAccess","configuration","getConfiguration","close","handleEvent","event","type","ArrayBuffer","isView","buffer","NEED_KEY","key","initDataType","token","splice","parseKeyStatus","args","status","keyId","KEY_STATUSES_CHANGED","target","keyStatuses","forEach","keyStatus","arguments","INTERNAL_KEY_STATUS_CHANGED","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","INTERNAL_KEY_MESSAGE","messageType","getExpirationTime","expiration","getKeyStatuses","usable","getSessionType","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionModel_21Jan2015.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                closeKeySessionInternal(session).catch(function () {\n                    removeSession(session);\n                });\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)});\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\n        });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')});\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Insecure origins are not allowed'});\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            let systemString = keySystem.systemString;\n\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\n                systemString += '.recommendation';\n            }\n\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! ' + error.message});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)});\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable  = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n"]}