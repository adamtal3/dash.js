{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel_3Feb2014.js"],"names":["ProtectionKeyController","NeedKey","DashJSError","ProtectionErrors","KeyMessage","KeySystemConfiguration","KeySystemAccess","ProtectionModel_3Feb2014","config","context","eventBus","events","debug","api","instance","logger","videoElement","keySystem","mediaKeys","keySystemAccess","sessions","eventHandler","protectionKeyController","setup","getLogger","getInstance","createEventHandler","reset","i","length","closeKeySession","removeEventListener","needkey","trigger","TEARDOWN_COMPLETE","error","message","getKeySystem","getAllInitData","retVal","push","initData","requestKeySystemAccess","ksConfigurations","found","ksIdx","systemString","ks","configs","supportedAudio","supportedVideo","configIdx","audios","audioCapabilities","videos","videoCapabilities","audioIdx","window","MediaKeys","isTypeSupported","contentType","videoIdx","ksConfig","getKeySystemBySystemString","KEY_SYSTEM_ACCESS_COMPLETE","data","selectKeySystem","ksAccess","setMediaKeys","INTERNAL_KEY_SYSTEM_SELECTED","setMediaElement","mediaElement","addEventListener","createKeySession","protData","sessionType","cdmData","Error","capabilities","ksConfiguration","session","createSession","Uint8Array","sessionToken","createSessionToken","ready","close","getSessionID","KEY_SESSION_CREATED","updateKeySession","isClearKey","update","toJWK","splice","release","setServerCertificate","loadKeySession","removeKeySession","handleEvent","event","type","ArrayBuffer","isView","buffer","NEED_KEY","key","boundDoSetKeys","doSetKeys","VIDEO_ELEMENT_SELECTED","readyState","bind","keySession","sessionId","getExpirationTime","NaN","getSessionType","errorStr","KEY_ERROR","MEDIA_KEYERR_CODE","INTERNAL_KEY_MESSAGE","destinationURL","KEY_ADDED","KEY_SESSION_CLOSED","stop","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionModel_3Feb2014.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n"]}