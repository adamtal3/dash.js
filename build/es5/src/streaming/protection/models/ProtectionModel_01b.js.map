{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel_01b.js"],"names":["ProtectionKeyController","NeedKey","DashJSError","KeyMessage","KeySystemConfiguration","KeySystemAccess","ProtectionErrors","ProtectionModel_01b","config","context","eventBus","events","debug","api","errHandler","instance","logger","videoElement","keySystem","protectionKeyController","pendingSessions","sessions","moreSessionsAllowed","eventHandler","setup","getLogger","getInstance","createEventHandler","reset","removeEventListeners","i","length","closeKeySession","trigger","TEARDOWN_COMPLETE","getKeySystem","getAllInitData","retVal","push","initData","requestKeySystemAccess","ksConfigurations","ve","document","createElement","found","ksIdx","systemString","ks","configs","supportedAudio","supportedVideo","configIdx","videos","videoCapabilities","videoIdx","canPlayType","contentType","ksConfig","getKeySystemBySystemString","KEY_SYSTEM_ACCESS_COMPLETE","data","error","selectKeySystem","keySystemAccess","INTERNAL_KEY_SYSTEM_SELECTED","setMediaElement","mediaElement","addEventListener","keyerror","needkey","keymessage","keyadded","VIDEO_ELEMENT_SELECTED","createKeySession","Error","newSession","sessionID","getSessionID","getExpirationTime","NaN","getSessionType","generateKeyRequest","Uint8Array","updateKeySession","sessionToken","message","isClearKey","addKey","keyPairs","key","keyID","cancelKeyRequest","KEY_SESSION_CLOSED","setServerCertificate","loadKeySession","removeKeySession","handleEvent","event","type","ArrayBuffer","isView","buffer","NEED_KEY","findSessionByID","sessionId","code","MEDIA_KEYERR_CODE","msg","errorCode","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEYERR_DOMAIN_MESSAGE","systemCode","KEY_ERROR","KEY_ADDED","undefined","shift","KEY_SESSION_CREATED","mediaKeyMessageError","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_CODE","keyMessage","INTERNAL_KEY_MESSAGE","defaultURL","warn","sessionArray","len","removeEventListener","stop","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionModel_01b.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message});\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(code, msg, sessionToken)});\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE);\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n"]}