{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemW3CClearKey.js"],"names":["KeyPair","ClearKeyKeySet","CommonEncryption","ProtectionConstants","uuid","systemString","CLEARKEY_KEYSTEM_STRING","schemeIdURI","KeySystemW3CClearKey","config","instance","BASE64","logger","debug","getLogger","getClearKeysFromProtectionData","protectionData","message","clearkeySet","jsonMsg","JSON","parse","String","fromCharCode","apply","Uint8Array","keyPairs","i","kids","length","clearkeyID","clearkey","clearkeys","hasOwnProperty","Error","push","warn","getInitData","cp","parseInitDataFromContentProtection","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getCDMData","getSessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAOA,OAAP,MAAoB,eAApB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;;AAEA,MAAMC,OAAO,sCAAb;AACA,MAAMC,eAAeF,oBAAoBG,uBAAzC;AACA,MAAMC,cAAc,cAAcH,IAAlC;;AAEA,SAASI,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,QAAIC,QAAJ;AACA,UAAMC,SAASF,OAAOE,MAAtB;AACA,UAAMC,SAASH,OAAOI,KAAP,CAAaC,SAAb,CAAuBJ,QAAvB,CAAf;AACA;;;;;;;;;;AAUA,aAASK,8BAAT,CAAwCC,cAAxC,EAAwDC,OAAxD,EAAiE;AAC7D,YAAIC,cAAc,IAAlB;AACA,YAAIF,cAAJ,EAAoB;AAChB;AACA;AACA,kBAAMG,UAAUC,KAAKC,KAAL,CAAWC,OAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,IAAIC,UAAJ,CAAeR,OAAf,CAAhC,CAAX,CAAhB;AACA,kBAAMS,WAAW,EAAjB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIR,QAAQS,IAAR,CAAaC,MAAjC,EAAyCF,GAAzC,EAA8C;AAC1C,sBAAMG,aAAaX,QAAQS,IAAR,CAAaD,CAAb,CAAnB;AACA,sBAAMI,WAAYf,eAAegB,SAAf,IAA4BhB,eAAegB,SAAf,CAAyBC,cAAzB,CAAwCH,UAAxC,CAA7B,GAAoFd,eAAegB,SAAf,CAAyBF,UAAzB,CAApF,GAA2H,IAA5I;AACA,oBAAI,CAACC,QAAL,EAAe;AACX,0BAAM,IAAIG,KAAJ,CAAU,0BAA0BJ,UAA1B,GAAuC,iBAAjD,CAAN;AACH;AACD;AACAJ,yBAASS,IAAT,CAAc,IAAInC,OAAJ,CAAY8B,UAAZ,EAAwBC,QAAxB,CAAd;AACH;AACDb,0BAAc,IAAIjB,cAAJ,CAAmByB,QAAnB,CAAd;;AAEAd,mBAAOwB,IAAP,CAAY,2JAAZ;AACH;AACD,eAAOlB,WAAP;AACH;;AAED,aAASmB,WAAT,CAAqBC,EAArB,EAAyB;AACrB,eAAOpC,iBAAiBqC,kCAAjB,CAAoDD,EAApD,EAAwD3B,MAAxD,CAAP;AACH;;AAED,aAAS6B,4BAAT,GAAsC,WAAa;AAC/C,eAAO,IAAP;AACH;;AAED,aAASC,4BAAT,CAAsCxB,OAAtC,EAA+C;AAC3C,eAAO,IAAIQ,UAAJ,CAAeR,OAAf,CAAP;AACH;;AAED,aAASyB,+BAAT,GAAyC,YAAc;AACnD,eAAO,IAAP;AACH;;AAED,aAASC,UAAT,GAAsB;AAClB,eAAO,IAAP;AACH;;AAED,aAASC,YAAT,GAAsB,MAAQ;AAC1B,eAAO,IAAP;AACH;;AAEDlC,eAAW;AACPN,cAAMA,IADC;AAEPG,qBAAaA,WAFN;AAGPF,sBAAcA,YAHP;AAIPgC,qBAAaA,WAJN;AAKPG,sCAA8BA,4BALvB;AAMPC,sCAA8BA,4BANvB;AAOPC,yCAAiCA,+BAP1B;AAQPC,oBAAYA,UARL;AASPC,sBAAcA,YATP;AAUP7B,wCAAgCA;AAVzB,KAAX;;AAaA,WAAOL,QAAP;AACH;;AAEDF,qBAAqBqC,qBAArB,GAA6C,sBAA7C;AACA,eAAeC,OAAOC,YAAP,CAAoBC,mBAApB,CAAwCxC,oBAAxC,CAAf,C,CAA8E","file":"KeySystemW3CClearKey.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n"]}