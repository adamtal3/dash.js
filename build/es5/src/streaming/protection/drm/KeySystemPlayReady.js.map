{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemPlayReady.js"],"names":["CommonEncryption","ProtectionConstants","uuid","systemString","PLAYREADY_KEYSTEM_STRING","schemeIdURI","PRCDMData","protData","KeySystemPlayReady","config","instance","messageFormat","BASE64","checkConfig","hasOwnProperty","Error","getRequestHeadersFromMessage","message","msg","xmlDoc","headers","parser","DOMParser","dataview","Uint16Array","Uint8Array","String","fromCharCode","apply","parseFromString","headerNameList","getElementsByTagName","headerValueList","i","length","childNodes","nodeValue","Content","getLicenseRequestFromMessage","licenseRequest","Challenge","decode","getLicenseServerURLFromInitData","initData","data","DataView","numRecords","getUint16","offset","recordType","recordLength","recordData","slice","record","laurl","luiurl","getInitData","cpData","PSSHBoxType","playreadySystemID","byteCursor","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","parseInitDataFromContentProtection","decodeArray","pro","__text","prheader","ArrayBuffer","setUint32","set","buffer","setPlayReadyMessageFormat","format","init","protectionData","getCDMData","customData","cdmData","cdmDataBytes","push","charCodeAt","encode","replace","getSessionId","cp","sessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"KeySystemPlayReady.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // some devices (Ex: LG SmartTVs) require content-type to be defined\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=' + messageFormat;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else if (xmlDoc.getElementsByTagName('parsererror').length) {\n            // In case it is not an XML doc, return the message itself\n            // There are CDM implementations of some devices (example: some smartTVs) that\n            // return directly the challenge without wrapping it in an xml doc\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */"]}