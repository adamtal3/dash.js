{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemPlayReady.js"],"names":["CommonEncryption","ProtectionConstants","uuid","systemString","PLAYREADY_KEYSTEM_STRING","schemeIdURI","PRCDMData","protData","KeySystemPlayReady","config","instance","messageFormat","BASE64","checkConfig","hasOwnProperty","Error","getRequestHeadersFromMessage","message","msg","xmlDoc","headers","parser","DOMParser","dataview","Uint16Array","Uint8Array","String","fromCharCode","apply","parseFromString","headerNameList","getElementsByTagName","headerValueList","i","length","childNodes","nodeValue","Content","getLicenseRequestFromMessage","licenseRequest","Challenge","decode","getLicenseServerURLFromInitData","initData","data","DataView","numRecords","getUint16","offset","recordType","recordLength","recordData","slice","record","laurl","luiurl","getInitData","cpData","PSSHBoxType","playreadySystemID","byteCursor","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","parseInitDataFromContentProtection","decodeArray","pro","__text","prheader","ArrayBuffer","setUint32","set","buffer","setPlayReadyMessageFormat","format","init","protectionData","getCDMData","customData","cdmData","cdmDataBytes","push","charCodeAt","encode","replace","getSessionId","cp","sessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"KeySystemPlayReady.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // some devices (Ex: LG SmartTVs) require content-type to be defined\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=' + messageFormat;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else if (xmlDoc.getElementsByTagName('parsererror').length) {\n            // In case it is not an XML doc, return the message itself\n            // There are CDM implementations of some devices (example: some smartTVs) that\n            // return directly the challenge without wrapping it in an xml doc\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */"]}