{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionController.js"],"names":["CommonEncryption","MediaCapability","KeySystemConfiguration","ProtectionErrors","DashJSError","NEEDKEY_BEFORE_INITIALIZE_RETRIES","NEEDKEY_BEFORE_INITIALIZE_TIMEOUT","LICENSE_SERVER_REQUEST_RETRIES","LICENSE_SERVER_REQUEST_RETRY_INTERVAL","LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT","ProtectionController","config","protectionKeyController","protectionModel","eventBus","events","debug","BASE64","constants","needkeyRetries","instance","logger","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","keySystem","setup","getLogger","checkConfig","hasOwnProperty","Error","initializeForMedia","mediaInfo","on","INTERNAL_KEY_MESSAGE","onKeyMessage","INTERNAL_KEY_STATUS_CHANGED","onKeyStatusChanged","push","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","length","selectKeySystem","cps","createKeySession","initData","cdmData","initDataForKS","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","i","initDataEquals","warn","getSessionType","error","trigger","KEY_SESSION_CREATED","data","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","message","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","NEED_KEY","onNeedKey","off","setSessionType","value","setRobustnessLevel","level","setProtectionData","stop","reset","undefined","forEach","retryTimeout","clearTimeout","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","codec","VIDEO","fromManifest","self","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","info","sessionId","requestKeySystemAccess","keySystemAccess","INTERNAL_KEY_SYSTEM_SELECTED","onKeySystemSelected","getKeySystem","decodeArray","buffer","isClearKey","kids","Object","keys","clearkeys","TextEncoder","encode","JSON","stringify","sendLicenseRequestCompleteEvent","LICENSE_REQUEST_COMPLETE","e","KEY_STATUSES_CHANGED","status","keyMessage","KEY_MESSAGE","messageType","licenseServerData","getLicenseServer","eventData","byteLength","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","getSessionID","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","reqHeaders","withCredentials","updateHeaders","headers","key","toLowerCase","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","onLoad","licenseMessage","getLicenseMessage","onAbort","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","doLicenseRequest","method","payload","retriesCount","XMLHttpRequest","open","setRequestHeader","retryRequest","setTimeout","onload","ontimeout","onerror","onabort","send","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.warn('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)});\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!')});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID, initData) {\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach( retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\n                            }\n                        } else {\n                            logger.info('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            if (supportedKS[ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                            } else if (supportedKS[ksIdx].initData) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    if (!protectionModel) {\n                        return;\n                    }\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                    // Load MediaKeySession with sessionId\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                    // Create new MediaKeySession with initData\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: null, error: e.error});\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys)  {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status === 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(xhr, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(method, url, true);\n        xhr.responseType = responseType;\n        xhr.withCredentials = withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in headers) {\n            xhr.setRequestHeader(key, headers[key]);\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            setTimeout(function () {\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\n                    retriesCount, timeout, onLoad, onAbort, onError);\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\n        };\n\n        xhr.onload = function () {\n            if (this.status === 200 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        xhr.send(payload);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n"]}