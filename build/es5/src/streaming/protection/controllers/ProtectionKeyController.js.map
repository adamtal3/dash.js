{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionKeyController.js"],"names":["CommonEncryption","KeySystemClearKey","KeySystemW3CClearKey","KeySystemWidevine","KeySystemPlayReady","DRMToday","PlayReady","Widevine","ClearKey","ProtectionConstants","ProtectionKeyController","context","instance","debug","logger","keySystems","BASE64","clearkeyKeySystem","clearkeyW3CKeySystem","setConfig","config","getLogger","initialize","keySystem","getInstance","push","getKeySystems","getKeySystemBySystemString","systemString","i","length","isClearKey","initDataEquals","initData1","initData2","byteLength","data1","Uint8Array","data2","j","getSupportedKeySystemsFromContentProtection","cps","cp","ks","ksIdx","cpIdx","supportedKS","schemeIdUri","toLowerCase","schemeIdURI","initData","getInitData","cdmData","getCDMData","sessionId","getSessionId","getSupportedKeySystems","protDataSet","pssh","parsePSSHList","keySystemString","shouldNotFilterOutKeySystem","uuid","getLicenseServer","protData","messageType","licenseServerData","hasOwnProperty","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","CLEARKEY_KEYSTEM_STRING","processClearKeyLicenseRequest","message","getClearKeysFromProtectionData","error","setProtectionData","protectionDataSet","getProtectionData","init","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"ProtectionKeyController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, debug: debug });\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData,\n                                cdmData: ks.getCDMData(),\n                                sessionId: ks.getSessionId(cp)\n                            });\n                        } else if (this.isClearKey(ks)) {\n                            supportedKS.push({\n                                ks: ks,\n                                initData: null\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n"]}