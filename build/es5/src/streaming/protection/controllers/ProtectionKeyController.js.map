{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionKeyController.js"],"names":["CommonEncryption","KeySystemClearKey","KeySystemW3CClearKey","KeySystemWidevine","KeySystemPlayReady","DRMToday","PlayReady","Widevine","ClearKey","ProtectionConstants","ProtectionKeyController","context","instance","debug","logger","keySystems","BASE64","clearkeyKeySystem","clearkeyW3CKeySystem","setConfig","config","getLogger","initialize","keySystem","getInstance","push","getKeySystems","getKeySystemBySystemString","systemString","i","length","isClearKey","initDataEquals","initData1","initData2","byteLength","data1","Uint8Array","data2","j","getSupportedKeySystemsFromContentProtection","cps","cp","ks","ksIdx","cpIdx","supportedKS","schemeIdUri","toLowerCase","schemeIdURI","initData","getInitData","cdmData","getCDMData","sessionId","getSessionId","getSupportedKeySystems","protDataSet","pssh","parsePSSHList","keySystemString","shouldNotFilterOutKeySystem","uuid","getLicenseServer","protData","messageType","licenseServerData","hasOwnProperty","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","CLEARKEY_KEYSTEM_STRING","processClearKeyLicenseRequest","message","getClearKeysFromProtectionData","error","setProtectionData","protectionDataSet","getProtectionData","init","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,iBAAP,KAA6B,uBAA7B,CACA,MAAOC,kBAAP,KAA8B,4BAA9B,CACA,MAAOC,qBAAP,KAAiC,+BAAjC,CACA,MAAOC,kBAAP,KAA8B,4BAA9B,CACA,MAAOC,mBAAP,KAA+B,6BAA/B,CACA,MAAOC,SAAP,KAAqB,uBAArB,CACA,MAAOC,UAAP,KAAsB,wBAAtB,CACA,MAAOC,SAAP,KAAqB,uBAArB,CACA,MAAOC,SAAP,KAAqB,uBAArB,CACA,MAAOC,oBAAP,KAAgC,qCAAhC,CAEA;;;GAIA,QAASC,wBAAT,EAAmC,CAE/B,GAAIC,SAAU,KAAKA,OAAnB,CAEA,GAAIC,SAAJ,CACIC,KADJ,CAEIC,MAFJ,CAGIC,UAHJ,CAIIC,MAJJ,CAKIC,iBALJ,CAMIC,oBANJ,CAQA,QAASC,UAAT,CAAmBC,MAAnB,CAA2B,CACvB,GAAI,CAACA,MAAL,CAAa,OAEb,GAAIA,OAAOP,KAAX,CAAkB,CACdA,MAAQO,OAAOP,KAAf,CACAC,OAASD,MAAMQ,SAAN,CAAgBT,QAAhB,CAAT,CACH,CAED,GAAIQ,OAAOJ,MAAX,CAAmB,CACfA,OAASI,OAAOJ,MAAhB,CACH,CACJ,CAED,QAASM,WAAT,EAAsB,CAClBP,WAAa,EAAb,CAEA,GAAIQ,UAAJ,CAEA;AACAA,UAAYnB,mBAAmBO,OAAnB,EAA4Ba,WAA5B,CAAwC,CAAER,OAAQA,MAAV,CAAxC,CAAZ,CACAD,WAAWU,IAAX,CAAgBF,SAAhB,EAEA;AACAA,UAAYpB,kBAAkBQ,OAAlB,EAA2Ba,WAA3B,CAAuC,CAAER,OAAQA,MAAV,CAAvC,CAAZ,CACAD,WAAWU,IAAX,CAAgBF,SAAhB,EAEA;AACAA,UAAYtB,kBAAkBU,OAAlB,EAA2Ba,WAA3B,CAAuC,CAAER,OAAQA,MAAV,CAAvC,CAAZ,CACAD,WAAWU,IAAX,CAAgBF,SAAhB,EACAN,kBAAoBM,SAApB,CAEA;AACAA,UAAYrB,qBAAqBS,OAArB,EAA8Ba,WAA9B,CAA0C,CAAER,OAAQA,MAAV,CAAkBH,MAAOA,KAAzB,CAA1C,CAAZ,CACAE,WAAWU,IAAX,CAAgBF,SAAhB,EACAL,qBAAuBK,SAAvB,CACH,CAED;;;;;;;;;OAUA,QAASG,cAAT,EAAyB,CACrB,MAAOX,WAAP,CACH,CAED;;;;;;;;;;OAWA,QAASY,2BAAT,CAAoCC,YAApC,CAAkD,CAC9C,IAAK,GAAIC,GAAI,CAAb,CAAgBA,EAAId,WAAWe,MAA/B,CAAuCD,GAAvC,CAA4C,CACxC,GAAId,WAAWc,CAAX,EAAcD,YAAd,GAA+BA,YAAnC,CAAiD,CAC7C,MAAOb,YAAWc,CAAX,CAAP,CACH,CACJ,CACD,MAAO,KAAP,CACH,CAED;;;;;;;;;;;;;OAcA,QAASE,WAAT,CAAoBR,SAApB,CAA+B,CAC3B,MAAQA,aAAcN,iBAAd,EAAmCM,YAAcL,oBAAzD,CACH,CAED;;;;;;;;;OAUA,QAASc,eAAT,CAAwBC,SAAxB,CAAmCC,SAAnC,CAA8C,CAC1C,GAAID,UAAUE,UAAV,GAAyBD,UAAUC,UAAvC,CAAmD,CAC/C,GAAIC,OAAQ,GAAIC,WAAJ,CAAeJ,SAAf,CAAZ,CACA,GAAIK,OAAQ,GAAID,WAAJ,CAAeH,SAAf,CAAZ,CAEA,IAAK,GAAIK,GAAI,CAAb,CAAgBA,EAAIH,MAAMN,MAA1B,CAAkCS,GAAlC,CAAuC,CACnC,GAAIH,MAAMG,CAAN,IAAaD,MAAMC,CAAN,CAAjB,CAA2B,CACvB,MAAO,MAAP,CACH,CACJ,CACD,MAAO,KAAP,CACH,CACD,MAAO,MAAP,CACH,CAED;;;;;;;;;;;;;OAcA,QAASC,4CAAT,CAAqDC,GAArD,CAA0D,CACtD,GAAIC,GAAJ,CAAQC,EAAR,CAAYC,KAAZ,CAAmBC,KAAnB,CACA,GAAIC,aAAc,EAAlB,CAEA,GAAIL,GAAJ,CAAS,CACL,IAAKG,MAAQ,CAAb,CAAgBA,MAAQ7B,WAAWe,MAAnC,CAA2C,EAAEc,KAA7C,CAAoD,CAChDD,GAAK5B,WAAW6B,KAAX,CAAL,CACA,IAAKC,MAAQ,CAAb,CAAgBA,MAAQJ,IAAIX,MAA5B,CAAoC,EAAEe,KAAtC,CAA6C,CACzCH,GAAKD,IAAII,KAAJ,CAAL,CACA,GAAIH,GAAGK,WAAH,CAAeC,WAAf,KAAiCL,GAAGM,WAAxC,CAAqD,CACjD;AACA,GAAIC,UAAWP,GAAGQ,WAAH,CAAeT,EAAf,CAAf,CACA,GAAI,CAAC,CAACQ,QAAN,CAAgB,CACZJ,YAAYrB,IAAZ,CAAiB,CACbkB,GAAI5B,WAAW6B,KAAX,CADS,CAEbM,SAAUA,QAFG,CAGbE,QAAST,GAAGU,UAAH,EAHI,CAIbC,UAAWX,GAAGY,YAAH,CAAgBb,EAAhB,CAJE,CAAjB,EAMH,CAPD,IAOO,IAAI,KAAKX,UAAL,CAAgBY,EAAhB,CAAJ,CAAyB,CAC5BG,YAAYrB,IAAZ,CAAiB,CACbkB,GAAIA,EADS,CAEbO,SAAU,IAFG,CAAjB,EAIH,CACJ,CACJ,CACJ,CACJ,CACD,MAAOJ,YAAP,CACH,CAED;;;;;;;;;;;;;;;OAgBA,QAASU,uBAAT,CAAgCN,QAAhC,CAA0CO,WAA1C,CAAuD,CACnD,GAAIX,aAAc,EAAlB,CACA,GAAIY,MAAO1D,iBAAiB2D,aAAjB,CAA+BT,QAA/B,CAAX,CACA,GAAIP,GAAJ,CAAQiB,eAAR,CAAyBC,2BAAzB,CAEA,IAAK,GAAIjB,OAAQ,CAAjB,CAAoBA,MAAQ7B,WAAWe,MAAvC,CAA+C,EAAEc,KAAjD,CAAwD,CACpDD,GAAK5B,WAAW6B,KAAX,CAAL,CACAgB,gBAAkBjB,GAAGf,YAArB,CACAiC,4BAA+BJ,WAAD,CAAgBG,kBAAmBH,YAAnC,CAAiD,IAA/E,CAEA,GAAId,GAAGmB,IAAH,GAAWJ,KAAX,EAAmBG,2BAAvB,CAAoD,CAChDf,YAAYrB,IAAZ,CAAiB,CACbkB,GAAIA,EADS,CAEbO,SAAUQ,KAAKf,GAAGmB,IAAR,CAFG,CAGbV,QAAST,GAAGU,UAAH,EAHI,CAIbC,UAAWX,GAAGY,YAAH,EAJE,CAAjB,EAMH,CACJ,CACD,MAAOT,YAAP,CACH,CAED;;;;;;;;;;;;;;;;OAiBA,QAASiB,iBAAT,CAA0BxC,SAA1B,CAAqCyC,QAArC,CAA+CC,WAA/C,CAA4D,CAExD;AACA;AACA,GAAIA,cAAgB,iBAAhB,EAAqCA,cAAgB,2BAAzD,CAAsF,CAClF,MAAO,KAAP,CACH,CAED,GAAIC,mBAAoB,IAAxB,CACA,GAAIF,UAAYA,SAASG,cAAT,CAAwB,UAAxB,CAAhB,CAAqD,CACjDD,kBAAoB7D,SAASM,OAAT,EAAkBa,WAAlB,CAA8B,CAAER,OAAQA,MAAV,CAA9B,CAApB,CACH,CAFD,IAEO,IAAIO,UAAUK,YAAV,GAA2BnB,oBAAoB2D,uBAAnD,CAA4E,CAC/EF,kBAAoB3D,SAASI,OAAT,EAAkBa,WAAlB,EAApB,CACH,CAFM,IAEA,IAAID,UAAUK,YAAV,GAA2BnB,oBAAoB4D,wBAAnD,CAA6E,CAChFH,kBAAoB5D,UAAUK,OAAV,EAAmBa,WAAnB,EAApB,CACH,CAFM,IAEA,IAAID,UAAUK,YAAV,GAA2BnB,oBAAoB6D,uBAAnD,CAA4E,CAC/EJ,kBAAoB1D,SAASG,OAAT,EAAkBa,WAAlB,EAApB,CACH,CAED,MAAO0C,kBAAP,CACH,CAED;;;;;;;;;;;OAYA,QAASK,8BAAT,CAAuCtD,iBAAvC,CAA0D+C,QAA1D,CAAoEQ,OAApE,CAA6E,CACzE,GAAI,CACA,MAAOvD,mBAAkBwD,8BAAlB,CAAiDT,QAAjD,CAA2DQ,OAA3D,CAAP,CACH,CAAC,MAAOE,KAAP,CAAc,CACZ5D,OAAO4D,KAAP,CAAa,kDAAb,EACA,MAAO,KAAP,CACH,CACJ,CAED,QAASC,kBAAT,CAA2BC,iBAA3B,CAA8C,CAC1C,GAAIC,mBAAoB,SAAUjB,eAAV,CAA2B,CAC/C,GAAII,UAAW,IAAf,CACA,GAAIY,iBAAJ,CAAuB,CACnBZ,SAAYJ,kBAAmBgB,kBAApB,CAAyCA,kBAAkBhB,eAAlB,CAAzC,CAA8E,IAAzF,CACH,CACD,MAAOI,SAAP,CACH,CAND,CAQA,IAAK,GAAInC,GAAI,CAAb,CAAgBA,EAAId,WAAWe,MAA/B,CAAuCD,GAAvC,CAA4C,CACxC,GAAIN,WAAYR,WAAWc,CAAX,CAAhB,CACA,GAAIN,UAAU4C,cAAV,CAAyB,MAAzB,CAAJ,CAAsC,CAClC5C,UAAUuD,IAAV,CAAeD,kBAAkBtD,UAAUK,YAA5B,CAAf,EACH,CACJ,CACJ,CAEDhB,SAAW,CACPU,WAAYA,UADL,CAEPqD,kBAAmBA,iBAFZ,CAGP5C,WAAYA,UAHL,CAIPC,eAAgBA,cAJT,CAKPN,cAAeA,aALR,CAMPC,2BAA4BA,0BANrB,CAOPa,4CAA6CA,2CAPtC,CAQPgB,uBAAwBA,sBARjB,CASPO,iBAAkBA,gBATX,CAUPQ,8BAA+BA,6BAVxB,CAWPpD,UAAWA,SAXJ,CAAX,CAcA,MAAOP,SAAP,CACH,CAEDF,wBAAwBqE,qBAAxB,CAAgD,yBAAhD,CACA,cAAeC,QAAOC,YAAP,CAAoBC,mBAApB,CAAwCxE,uBAAxC,CAAf,CAAiF","file":"ProtectionKeyController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, debug: debug });\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData,\n                                cdmData: ks.getCDMData(),\n                                sessionId: ks.getSessionId(cp)\n                            });\n                        } else if (this.isClearKey(ks)) {\n                            supportedKS.push({\n                                ks: ks,\n                                initData: null\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n"]}