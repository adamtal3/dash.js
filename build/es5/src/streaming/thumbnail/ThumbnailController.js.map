{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailController.js"],"names":["FactoryMaker","Constants","Thumbnail","ThumbnailTracks","BitrateInfo","replaceTokenForTemplate","unescapeDollarsInTemplate","ThumbnailController","config","context","instance","thumbnailTracks","setup","reset","create","dashManifestModel","adapter","baseURLController","stream","timelineConverter","getThumbnail","time","callback","track","getCurrentTrack","segmentDuration","undefined","seq","Math","floor","offset","thumbIndex","tilesHor","tilesVert","thumbnail","width","widthPerTile","height","heightPerTile","x","y","readThumbnail","url","buildUrlFromTemplate","seqIdx","startNumber","templateUrl","bandwidth","setTrackByIndex","index","getCurrentTrackIndex","getBitrateList","tracks","getTracks","i","map","t","bitrateInfo","mediaType","IMAGE","qualityIndex","bitrate","get","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"ThumbnailController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../constants/Constants';\nimport Thumbnail from '../vo/Thumbnail';\nimport ThumbnailTracks from './ThumbnailTracks';\nimport BitrateInfo from '../vo/BitrateInfo';\nimport {replaceTokenForTemplate, unescapeDollarsInTemplate} from '../../dash/utils/SegmentsUtils';\n\nfunction ThumbnailController(config) {\n\n    const context = this.context;\n\n    let instance,\n        thumbnailTracks;\n\n    function setup() {\n        reset();\n        thumbnailTracks = ThumbnailTracks(context).create({\n            dashManifestModel: config.dashManifestModel,\n            adapter: config.adapter,\n            baseURLController: config.baseURLController,\n            stream: config.stream,\n            timelineConverter: config.timelineConverter\n        });\n    }\n\n    function getThumbnail(time, callback) {\n        const track = thumbnailTracks.getCurrentTrack();\n        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\n            return null;\n        }\n\n        // Calculate index of the sprite given a time\n        const seq = Math.floor(time / track.segmentDuration);\n        const offset = time % track.segmentDuration;\n        const thumbIndex = Math.floor((offset * track.tilesHor * track.tilesVert) / track.segmentDuration);\n        // Create and return the thumbnail\n        const thumbnail = new Thumbnail();\n\n        thumbnail.width = Math.floor(track.widthPerTile);\n        thumbnail.height = Math.floor(track.heightPerTile);\n        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\n        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\n\n        if ('readThumbnail' in track) {\n            return track.readThumbnail(time, (url) => {\n                thumbnail.url = url;\n                if (callback)\n                    callback(thumbnail);\n            });\n        } else {\n            thumbnail.url = buildUrlFromTemplate(track, seq);\n            if (callback)\n                callback(thumbnail);\n            return thumbnail;\n        }\n    }\n\n    function buildUrlFromTemplate(track, seq) {\n        const seqIdx = seq + track.startNumber;\n        let url = replaceTokenForTemplate(track.templateUrl, 'Number', seqIdx);\n        url = replaceTokenForTemplate(url, 'Time', (seqIdx - 1) * track.segmentDuration);\n        url = replaceTokenForTemplate(url, 'Bandwidth', track.bandwidth);\n        return unescapeDollarsInTemplate(url);\n    }\n\n    function setTrackByIndex(index) {\n        thumbnailTracks.setTrackByIndex(index);\n    }\n\n    function getCurrentTrackIndex() {\n        return thumbnailTracks.getCurrentTrackIndex();\n    }\n\n    function getBitrateList() {\n        const tracks = thumbnailTracks.getTracks();\n        let i = 0;\n\n        return tracks.map((t) => {\n            const bitrateInfo = new BitrateInfo();\n            bitrateInfo.mediaType = Constants.IMAGE;\n            bitrateInfo.qualityIndex = i++;\n            bitrateInfo.bitrate = t.bitrate;\n            bitrateInfo.width = t.width;\n            bitrateInfo.height = t.height;\n            return bitrateInfo;\n        });\n    }\n\n    function reset() {\n        if (thumbnailTracks) {\n            thumbnailTracks.reset();\n        }\n    }\n\n    instance = {\n        get: getThumbnail,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrackIndex: getCurrentTrackIndex,\n        getBitrateList: getBitrateList,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\nexport default FactoryMaker.getClassFactory(ThumbnailController);"]}