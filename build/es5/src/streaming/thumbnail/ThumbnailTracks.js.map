{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailTracks.js"],"names":["Constants","DashConstants","FactoryMaker","ThumbnailTrackInfo","URLUtils","replaceIDForTemplate","getTimeBasedSegment","SegmentBaseLoader","BoxParser","XHRLoader","THUMBNAILS_SCHEME_ID_URIS","ThumbnailTracks","config","context","dashManifestModel","adapter","baseURLController","stream","timelineConverter","metricsModel","mediaPlayerModel","errHandler","urlUtils","getInstance","instance","tracks","currentTrackIndex","loader","segmentBaseLoader","boxParser","initialize","reset","create","setConfig","addTracks","normalizeSegments","fragments","representation","segments","count","i","len","s","seg","length","getIsDynamic","startTime","duration","timescale","media","mediaRange","push","streamInfo","getStreamInfo","mediaInfo","getMediaInfoForType","IMAGE","voAdaptation","getDataForMedia","voReps","getRepresentationsForAdaptation","forEach","rep","segmentInfoType","SEGMENT_TEMPLATE","segmentDuration","createTrack","SEGMENT_BASE","sort","a","b","bitrate","useSegmentBase","track","id","bandwidth","width","height","tilesHor","tilesVert","essentialProperties","p","indexOf","schemeIdUri","value","vars","split","isNaN","parseInt","loadSegments","indexRange","cache","readThumbnail","time","callback","cached","some","el","start","end","url","ss","mediaStartTime","baseURL","resolve","path","load","method","request","range","responseType","onload","e","info","getSamplesInfo","target","response","blob","Blob","slice","sampleList","offset","size","type","imageUrl","window","URL","createObjectURL","startNumber","templateUrl","buildTemplateUrl","widthPerTile","heightPerTile","isRelative","getTracks","getCurrentTrackIndex","getCurrentTrack","setTrackByIndex","index","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,UAAP,KAAsB,wBAAtB,CACA,MAAOC,cAAP,KAA0B,oCAA1B,CACA,MAAOC,aAAP,KAAyB,yBAAzB,CACA,MAAOC,mBAAP,KAA+B,0BAA/B,CACA,MAAOC,SAAP,KAAqB,gCAArB,CACA,OAAQC,oBAAR,CAA8BC,mBAA9B,KAAwD,gCAAxD,CAEA,MAAOC,kBAAP,KAA8B,8BAA9B,CACA,MAAOC,UAAP,KAAsB,iCAAtB,CACA,MAAOC,UAAP,KAAsB,+BAAtB,CAEA,MAAO,MAAMC,2BAA4B,CAAC,kCAAD,CACN,6CADM,CAAlC,CAGP,QAASC,gBAAT,CAAyBC,MAAzB,CAAiC,CAC7B,KAAMC,SAAU,KAAKA,OAArB,CAEA,KAAMC,mBAAoBF,OAAOE,iBAAjC,CACA,KAAMC,SAAUH,OAAOG,OAAvB,CACA,KAAMC,mBAAoBJ,OAAOI,iBAAjC,CACA,KAAMC,QAASL,OAAOK,MAAtB,CACA,KAAMC,mBAAoBN,OAAOM,iBAAjC,CACA,KAAMC,cAAeP,OAAOO,YAA5B,CACA,KAAMC,kBAAmBR,OAAOQ,gBAAhC,CACA,KAAMC,YAAaT,OAAOS,UAA1B,CAEA,KAAMC,UAAWlB,SAASS,OAAT,EAAkBU,WAAlB,EAAjB,CAEA,GAAIC,SAAJ,CACIC,MADJ,CAEIC,iBAFJ,CAGIC,MAHJ,CAGYC,iBAHZ,CAG+BC,SAH/B,CAKA,QAASC,WAAT,EAAsB,CAClBC,QACAJ,OAASlB,UAAUI,OAAV,EAAmBmB,MAAnB,CAA0B,EAA1B,CAAT,CACAH,UAAYrB,UAAUK,OAAV,EAAmBU,WAAnB,EAAZ,CACAK,kBAAoBrB,kBAAkBM,OAAlB,EAA2BU,WAA3B,EAApB,CACAK,kBAAkBK,SAAlB,CAA4B,CACxBjB,kBAAmBA,iBADK,CAExBG,aAAcA,YAFU,CAGxBC,iBAAkBA,gBAHM,CAIxBC,WAAYA,UAJY,CAA5B,EAOA;AACAa,YACH,CAED,QAASC,kBAAT,CAA2BC,SAA3B,CAAsCC,cAAtC,CAAsD,CAClD,KAAMC,UAAW,EAAjB,CACA,GAAIC,OAAQ,CAAZ,CAEA,GAAIC,EAAJ,CACIC,GADJ,CAEIC,CAFJ,CAGIC,GAHJ,CAKA,IAAKH,EAAI,CAAJ,CAAOC,IAAML,UAAUQ,MAA5B,CAAoCJ,EAAIC,GAAxC,CAA6CD,GAA7C,CAAkD,CAC9CE,EAAIN,UAAUI,CAAV,CAAJ,CAEAG,IAAMrC,oBACFY,iBADE,CAEFJ,kBAAkB+B,YAAlB,EAFE,CAGFR,cAHE,CAIFK,EAAEI,SAJA,CAKFJ,EAAEK,QALA,CAMFL,EAAEM,SANA,CAOFN,EAAEO,KAPA,CAQFP,EAAEQ,UARA,CASFX,KATE,CAAN,CAWAD,SAASa,IAAT,CAAcR,GAAd,EAEAA,IAAM,IAAN,CACAJ,QACH,CACD,MAAOD,SAAP,CACH,CAED,QAASJ,UAAT,EAAqB,CACjB,GAAI,CAACjB,MAAD,EAAW,CAACH,iBAAZ,EAAiC,CAACC,OAAtC,CAA+C,CAC3C,OACH,CAED,KAAMqC,YAAanC,OAAOoC,aAAP,EAAnB,CACA,GAAI,CAACD,UAAL,CAAiB,CACb,OACH,CAED;AACA,KAAME,WAAYvC,QAAQwC,mBAAR,CAA4BH,UAA5B,CAAwCpD,UAAUwD,KAAlD,CAAlB,CACA,GAAI,CAACF,SAAL,CAAgB,CACZ,OACH,CAED,KAAMG,cAAe1C,QAAQ2C,eAAR,CAAwBJ,SAAxB,CAArB,CACA,GAAI,CAACG,YAAL,CAAmB,CACf,OACH,CAED,KAAME,QAAS7C,kBAAkB8C,+BAAlB,CAAkDH,YAAlD,CAAf,CACA,GAAIE,QAAUA,OAAOf,MAAP,CAAgB,CAA9B,CAAiC,CAC7Be,OAAOE,OAAP,CAAgBC,GAAD,EAAS,CACpB,GAAIA,IAAIC,eAAJ,GAAwB9D,cAAc+D,gBAAtC,EAA0DF,IAAIG,eAAJ,CAAsB,CAAhF,EAAqFH,IAAIb,KAA7F,CACIiB,YAAYJ,GAAZ,EACJ,GAAIA,IAAIC,eAAJ,GAAwB9D,cAAckE,YAA1C,CACID,YAAYJ,GAAZ,CAAiB,IAAjB,EACP,CALD,EAMH,CAED,GAAIrC,OAAOmB,MAAP,CAAgB,CAApB,CAAuB,CACnB;AACAnB,OAAO2C,IAAP,CAAY,CAACC,CAAD,CAAIC,CAAJ,GAAUD,EAAEE,OAAF,CAAYD,EAAEC,OAApC,EACA7C,kBAAoBD,OAAOmB,MAAP,CAAgB,CAApC,CACH,CACJ,CAED,QAASsB,YAAT,CAAqB7B,cAArB,CAAqCmC,cAArC,CAAqD,CACjD,KAAMC,OAAQ,GAAItE,mBAAJ,EAAd,CACAsE,MAAMC,EAAN,CAAWrC,eAAeqC,EAA1B,CACAD,MAAMF,OAAN,CAAgBlC,eAAesC,SAA/B,CACAF,MAAMG,KAAN,CAAcvC,eAAeuC,KAA7B,CACAH,MAAMI,MAAN,CAAexC,eAAewC,MAA9B,CACAJ,MAAMK,QAAN,CAAiB,CAAjB,CACAL,MAAMM,SAAN,CAAkB,CAAlB,CAEA,GAAI1C,eAAe2C,mBAAnB,CAAwC,CACpC3C,eAAe2C,mBAAf,CAAmCnB,OAAnC,CAA4CoB,CAAD,EAAO,CAC9C,GAAIvE,0BAA0BwE,OAA1B,CAAkCD,EAAEE,WAApC,GAAoD,CAApD,EAAyDF,EAAEG,KAA/D,CAAsE,CAClE,KAAMC,MAAOJ,EAAEG,KAAF,CAAQE,KAAR,CAAc,GAAd,CAAb,CACA,GAAID,KAAKzC,MAAL,GAAgB,CAAhB,EAAqB,CAAC2C,MAAMF,KAAK,CAAL,CAAN,CAAtB,EAAwC,CAACE,MAAMF,KAAK,CAAL,CAAN,CAA7C,CAA6D,CACzDZ,MAAMK,QAAN,CAAiBU,SAASH,KAAK,CAAL,CAAT,CAAkB,EAAlB,CAAjB,CACAZ,MAAMM,SAAN,CAAkBS,SAASH,KAAK,CAAL,CAAT,CAAkB,EAAlB,CAAlB,CACH,CACJ,CACJ,CARD,EASH,CAED,GAAIb,cAAJ,CAAoB,CAChB5C,kBAAkB6D,YAAlB,CAA+BpD,cAA/B,CAA+CrC,UAAUwD,KAAzD,CAAgEnB,eAAeqD,UAA/E,CAA2F,EAA3F,CAA+F,SAAUpD,QAAV,CAAoBD,cAApB,CAAoC,CAC/H,GAAIsD,OAAQ,EAAZ,CACArD,SAAWH,kBAAkBG,QAAlB,CAA4BD,cAA5B,CAAX,CACAoC,MAAMR,eAAN,CAAwB3B,SAAS,CAAT,EAAYS,QAApC,CAA8C;AAC9C0B,MAAMmB,aAAN,CAAsB,SAAUC,IAAV,CAAgBC,QAAhB,CAA0B,CAE5C,GAAIC,QAAS,IAAb,CACAJ,MAAMK,IAAN,CAAWC,IAAM,CACb,GAAIA,GAAGC,KAAH,EAAYL,IAAZ,EAAoBI,GAAGE,GAAH,CAASN,IAAjC,CAAuC,CACnCE,OAASE,GAAGG,GAAZ,CACA,MAAO,KAAP,CACH,CACJ,CALD,EAMA,GAAIL,MAAJ,CAAY,CACRD,SAASC,MAAT,EACH,CAFD,IAEO,CACHzD,SAAS0D,IAAT,CAAeK,EAAD,EAAQ,CAClB,GAAIA,GAAGC,cAAH,EAAqBT,IAArB,EAA6BQ,GAAGC,cAAH,CAAoBD,GAAGtD,QAAvB,CAAkC8C,IAAnE,CAAyE,CACrE,KAAMU,SAAUvF,kBAAkBwF,OAAlB,CAA0BnE,eAAeoE,IAAzC,CAAhB,CACA9E,OAAO+E,IAAP,CAAY,CACRC,OAAQ,KADA,CAERP,IAAKG,QAAQH,GAFL,CAGRQ,QAAS,CACLC,MAAOR,GAAGnD,UADL,CAEL4D,aAAc,aAFT,CAHD,CAORC,OAAQ,SAAUC,CAAV,CAAa,CACjB,GAAIC,MAAOpF,UAAUqF,cAAV,CAAyBF,EAAEG,MAAF,CAASC,QAAlC,CAAX,CACA,GAAIC,MAAO,GAAIC,KAAJ,CAAU,CAAEN,EAAEG,MAAF,CAASC,QAAT,CAAkBG,KAAlB,CAAwBN,KAAKO,UAAL,CAAgB,CAAhB,EAAmBC,MAA3C,CAAmDR,KAAKO,UAAL,CAAgB,CAAhB,EAAmBC,MAAnB,CAA4BR,KAAKO,UAAL,CAAgB,CAAhB,EAAmBE,IAAlG,CAAF,CAAV,CAAuH,CAAEC,KAAM,YAAR,CAAvH,CAAX,CACA,GAAIC,UAAWC,OAAOC,GAAP,CAAWC,eAAX,CAA4BV,IAA5B,CAAf,CACA1B,MAAMxC,IAAN,CAAW,CACP+C,MAAOG,GAAGC,cADH,CAEPH,IAAKE,GAAGC,cAAH,CAAoBD,GAAGtD,QAFrB,CAGPqD,IAAKwB,QAHE,CAAX,EAKA,GAAI9B,QAAJ,CACIA,SAAS8B,QAAT,EACP,CAlBO,CAAZ,EAoBA,MAAO,KAAP,CACH,CACJ,CAzBD,EA0BH,CACJ,CAvCD,CAwCH,CA5CD,EA6CH,CA9CD,IA8CO,CACHnD,MAAMuD,WAAN,CAAoB3F,eAAe2F,WAAnC,CACAvD,MAAMR,eAAN,CAAwB5B,eAAe4B,eAAvC,CACAQ,MAAMzB,SAAN,CAAkBX,eAAeW,SAAjC,CACAyB,MAAMwD,WAAN,CAAoBC,iBAAiB7F,cAAjB,CAApB,CACH,CAED,GAAIoC,MAAMK,QAAN,CAAiB,CAAjB,EAAsBL,MAAMM,SAAN,CAAkB,CAA5C,CAA+C,CAC3C;AACAN,MAAM0D,YAAN,CAAqB1D,MAAMG,KAAN,CAAcH,MAAMK,QAAzC,CACAL,MAAM2D,aAAN,CAAsB3D,MAAMI,MAAN,CAAeJ,MAAMM,SAA3C,CACAtD,OAAO0B,IAAP,CAAYsB,KAAZ,EACH,CACJ,CAED,QAASyD,iBAAT,CAA0B7F,cAA1B,CAA0C,CACtC,KAAM4F,aAAc3G,SAAS+G,UAAT,CAAoBhG,eAAeY,KAAnC,EAChB3B,SAASkF,OAAT,CAAiBnE,eAAeY,KAAhC,CAAuCjC,kBAAkBwF,OAAlB,CAA0BnE,eAAeoE,IAAzC,EAA+CL,GAAtF,CADgB,CAC6E/D,eAAeY,KADhH,CAGA,GAAI,CAACgF,WAAL,CAAkB,CACd,MAAO,EAAP,CACH,CAED,MAAO5H,sBAAqB4H,WAArB,CAAkC5F,eAAeqC,EAAjD,CAAP,CACH,CAED,QAAS4D,UAAT,EAAqB,CACjB,MAAO7G,OAAP,CACH,CAED,QAAS8G,qBAAT,EAAgC,CAC5B,MAAO7G,kBAAP,CACH,CAED,QAAS8G,gBAAT,EAA2B,CACvB,GAAI9G,kBAAoB,CAAxB,CAA2B,CACvB,MAAO,KAAP,CACH,CACD,MAAOD,QAAOC,iBAAP,CAAP,CACH,CAED,QAAS+G,gBAAT,CAAyBC,KAAzB,CAAgC,CAC5B,GAAI,CAACjH,MAAD,EAAWA,OAAOmB,MAAP,GAAkB,CAAjC,CAAoC,CAChC,OACH,CACD;AACA,GAAI8F,OAASjH,OAAOmB,MAApB,CAA4B,CACxB8F,MAAQjH,OAAOmB,MAAP,CAAgB,CAAxB,CACH,CACDlB,kBAAoBgH,KAApB,CACH,CAED,QAAS3G,MAAT,EAAiB,CACbN,OAAS,EAAT,CACAC,kBAAoB,CAAC,CAArB,CACH,CAEDF,SAAW,CACPM,WAAYA,UADL,CAEPwG,UAAWA,SAFJ,CAGPvG,MAAOA,KAHA,CAIP0G,gBAAiBA,eAJV,CAKPD,gBAAiBA,eALV,CAMPD,qBAAsBA,oBANf,CAAX,CASAzG,aAEA,MAAON,SAAP,CACH,CAEDb,gBAAgBgI,qBAAhB,CAAwC,iBAAxC,CACA,cAAezI,cAAa0I,eAAb,CAA6BjI,eAA7B,CAAf","file":"ThumbnailTracks.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DashConstants from '../../dash/constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\nimport URLUtils from '../../streaming/utils/URLUtils';\nimport {replaceIDForTemplate, getTimeBasedSegment} from '../../dash/utils/SegmentsUtils';\n\nimport SegmentBaseLoader from '../../dash/SegmentBaseLoader';\nimport BoxParser from '../../streaming/utils/BoxParser';\nimport XHRLoader from '../../streaming/net/XHRLoader';\n\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\n\nfunction ThumbnailTracks(config) {\n    const context = this.context;\n\n    const dashManifestModel = config.dashManifestModel;\n    const adapter = config.adapter;\n    const baseURLController = config.baseURLController;\n    const stream = config.stream;\n    const timelineConverter = config.timelineConverter;\n    const metricsModel = config.metricsModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const errHandler = config.errHandler;\n\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        tracks,\n        currentTrackIndex,\n        loader, segmentBaseLoader, boxParser;\n\n    function initialize() {\n        reset();\n        loader = XHRLoader(context).create({});\n        boxParser = BoxParser(context).getInstance();\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\n        segmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler\n        });\n\n        // parse representation and create tracks\n        addTracks();\n    }\n\n    function normalizeSegments(fragments, representation) {\n        const segments = [];\n        let count = 0;\n\n        let i,\n            len,\n            s,\n            seg;\n\n        for (i = 0, len = fragments.length; i < len; i++) {\n            s = fragments[i];\n\n            seg = getTimeBasedSegment(\n                timelineConverter,\n                dashManifestModel.getIsDynamic(),\n                representation,\n                s.startTime,\n                s.duration,\n                s.timescale,\n                s.media,\n                s.mediaRange,\n                count);\n\n            segments.push(seg);\n\n            seg = null;\n            count++;\n        }\n        return segments;\n    }\n\n    function addTracks() {\n        if (!stream || !dashManifestModel || !adapter) {\n            return;\n        }\n\n        const streamInfo = stream.getStreamInfo();\n        if (!streamInfo) {\n            return;\n        }\n\n        // Extract thumbnail tracks\n        const mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\n        if (!mediaInfo) {\n            return;\n        }\n\n        const voAdaptation = adapter.getDataForMedia(mediaInfo);\n        if (!voAdaptation) {\n            return;\n        }\n\n        const voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n        if (voReps && voReps.length > 0) {\n            voReps.forEach((rep) => {\n                if (rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media)\n                    createTrack(rep);\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE)\n                    createTrack(rep, true);\n            });\n        }\n\n        if (tracks.length > 0) {\n            // Sort bitrates and select the lowest bitrate rendition\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\n            currentTrackIndex = tracks.length - 1;\n        }\n    }\n\n    function createTrack(representation, useSegmentBase) {\n        const track = new ThumbnailTrackInfo();\n        track.id = representation.id;\n        track.bitrate = representation.bandwidth;\n        track.width = representation.width;\n        track.height = representation.height;\n        track.tilesHor = 1;\n        track.tilesVert = 1;\n\n        if (representation.essentialProperties) {\n            representation.essentialProperties.forEach((p) => {\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\n                    const vars = p.value.split('x');\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\n                        track.tilesHor = parseInt(vars[0], 10);\n                        track.tilesVert = parseInt(vars[1], 10);\n                    }\n                }\n            });\n        }\n\n        if (useSegmentBase) {\n            segmentBaseLoader.loadSegments(representation, Constants.IMAGE, representation.indexRange, {}, function (segments, representation) {\n                var cache = [];\n                segments = normalizeSegments(segments, representation);\n                track.segmentDuration = segments[0].duration; //assume all segments have the same duration\n                track.readThumbnail = function (time, callback) {\n\n                    let cached = null;\n                    cache.some(el => {\n                        if (el.start <= time && el.end > time) {\n                            cached = el.url;\n                            return true;\n                        }\n                    });\n                    if (cached) {\n                        callback(cached);\n                    } else {\n                        segments.some((ss) => {\n                            if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\n                                const baseURL = baseURLController.resolve(representation.path);\n                                loader.load({\n                                    method: 'get',\n                                    url: baseURL.url,\n                                    request: {\n                                        range: ss.mediaRange,\n                                        responseType: 'arraybuffer'\n                                    },\n                                    onload: function (e) {\n                                        let info = boxParser.getSamplesInfo(e.target.response);\n                                        let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\n                                        let imageUrl = window.URL.createObjectURL( blob );\n                                        cache.push({\n                                            start: ss.mediaStartTime,\n                                            end: ss.mediaStartTime + ss.duration,\n                                            url: imageUrl\n                                        });\n                                        if (callback)\n                                            callback(imageUrl);\n                                    }\n                                });\n                                return true;\n                            }\n                        });\n                    }\n                };\n            });\n        } else {\n            track.startNumber = representation.startNumber;\n            track.segmentDuration = representation.segmentDuration;\n            track.timescale = representation.timescale;\n            track.templateUrl = buildTemplateUrl(representation);\n        }\n\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\n            // Precalculate width and heigth per tile for perf reasons\n            track.widthPerTile = track.width / track.tilesHor;\n            track.heightPerTile = track.height / track.tilesVert;\n            tracks.push(track);\n        }\n    }\n\n    function buildTemplateUrl(representation) {\n        const templateUrl = urlUtils.isRelative(representation.media) ?\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\n\n        if (!templateUrl) {\n            return '';\n        }\n\n        return replaceIDForTemplate(templateUrl, representation.id);\n    }\n\n    function getTracks() {\n        return tracks;\n    }\n\n    function getCurrentTrackIndex() {\n        return currentTrackIndex;\n    }\n\n    function getCurrentTrack() {\n        if (currentTrackIndex < 0) {\n            return null;\n        }\n        return tracks[currentTrackIndex];\n    }\n\n    function setTrackByIndex(index) {\n        if (!tracks || tracks.length === 0) {\n            return;\n        }\n        // select highest bitrate in case selected index is higher than bitrate list length\n        if (index >= tracks.length) {\n            index = tracks.length - 1;\n        }\n        currentTrackIndex = index;\n    }\n\n    function reset() {\n        tracks = [];\n        currentTrackIndex = -1;\n    }\n\n    instance = {\n        initialize: initialize,\n        getTracks: getTracks,\n        reset: reset,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrack: getCurrentTrack,\n        getCurrentTrackIndex: getCurrentTrackIndex\n    };\n\n    initialize();\n\n    return instance;\n}\n\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\n"]}