{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailTracks.js"],"names":["Constants","DashConstants","FactoryMaker","ThumbnailTrackInfo","URLUtils","replaceIDForTemplate","getTimeBasedSegment","SegmentBaseLoader","BoxParser","XHRLoader","THUMBNAILS_SCHEME_ID_URIS","ThumbnailTracks","config","context","dashManifestModel","adapter","baseURLController","stream","timelineConverter","metricsModel","mediaPlayerModel","errHandler","urlUtils","getInstance","instance","tracks","currentTrackIndex","loader","segmentBaseLoader","boxParser","initialize","reset","create","setConfig","addTracks","normalizeSegments","fragments","representation","segments","count","i","len","s","seg","length","getIsDynamic","startTime","duration","timescale","media","mediaRange","push","streamInfo","getStreamInfo","mediaInfo","getMediaInfoForType","IMAGE","voAdaptation","getDataForMedia","voReps","getRepresentationsForAdaptation","forEach","rep","segmentInfoType","SEGMENT_TEMPLATE","segmentDuration","createTrack","SEGMENT_BASE","sort","a","b","bitrate","useSegmentBase","track","id","bandwidth","width","height","tilesHor","tilesVert","essentialProperties","p","indexOf","schemeIdUri","value","vars","split","isNaN","parseInt","loadSegments","indexRange","cache","readThumbnail","time","callback","cached","some","el","start","end","url","ss","mediaStartTime","baseURL","resolve","path","load","method","request","range","responseType","onload","e","info","getSamplesInfo","target","response","blob","Blob","slice","sampleList","offset","size","type","imageUrl","window","URL","createObjectURL","startNumber","templateUrl","buildTemplateUrl","widthPerTile","heightPerTile","isRelative","getTracks","getCurrentTrackIndex","getCurrentTrack","setTrackByIndex","index","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"ThumbnailTracks.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DashConstants from '../../dash/constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\nimport URLUtils from '../../streaming/utils/URLUtils';\nimport {replaceIDForTemplate, getTimeBasedSegment} from '../../dash/utils/SegmentsUtils';\n\nimport SegmentBaseLoader from '../../dash/SegmentBaseLoader';\nimport BoxParser from '../../streaming/utils/BoxParser';\nimport XHRLoader from '../../streaming/net/XHRLoader';\n\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\n\nfunction ThumbnailTracks(config) {\n    const context = this.context;\n\n    const dashManifestModel = config.dashManifestModel;\n    const adapter = config.adapter;\n    const baseURLController = config.baseURLController;\n    const stream = config.stream;\n    const timelineConverter = config.timelineConverter;\n    const metricsModel = config.metricsModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const errHandler = config.errHandler;\n\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        tracks,\n        currentTrackIndex,\n        loader, segmentBaseLoader, boxParser;\n\n    function initialize() {\n        reset();\n        loader = XHRLoader(context).create({});\n        boxParser = BoxParser(context).getInstance();\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\n        segmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler\n        });\n\n        // parse representation and create tracks\n        addTracks();\n    }\n\n    function normalizeSegments(fragments, representation) {\n        const segments = [];\n        let count = 0;\n\n        let i,\n            len,\n            s,\n            seg;\n\n        for (i = 0, len = fragments.length; i < len; i++) {\n            s = fragments[i];\n\n            seg = getTimeBasedSegment(\n                timelineConverter,\n                dashManifestModel.getIsDynamic(),\n                representation,\n                s.startTime,\n                s.duration,\n                s.timescale,\n                s.media,\n                s.mediaRange,\n                count);\n\n            segments.push(seg);\n\n            seg = null;\n            count++;\n        }\n        return segments;\n    }\n\n    function addTracks() {\n        if (!stream || !dashManifestModel || !adapter) {\n            return;\n        }\n\n        const streamInfo = stream.getStreamInfo();\n        if (!streamInfo) {\n            return;\n        }\n\n        // Extract thumbnail tracks\n        const mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\n        if (!mediaInfo) {\n            return;\n        }\n\n        const voAdaptation = adapter.getDataForMedia(mediaInfo);\n        if (!voAdaptation) {\n            return;\n        }\n\n        const voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n        if (voReps && voReps.length > 0) {\n            voReps.forEach((rep) => {\n                if (rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media)\n                    createTrack(rep);\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE)\n                    createTrack(rep, true);\n            });\n        }\n\n        if (tracks.length > 0) {\n            // Sort bitrates and select the lowest bitrate rendition\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\n            currentTrackIndex = tracks.length - 1;\n        }\n    }\n\n    function createTrack(representation, useSegmentBase) {\n        const track = new ThumbnailTrackInfo();\n        track.id = representation.id;\n        track.bitrate = representation.bandwidth;\n        track.width = representation.width;\n        track.height = representation.height;\n        track.tilesHor = 1;\n        track.tilesVert = 1;\n\n        if (representation.essentialProperties) {\n            representation.essentialProperties.forEach((p) => {\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\n                    const vars = p.value.split('x');\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\n                        track.tilesHor = parseInt(vars[0], 10);\n                        track.tilesVert = parseInt(vars[1], 10);\n                    }\n                }\n            });\n        }\n\n        if (useSegmentBase) {\n            segmentBaseLoader.loadSegments(representation, Constants.IMAGE, representation.indexRange, {}, function (segments, representation) {\n                var cache = [];\n                segments = normalizeSegments(segments, representation);\n                track.segmentDuration = segments[0].duration; //assume all segments have the same duration\n                track.readThumbnail = function (time, callback) {\n\n                    let cached = null;\n                    cache.some(el => {\n                        if (el.start <= time && el.end > time) {\n                            cached = el.url;\n                            return true;\n                        }\n                    });\n                    if (cached) {\n                        callback(cached);\n                    } else {\n                        segments.some((ss) => {\n                            if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\n                                const baseURL = baseURLController.resolve(representation.path);\n                                loader.load({\n                                    method: 'get',\n                                    url: baseURL.url,\n                                    request: {\n                                        range: ss.mediaRange,\n                                        responseType: 'arraybuffer'\n                                    },\n                                    onload: function (e) {\n                                        let info = boxParser.getSamplesInfo(e.target.response);\n                                        let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\n                                        let imageUrl = window.URL.createObjectURL( blob );\n                                        cache.push({\n                                            start: ss.mediaStartTime,\n                                            end: ss.mediaStartTime + ss.duration,\n                                            url: imageUrl\n                                        });\n                                        if (callback)\n                                            callback(imageUrl);\n                                    }\n                                });\n                                return true;\n                            }\n                        });\n                    }\n                };\n            });\n        } else {\n            track.startNumber = representation.startNumber;\n            track.segmentDuration = representation.segmentDuration;\n            track.timescale = representation.timescale;\n            track.templateUrl = buildTemplateUrl(representation);\n        }\n\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\n            // Precalculate width and heigth per tile for perf reasons\n            track.widthPerTile = track.width / track.tilesHor;\n            track.heightPerTile = track.height / track.tilesVert;\n            tracks.push(track);\n        }\n    }\n\n    function buildTemplateUrl(representation) {\n        const templateUrl = urlUtils.isRelative(representation.media) ?\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\n\n        if (!templateUrl) {\n            return '';\n        }\n\n        return replaceIDForTemplate(templateUrl, representation.id);\n    }\n\n    function getTracks() {\n        return tracks;\n    }\n\n    function getCurrentTrackIndex() {\n        return currentTrackIndex;\n    }\n\n    function getCurrentTrack() {\n        if (currentTrackIndex < 0) {\n            return null;\n        }\n        return tracks[currentTrackIndex];\n    }\n\n    function setTrackByIndex(index) {\n        if (!tracks || tracks.length === 0) {\n            return;\n        }\n        // select highest bitrate in case selected index is higher than bitrate list length\n        if (index >= tracks.length) {\n            index = tracks.length - 1;\n        }\n        currentTrackIndex = index;\n    }\n\n    function reset() {\n        tracks = [];\n        currentTrackIndex = -1;\n    }\n\n    instance = {\n        initialize: initialize,\n        getTracks: getTracks,\n        reset: reset,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrack: getCurrentTrack,\n        getCurrentTrackIndex: getCurrentTrackIndex\n    };\n\n    initialize();\n\n    return instance;\n}\n\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\n"]}