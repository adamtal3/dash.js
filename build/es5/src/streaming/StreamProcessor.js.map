{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":["Constants","LiveEdgeFinder","BufferController","TextBufferController","ScheduleController","RepresentationController","FactoryMaker","DashHandler","StreamProcessor","config","context","type","errHandler","mimeType","timelineConverter","adapter","manifestModel","mediaPlayerModel","stream","abrController","playbackController","streamController","mediaController","textController","domStorage","metricsModel","dashMetrics","dashManifestModel","instance","mediaInfo","mediaInfoArr","bufferController","scheduleController","liveEdgeFinder","representationController","fragmentModel","spExternalControllers","indexHandler","setup","getIsDynamic","create","streamProcessor","resetInitialSettings","initialize","mediaSource","baseURLController","registerStreamType","getFragmentController","getModel","setStreamProcessor","createBufferControllerForType","setConfig","registerExternalController","controller","push","unregisterExternalController","index","indexOf","splice","getExternalControllers","unregisterAllExternalController","reset","errored","keepBuffers","unRegisterStreamType","forEach","isUpdating","getType","getRepresentationController","getIndexHandler","getBuffer","setBuffer","buffer","getBufferController","getFragmentModel","getLiveEdgeFinder","getStreamInfo","addInbandEvents","events","selectMediaInfo","newMediaInfo","updateData","addMediaInfo","selectNewMediaInfo","getMediaInfoArr","getMediaInfo","getMediaSource","setMediaSource","dischargePreBuffer","getScheduleController","getRepresentationInfo","quality","isBufferingCompleted","getIsBufferingCompleted","timeIsBuffered","time","getRangeAt","getBufferLevel","switchInitData","representationId","bufferResetEnabled","id","createBuffer","previousBuffers","switchTrackAsked","VIDEO","AUDIO","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\nimport BufferController from './controllers/BufferController';\nimport TextBufferController from './text/TextBufferController';\nimport ScheduleController from './controllers/ScheduleController';\nimport RepresentationController from '../dash/controllers/RepresentationController';\nimport FactoryMaker from '../core/FactoryMaker';\n\nimport DashHandler from '../dash/DashHandler';\n\nfunction StreamProcessor(config) {\n\n    config = config || {};\n    let context = this.context;\n\n    let type = config.type;\n    let errHandler = config.errHandler;\n    let mimeType = config.mimeType;\n    let timelineConverter = config.timelineConverter;\n    let adapter = config.adapter;\n    let manifestModel = config.manifestModel;\n    let mediaPlayerModel = config.mediaPlayerModel;\n    let stream = config.stream;\n    let abrController = config.abrController;\n    let playbackController = config.playbackController;\n    let streamController = config.streamController;\n    let mediaController = config.mediaController;\n    let textController = config.textController;\n    let domStorage = config.domStorage;\n    let metricsModel = config.metricsModel;\n    let dashMetrics = config.dashMetrics;\n    let dashManifestModel = config.dashManifestModel;\n\n    let instance,\n        mediaInfo,\n        mediaInfoArr,\n        bufferController,\n        scheduleController,\n        liveEdgeFinder,\n        representationController,\n        fragmentModel,\n        spExternalControllers,\n        indexHandler;\n\n    function setup() {\n        if (playbackController && playbackController.getIsDynamic()) {\n            liveEdgeFinder = LiveEdgeFinder(context).create({\n                timelineConverter: timelineConverter,\n                streamProcessor: instance\n            });\n        }\n        resetInitialSettings();\n    }\n\n    function initialize(mediaSource) {\n        indexHandler = DashHandler(context).create({\n            mimeType: mimeType,\n            timelineConverter: timelineConverter,\n            dashMetrics: dashMetrics,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            baseURLController: config.baseURLController,\n            errHandler: errHandler\n        });\n\n        // initialize controllers\n        indexHandler.initialize(instance);\n        abrController.registerStreamType(type, instance);\n\n        fragmentModel = stream.getFragmentController().getModel(type);\n        fragmentModel.setStreamProcessor(instance);\n\n        bufferController = createBufferControllerForType(type);\n        scheduleController = ScheduleController(context).create({\n            type: type,\n            mimeType: mimeType,\n            metricsModel: metricsModel,\n            adapter: adapter,\n            dashMetrics: dashMetrics,\n            dashManifestModel: dashManifestModel,\n            timelineConverter: timelineConverter,\n            mediaPlayerModel: mediaPlayerModel,\n            abrController: abrController,\n            playbackController: playbackController,\n            streamController: streamController,\n            textController: textController,\n            streamProcessor: instance,\n            mediaController: mediaController\n        });\n        representationController = RepresentationController(context).create();\n        representationController.setConfig({\n            abrController: abrController,\n            domStorage: domStorage,\n            metricsModel: metricsModel,\n            dashMetrics: dashMetrics,\n            dashManifestModel: dashManifestModel,\n            manifestModel: manifestModel,\n            playbackController: playbackController,\n            timelineConverter: timelineConverter,\n            streamProcessor: instance\n        });\n        bufferController.initialize(mediaSource);\n        scheduleController.initialize();\n        representationController.initialize();\n    }\n\n    function registerExternalController(controller) {\n        spExternalControllers.push(controller);\n    }\n\n    function unregisterExternalController(controller) {\n        var index = spExternalControllers.indexOf(controller);\n\n        if (index !== -1) {\n            spExternalControllers.splice(index, 1);\n        }\n    }\n\n    function getExternalControllers() {\n        return spExternalControllers;\n    }\n\n    function unregisterAllExternalController() {\n        spExternalControllers = [];\n    }\n\n    function resetInitialSettings() {\n        mediaInfoArr = [];\n        mediaInfo = null;\n        unregisterAllExternalController();\n    }\n\n    function reset(errored, keepBuffers) {\n        indexHandler.reset();\n\n        if (bufferController) {\n            bufferController.reset(errored, keepBuffers);\n            bufferController = null;\n        }\n\n        if (scheduleController) {\n            scheduleController.reset();\n            scheduleController = null;\n        }\n\n        if (representationController) {\n            representationController.reset();\n            representationController = null;\n        }\n\n        if (abrController) {\n            abrController.unRegisterStreamType(type);\n        }\n        spExternalControllers.forEach(function (controller) {\n            controller.reset();\n        });\n\n        resetInitialSettings();\n        type = null;\n        stream = null;\n        if (liveEdgeFinder) {\n            liveEdgeFinder.reset();\n            liveEdgeFinder = null;\n        }\n    }\n\n    function isUpdating() {\n        return representationController ? representationController.isUpdating() : false;\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getRepresentationController() {\n        return representationController;\n    }\n\n    function getIndexHandler() {\n        return indexHandler;\n    }\n\n    function getFragmentController() {\n        return stream ? stream.getFragmentController() : null;\n    }\n\n    function getBuffer() {\n        return bufferController.getBuffer();\n    }\n\n    function setBuffer(buffer) {\n        bufferController.setBuffer(buffer);\n    }\n\n    function getBufferController() {\n        return bufferController;\n    }\n\n    function getFragmentModel() {\n        return fragmentModel;\n    }\n\n    function getLiveEdgeFinder() {\n        return liveEdgeFinder;\n    }\n\n    function getStreamInfo() {\n        return stream ? stream.getStreamInfo() : null;\n    }\n\n    function addInbandEvents(events) {\n        if (stream) {\n            stream.addInbandEvents(events);\n        }\n    }\n\n    function selectMediaInfo(newMediaInfo) {\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\n            mediaInfo = newMediaInfo;\n        }\n        adapter.updateData(this);\n    }\n\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\n            mediaInfoArr.push(newMediaInfo);\n        }\n\n        if (selectNewMediaInfo) {\n            this.selectMediaInfo(newMediaInfo);\n        }\n    }\n\n    function getMediaInfoArr() {\n        return mediaInfoArr;\n    }\n\n    function getMediaInfo() {\n        return mediaInfo;\n    }\n\n    function getMediaSource() {\n        return bufferController.getMediaSource();\n    }\n\n    function setMediaSource(mediaSource) {\n        bufferController.setMediaSource(mediaSource, getMediaInfo());\n    }\n\n    function dischargePreBuffer() {\n        bufferController.dischargePreBuffer();\n    }\n\n    function getScheduleController() {\n        return scheduleController;\n    }\n\n    function getRepresentationInfo(quality) {\n        return adapter.getRepresentationInfo(representationController, quality);\n    }\n\n    function isBufferingCompleted() {\n        if (bufferController) {\n            return bufferController.getIsBufferingCompleted();\n        }\n\n        return false;\n    }\n\n    function timeIsBuffered(time) {\n        if (bufferController) {\n            return bufferController.getRangeAt(time, 0) !== null;\n        }\n\n        return false;\n    }\n\n    function getBufferLevel() {\n        return bufferController.getBufferLevel();\n    }\n\n    function switchInitData(representationId, bufferResetEnabled) {\n        if (bufferController) {\n            bufferController.switchInitData(getStreamInfo().id, representationId, bufferResetEnabled);\n        }\n    }\n\n    function createBuffer(previousBuffers) {\n        return (bufferController.getBuffer() || bufferController.createBuffer(mediaInfo, previousBuffers));\n    }\n\n    function switchTrackAsked() {\n        scheduleController.switchTrackAsked();\n    }\n\n    function createBufferControllerForType(type) {\n        let controller = null;\n\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\n            controller = BufferController(context).create({\n                type: type,\n                metricsModel: metricsModel,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                errHandler: errHandler,\n                streamController: streamController,\n                mediaController: mediaController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                streamProcessor: instance\n            });\n        } else {\n            controller = TextBufferController(context).create({\n                type: type,\n                mimeType: mimeType,\n                metricsModel: metricsModel,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                errHandler: errHandler,\n                streamController: streamController,\n                mediaController: mediaController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                streamProcessor: instance\n            });\n        }\n\n        return controller;\n    }\n\n    instance = {\n        initialize: initialize,\n        isUpdating: isUpdating,\n        getType: getType,\n        getBufferController: getBufferController,\n        getFragmentModel: getFragmentModel,\n        getScheduleController: getScheduleController,\n        getLiveEdgeFinder: getLiveEdgeFinder,\n        getFragmentController: getFragmentController,\n        getRepresentationController: getRepresentationController,\n        getIndexHandler: getIndexHandler,\n        getRepresentationInfo: getRepresentationInfo,\n        getBufferLevel: getBufferLevel,\n        switchInitData: switchInitData,\n        isBufferingCompleted: isBufferingCompleted,\n        timeIsBuffered: timeIsBuffered,\n        createBuffer: createBuffer,\n        getStreamInfo: getStreamInfo,\n        selectMediaInfo: selectMediaInfo,\n        addMediaInfo: addMediaInfo,\n        switchTrackAsked: switchTrackAsked,\n        getMediaInfoArr: getMediaInfoArr,\n        getMediaInfo: getMediaInfo,\n        getMediaSource: getMediaSource,\n        setMediaSource: setMediaSource,\n        dischargePreBuffer: dischargePreBuffer,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        registerExternalController: registerExternalController,\n        unregisterExternalController: unregisterExternalController,\n        getExternalControllers: getExternalControllers,\n        unregisterAllExternalController: unregisterAllExternalController,\n        addInbandEvents: addInbandEvents,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\nexport default FactoryMaker.getClassFactory(StreamProcessor);\n"]}