{"version":3,"sources":["../../../../../../src/streaming/vo/metrics/ManifestUpdate.js"],"names":["ManifestUpdate","constructor","mediaType","type","requestTime","fetchTime","availabilityStartTime","presentationStartTime","clientTimeOffset","currentTime","buffered","latency","streamInfo","representationInfo","ManifestUpdateStreamInfo","id","index","start","duration","ManifestUpdateRepresentationInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;AAGA,MAAMA,cAAN,CAAqB;AACjB;;;AAGAC,gBAAc;;AAEV;;;;AAIA,SAAKC,SAAL,GAAiB,IAAjB;AACA;;;;AAIA,SAAKC,IAAL,GAAY,IAAZ;AACA;;;;AAIA,SAAKC,WAAL,GAAmB,IAAnB;AACA;;;;AAIA,SAAKC,SAAL,GAAiB,IAAjB;AACA;;;;AAIA,SAAKC,qBAAL,GAA6B,IAA7B;AACA;;;;AAIA,SAAKC,qBAAL,GAA6B,CAA7B;AACA;;;;AAIA,SAAKC,gBAAL,GAAwB,CAAxB;AACA;;;;AAIA,SAAKC,WAAL,GAAmB,IAAnB;AACA;;;;AAIA,SAAKC,QAAL,GAAgB,IAAhB;AACA;;;;AAIA,SAAKC,OAAL,GAAe,CAAf;AACA;;;;AAIA,SAAKC,UAAL,GAAkB,EAAlB;AACA;;;;AAIA,SAAKC,kBAAL,GAA0B,EAA1B;AAEH;AAnEgB;;AAsErB;;;AAGA,MAAMC,wBAAN,CAA+B;AAC3B;;;AAGAb,gBAAc;AACV;;;;AAIA,SAAKc,EAAL,GAAU,IAAV;AACA;;;;AAIA,SAAKC,KAAL,GAAa,IAAb;AACA;;;;AAIA,SAAKC,KAAL,GAAa,IAAb;AACA;;;;AAIA,SAAKC,QAAL,GAAgB,IAAhB;AACH;AAzB0B;;AA4B/B;;;AAGA,MAAMC,gCAAN,CAAuC;AACnC;;;AAGAlB,gBAAc;AACV;;;;AAIA,SAAKc,EAAL,GAAU,IAAV;AACA;;;;AAIA,SAAKC,KAAL,GAAa,IAAb;AACA;;;;AAIA,SAAKd,SAAL,GAAiB,IAAjB;AACA;;;;AAIA,SAAKkB,WAAL,GAAmB,IAAnB;AACA;;;;AAIA,SAAKC,sBAAL,GAA8B,IAA9B;AACA;;;;AAIA,SAAKC,WAAL,GAAmB,IAAnB;AACA;;;;AAIA,SAAKC,gBAAL,GAAwB,IAAxB;AACH;AAxCkC;;AA2CvC,SAASvB,cAAT,EAAyBc,wBAAzB,EAAmDK,gCAAnD","file":"ManifestUpdate.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc This Object holds reference to the manifest update information.\n */\nclass ManifestUpdate {\n    /**\n     * @class\n     */\n    constructor() {\n\n        /**\n         * Media Type Video | Audio | FragmentedText\n         * @public\n         */\n        this.mediaType = null;\n        /**\n         * MPD Type static | dynamic\n         * @public\n         */\n        this.type = null;\n        /**\n         * When this manifest update was requested\n         * @public\n         */\n        this.requestTime = null;\n        /**\n         * When this manifest update was received\n         * @public\n         */\n        this.fetchTime = null;\n        /**\n         * Calculated Availability Start time of the stream.\n         * @public\n         */\n        this.availabilityStartTime = null;\n        /**\n         * the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n         * @public\n         */\n        this.presentationStartTime = 0;\n        /**\n         * The calculated difference between the server and client wall clock time\n         * @public\n         */\n        this.clientTimeOffset = 0;\n        /**\n         * Actual element.currentTime\n         * @public\n         */\n        this.currentTime = null;\n        /**\n         * Actual element.ranges\n         * @public\n         */\n        this.buffered = null;\n        /**\n         * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)\n         * @public\n         */\n        this.latency = 0;\n        /**\n         * Array holding list of StreamInfo VO Objects\n         * @public\n         */\n        this.streamInfo = [];\n        /**\n         * Array holding list of RepresentationInfo VO Objects\n         * @public\n         */\n        this.representationInfo = [];\n\n    }\n}\n\n/**\n * @classdesc This Object holds reference to the current period's stream information when the manifest was updated.\n */\nclass ManifestUpdateStreamInfo {\n    /**\n     * @class\n     */\n    constructor() {\n        /**\n         * Stream@id\n         * @public\n         */\n        this.id = null;\n        /**\n         * Period Index\n         * @public\n         */\n        this.index = null;\n        /**\n         * Stream@start\n         * @public\n         */\n        this.start = null;\n        /**\n         * Stream@duration\n         * @public\n         */\n        this.duration = null;\n    }\n}\n\n/**\n * @classdesc This Object holds reference to the current representation's info when the manifest was updated.\n */\nclass ManifestUpdateRepresentationInfo {\n    /**\n     * @class\n     */\n    constructor() {\n        /**\n         * Track@id\n         * @public\n         */\n        this.id = null;\n        /**\n         * Representation Index\n         * @public\n         */\n        this.index = null;\n        /**\n         * Media Type Video | Audio | FragmentedText\n         * @public\n         */\n        this.mediaType = null;\n        /**\n         * Which representation\n         * @public\n         */\n        this.streamIndex = null;\n        /**\n         * Holds reference to @presentationTimeOffset\n         * @public\n         */\n        this.presentationTimeOffset = null;\n        /**\n         * Holds reference to @startNumber\n         * @public\n         */\n        this.startNumber = null;\n        /**\n         * list|template|timeline\n         * @public\n         */\n        this.fragmentInfoType = null;\n    }\n}\n\nexport { ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo };\n"]}