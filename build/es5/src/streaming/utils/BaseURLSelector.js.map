{"version":3,"sources":["../../../../../src/streaming/utils/BaseURLSelector.js"],"names":["Errors","EventBus","Events","BlacklistController","DVBSelector","BasicSelector","FactoryMaker","DashJSError","Constants","BaseURLSelector","context","eventBus","getInstance","dashManifestModel","instance","serviceLocationBlacklistController","basicSelector","dvbSelector","selector","setup","create","updateEventName","SERVICE_LOCATION_BLACKLIST_CHANGED","addBlacklistEventName","SERVICE_LOCATION_BLACKLIST_ADD","blacklistController","setConfig","config","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","chooseSelectorFromManifest","manifest","getIsDVB","select","data","baseUrls","selectedIdx","isNaN","selectedBaseUrl","trigger","URL_RESOLUTION_FAILED","error","URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE","URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE","reset","indexOf","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"BaseURLSelector.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Errors from '../../core/errors/Errors';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport BlacklistController from '../controllers/BlacklistController';\nimport DVBSelector from './baseUrlResolution/DVBSelector';\nimport BasicSelector from './baseUrlResolution/BasicSelector';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport DashJSError from '../vo/DashJSError';\nimport Constants from '../constants/Constants';\n\nfunction BaseURLSelector() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    let dashManifestModel;\n\n    let instance,\n        serviceLocationBlacklistController,\n        basicSelector,\n        dvbSelector,\n        selector;\n\n    function setup() {\n        serviceLocationBlacklistController = BlacklistController(context).create({\n            updateEventName:        Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            addBlacklistEventName:    Events.SERVICE_LOCATION_BLACKLIST_ADD\n        });\n\n        basicSelector = BasicSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        dvbSelector = DVBSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        selector = basicSelector;\n    }\n\n    function setConfig(config) {\n        if (config.selector) {\n            selector = config.selector;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n    }\n\n    function checkConfig() {\n        if (!dashManifestModel || !dashManifestModel.hasOwnProperty('getIsDVB')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function chooseSelectorFromManifest(manifest) {\n        checkConfig();\n        if (dashManifestModel.getIsDVB(manifest)) {\n            selector = dvbSelector;\n        } else {\n            selector = basicSelector;\n        }\n    }\n\n    function select(data) {\n        if (!data) {\n            return;\n        }\n        const baseUrls = data.baseUrls;\n        const selectedIdx = data.selectedIdx;\n\n        // Once a random selection has been carried out amongst a group of BaseURLs with the same\n        // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n        // unless the blacklist has been modified or the available BaseURLs have changed.\n        if (!isNaN(selectedIdx)) {\n            return baseUrls[selectedIdx];\n        }\n\n        let selectedBaseUrl = selector.select(baseUrls);\n\n        if (!selectedBaseUrl) {\n            eventBus.trigger(\n                Events.URL_RESOLUTION_FAILED, {\n                    error: new DashJSError(\n                        Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,\n                        Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE\n                    )\n                }\n            );\n            if (selector === basicSelector) {\n                reset();\n            }\n            return;\n        }\n\n        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n\n        return selectedBaseUrl;\n    }\n\n    function reset() {\n        serviceLocationBlacklistController.reset();\n    }\n\n    instance = {\n        chooseSelectorFromManifest: chooseSelectorFromManifest,\n        select: select,\n        reset: reset,\n        setConfig: setConfig\n    };\n\n    setup();\n\n    return instance;\n}\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nexport default FactoryMaker.getClassFactory(BaseURLSelector);\n"]}