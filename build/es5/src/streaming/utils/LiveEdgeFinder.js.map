{"version":3,"sources":["../../../../../src/streaming/utils/LiveEdgeFinder.js"],"names":["FactoryMaker","Constants","LiveEdgeFinder","config","instance","timelineConverter","streamProcessor","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","getLiveEdge","representationInfo","getRepresentationInfo","dvrEnd","DVRWindow","end","liveEdge","useCalculatedLiveEdgeTime","getExpectedLiveEdge","setClientTimeOffset","reset","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA;;;;;AAKA,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;;AAE5BA,aAASA,UAAU,EAAnB;AACA,QAAIC,QAAJ;AACA,QAAIC,oBAAoBF,OAAOE,iBAA/B;AACA,QAAIC,kBAAkBH,OAAOG,eAA7B;;AAEA,aAASC,WAAT,GAAuB;AACnB,YAAI,CAACF,iBAAD,IAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,qBAAjC,CAAvB,IAAkF,CAACF,eAAnF,IAAsG,CAACA,gBAAgBE,cAAhB,CAA+B,uBAA/B,CAA3G,EAAoK;AAChK,kBAAM,IAAIC,KAAJ,CAAUR,UAAUS,oBAApB,CAAN;AACH;AACJ;;AAED,aAASC,WAAT,GAAuB;AACnBJ;AACA,cAAMK,qBAAqBN,gBAAgBO,qBAAhB,EAA3B;AACA,cAAMC,SAASF,mBAAmBG,SAAnB,GAA+BH,mBAAmBG,SAAnB,CAA6BC,GAA5D,GAAkE,CAAjF;AACA,YAAIC,WAAWH,MAAf;AACA,YAAIF,mBAAmBM,yBAAvB,EAAkD;AAC9CD,uBAAWZ,kBAAkBc,mBAAlB,EAAX;AACAd,8BAAkBe,mBAAlB,CAAsCH,WAAWH,MAAjD;AACH;AACD,eAAOG,QAAP;AACH;;AAED,aAASI,KAAT,GAAiB;AACbhB,4BAAoB,IAApB;AACAC,0BAAkB,IAAlB;AACH;;AAEDF,eAAW;AACPO,qBAAaA,WADN;AAEPU,eAAOA;AAFA,KAAX;;AAKA,WAAOjB,QAAP;AACH;;AAEDF,eAAeoB,qBAAf,GAAuC,gBAAvC;AACA,eAAetB,aAAauB,eAAb,CAA6BrB,cAA7B,CAAf","file":"LiveEdgeFinder.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../constants/Constants';\n\n/**\n * @param {Object} config\n * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}\n * @constructor\n */\nfunction LiveEdgeFinder(config) {\n\n    config = config || {};\n    let instance;\n    let timelineConverter = config.timelineConverter;\n    let streamProcessor = config.streamProcessor;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('getExpectedLiveEdge') || !streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationInfo')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getLiveEdge() {\n        checkConfig();\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        const dvrEnd = representationInfo.DVRWindow ? representationInfo.DVRWindow.end : 0;\n        let liveEdge = dvrEnd;\n        if (representationInfo.useCalculatedLiveEdgeTime) {\n            liveEdge = timelineConverter.getExpectedLiveEdge();\n            timelineConverter.setClientTimeOffset(liveEdge - dvrEnd);\n        }\n        return liveEdge;\n    }\n\n    function reset() {\n        timelineConverter = null;\n        streamProcessor = null;\n    }\n\n    instance = {\n        getLiveEdge: getLiveEdge,\n        reset: reset\n    };\n\n    return instance;\n}\n\nLiveEdgeFinder.__dashjs_factory_name = 'LiveEdgeFinder';\nexport default FactoryMaker.getClassFactory(LiveEdgeFinder);"]}