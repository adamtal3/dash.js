{"version":3,"sources":["../../../../../src/streaming/utils/TTMLParser.js"],"names":["FactoryMaker","Debug","EventBus","Events","fromXML","generateISD","TTMLParser","context","eventBus","getInstance","instance","logger","cueCounter","setup","getLogger","getCueID","id","parse","data","offsetTime","startTimeSegment","endTimeSegment","images","errorMsg","captionArray","startTime","endTime","i","content","embeddedImages","currentImageId","accumulated_image_data","metadataHandler","onOpenTag","ns","name","attrs","value","warn","onCloseTag","trim","onText","contents","Error","trigger","TTML_TO_PARSE","imsc1doc","msg","TTML_PARSED","ttmlString","ttmlDoc","mediaTimeEvents","getMediaTimeEvents","length","isd","error","some","topLevelContents","push","start","end","type","cueID","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"TTMLParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport { fromXML, generateISD } from 'imsc';\n\nfunction TTMLParser() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    /*\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n     * */\n    let instance,\n        logger;\n\n    let cueCounter = 0; // Used to give every cue a unique ID.\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getCueID() {\n        const id = 'cue_TTML_' + cueCounter;\n        cueCounter++;\n        return id;\n    }\n\n    /**\n     * Parse the raw data and process it to return the HTML element representing the cue.\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\n     * @param {string} data - raw data received from the TextSourceBuffer\n     * @param {number} offsetTime - offset time to apply to cue time\n     * @param {integer} startTimeSegment - startTime for the current segment\n     * @param {integer} endTimeSegment - endTime for the current segment\n     * @param {Array} images - images array referenced by subs MP4 box\n     */\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n        let errorMsg = '';\n        const captionArray = [];\n        let startTime,\n            endTime,\n            i;\n\n        const content = {};\n\n        const embeddedImages = {};\n        let currentImageId = '';\n        let accumulated_image_data = '';\n        let metadataHandler = {\n\n            onOpenTag: function (ns, name, attrs) {\n                if (name === 'image' && ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt') {\n                    if (!attrs[' imagetype'] || attrs[' imagetype'].value !== 'PNG') {\n                        logger.warn('smpte-tt imagetype != PNG. Discarded');\n                        return;\n                    }\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n                }\n            },\n\n            onCloseTag: function () {\n                if (currentImageId) {\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\n                }\n                accumulated_image_data = '';\n                currentImageId = '';\n            },\n\n            onText: function (contents) {\n                if (currentImageId) {\n                    accumulated_image_data = accumulated_image_data + contents;\n                }\n            }\n        };\n\n        if (!data) {\n            errorMsg = 'no ttml data to parse';\n            throw new Error(errorMsg);\n        }\n\n        content.data = data;\n\n        eventBus.trigger(Events.TTML_TO_PARSE, content);\n\n        const imsc1doc = fromXML(content.data, function (msg) {\n            errorMsg = msg;\n        }, metadataHandler);\n\n        eventBus.trigger(Events.TTML_PARSED, {ttmlString: content.data, ttmlDoc: imsc1doc});\n\n        const mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n        for (i = 0; i < mediaTimeEvents.length; i++) {\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\n                errorMsg = error;\n            });\n\n            if (isd.contents.some(topLevelContents => topLevelContents.contents.length)) {\n                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n                startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\n                endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\n\n                if (startTime < endTime) {\n                    captionArray.push({\n                        start: startTime,\n                        end: endTime,\n                        type: 'html',\n                        cueID: getCueID(),\n                        isd: isd,\n                        images: images,\n                        embeddedImages: embeddedImages\n                    });\n                }\n            }\n        }\n\n        if (errorMsg !== '') {\n            logger.error(errorMsg);\n            throw new Error(errorMsg);\n        }\n\n        return captionArray;\n    }\n\n    instance = {\n        parse: parse\n    };\n\n    setup();\n    return instance;\n}\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexport default FactoryMaker.getSingletonFactory(TTMLParser);\n"]}