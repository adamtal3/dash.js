{"version":3,"sources":["../../../../../src/streaming/utils/DOMStorage.js"],"names":["FactoryMaker","Debug","Constants","legacyKeysAndReplacements","oldKey","newKey","LOCAL_STORAGE_BITRATE_KEY_TEMPLATE","LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE","STORAGE_TYPE_LOCAL","STORAGE_TYPE_SESSION","LAST_BITRATE","LAST_MEDIA_SETTINGS","DOMStorage","config","context","mediaPlayerModel","instance","logger","supported","setup","getInstance","getLogger","translateLegacyKeys","isSupported","type","undefined","testKey","testValue","storage","window","error","warn","message","setItem","removeItem","forEach","entry","value","localStorage","getItem","e","getTimestamp","ten_minutes_ms","Math","round","Date","getTime","canStore","storageType","key","enabled","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","getSavedMediaSettings","settings","replace","obj","JSON","parse","isExpired","parseInt","timestamp","getLastMediaSettingsCachingInfo","ttl","getSavedBitrateSettings","savedBitrate","NaN","bitrate","parseFloat","isNaN","debug","setSavedMediaSettings","stringify","setSavedBitrateSettings","toFixed","__dashjs_factory_name","factory","getSingletonFactory"],"mappings":"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","file":"DOMStorage.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport Constants from '../constants/Constants';\n\nconst legacyKeysAndReplacements = [\n    { oldKey: 'dashjs_vbitrate',  newKey: 'dashjs_video_bitrate' },\n    { oldKey: 'dashjs_abitrate',  newKey: 'dashjs_audio_bitrate' },\n    { oldKey: 'dashjs_vsettings', newKey: 'dashjs_video_settings' },\n    { oldKey: 'dashjs_asettings', newKey: 'dashjs_audio_settings' }\n];\n\nconst LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\nconst LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\n\nconst STORAGE_TYPE_LOCAL = 'localStorage';\nconst STORAGE_TYPE_SESSION = 'sessionStorage';\nconst LAST_BITRATE = 'LastBitrate';\nconst LAST_MEDIA_SETTINGS = 'LastMediaSettings';\n\nfunction DOMStorage(config) {\n\n    config = config || {};\n    const context = this.context;\n    const mediaPlayerModel = config.mediaPlayerModel;\n\n    let instance,\n        logger,\n        supported;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        translateLegacyKeys();\n    }\n\n    //type can be local, session\n    function isSupported(type) {\n        if (supported !== undefined) return supported;\n\n        supported = false;\n\n        const testKey = '1';\n        const testValue = '1';\n        let storage;\n\n        try {\n            if (typeof window !== 'undefined') {\n                storage = window[type];\n            }\n        } catch (error) {\n            logger.warn('DOMStorage access denied: ' + error.message);\n            return supported;\n        }\n\n        if (!storage || (type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION)) {\n            return supported;\n        }\n\n        /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\n         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\n\n         Check if the storage can be used\n         */\n        try {\n            storage.setItem(testKey, testValue);\n            storage.removeItem(testKey);\n            supported = true;\n        } catch (error) {\n            logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\n        }\n\n        return supported;\n    }\n\n    function translateLegacyKeys() {\n        if (isSupported(STORAGE_TYPE_LOCAL)) {\n            legacyKeysAndReplacements.forEach(entry => {\n                const value = localStorage.getItem(entry.oldKey);\n\n                if (value) {\n                    localStorage.removeItem(entry.oldKey);\n\n                    try {\n                        localStorage.setItem(entry.newKey, value);\n                    } catch (e) {\n                        logger.error(e.message);\n                    }\n                }\n            });\n        }\n    }\n\n    // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\n    function getTimestamp() {\n        const ten_minutes_ms = 60 * 1000 * 10;\n        return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\n    }\n\n    function canStore(storageType, key) {\n        return isSupported(storageType) && mediaPlayerModel['get' + key + 'CachingInfo']().enabled;\n    }\n\n    function checkConfig() {\n        if (!mediaPlayerModel || !mediaPlayerModel.hasOwnProperty('getLastMediaSettingsCachingInfo')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSavedMediaSettings(type) {\n        checkConfig();\n        //Checks local storage to see if there is valid, non-expired media settings\n        if (!canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) return null;\n\n        let settings = null;\n        const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n        try {\n            const obj = JSON.parse(localStorage.getItem(key)) || {};\n            const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;\n            settings = obj.settings;\n\n            if (isExpired) {\n                localStorage.removeItem(key);\n                settings = null;\n            }\n        } catch (e) {\n            return null;\n        }\n        return settings;\n    }\n\n    function getSavedBitrateSettings(type) {\n        let savedBitrate = NaN;\n\n        checkConfig();\n\n        //Checks local storage to see if there is valid, non-expired bit rate\n        //hinting from the last play session to use as a starting bit rate.\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;\n                const bitrate = parseFloat(obj.bitrate);\n\n                if (!isNaN(bitrate) && !isExpired) {\n                    savedBitrate = bitrate;\n                    logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\n                } else if (isExpired) {\n                    localStorage.removeItem(key);\n                }\n            } catch (e) {\n                return null;\n            }\n        }\n        return savedBitrate;\n    }\n\n    function setSavedMediaSettings(type, value) {\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                localStorage.setItem(key, JSON.stringify({settings: value, timestamp: getTimestamp()}));\n            } catch (e) {\n                logger.error(e.message);\n            }\n        }\n    }\n\n    function setSavedBitrateSettings(type, bitrate) {\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                localStorage.setItem(key, JSON.stringify({bitrate: bitrate.toFixed(3), timestamp: getTimestamp()}));\n            } catch (e) {\n                logger.error(e.message);\n            }\n        }\n    }\n\n    instance = {\n        getSavedBitrateSettings: getSavedBitrateSettings,\n        setSavedBitrateSettings: setSavedBitrateSettings,\n        getSavedMediaSettings: getSavedMediaSettings,\n        setSavedMediaSettings: setSavedMediaSettings\n    };\n\n    setup();\n    return instance;\n}\n\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\nconst factory = FactoryMaker.getSingletonFactory(DOMStorage);\nexport default factory;\n"]}