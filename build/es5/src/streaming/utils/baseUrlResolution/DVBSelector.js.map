{"version":3,"sources":["../../../../../../src/streaming/utils/baseUrlResolution/DVBSelector.js"],"names":["FactoryMaker","DVBSelector","config","instance","blacklistController","getNonBlacklistedBaseUrls","urls","removedPriorities","samePrioritiesFilter","el","length","dvb_priority","indexOf","serviceLocationFilter","baseUrl","contains","serviceLocation","push","filter","selectByWeight","availableUrls","prioritySorter","a","b","diff","isNaN","topPriorityFilter","idx","arr","totalWeight","cumulWeights","rn","sort","forEach","dvb_weight","Math","floor","random","every","limit","index","select","baseUrls","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"DVBSelector.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction DVBSelector(config) {\n\n    config = config || {};\n    let instance;\n\n    const blacklistController = config.blacklistController;\n\n    function getNonBlacklistedBaseUrls(urls) {\n        let removedPriorities = [];\n\n        const samePrioritiesFilter = function (el) {\n            if (removedPriorities.length) {\n                if ((el.dvb_priority) &&\n                        (removedPriorities.indexOf(el.dvb_priority) !== -1)) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n\n        const serviceLocationFilter = function (baseUrl) {\n            if (blacklistController.contains(baseUrl.serviceLocation)) {\n                // whenever a BaseURL is removed from the available list of\n                // BaseURLs, any other BaseURL with the same @priority\n                // value as the BaseURL being removed shall also be removed\n                if (baseUrl.dvb_priority) {\n                    removedPriorities.push(baseUrl.dvb_priority);\n                }\n\n                // all URLs in the list which have a @serviceLocation\n                // attribute matching an entry in the blacklist shall be\n                // removed from the available list of BaseURLs\n                return false;\n            }\n\n            return true;\n        };\n\n        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\n    }\n\n    function selectByWeight(availableUrls) {\n        const prioritySorter = function (a, b) {\n            let diff = a.dvb_priority - b.dvb_priority;\n            return isNaN(diff) ? 0 : diff;\n        };\n\n        const topPriorityFilter = function (baseUrl, idx, arr) {\n            return !idx || (\n                (arr[0].dvb_priority && baseUrl.dvb_priority) &&\n                (arr[0].dvb_priority === baseUrl.dvb_priority)\n            );\n        };\n\n        let totalWeight = 0;\n        let cumulWeights = [];\n        let idx = 0;\n        let rn,\n            urls;\n\n        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\n        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\n        // @priority attribute value.\n        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\n\n        if (urls.length) {\n            if (urls.length > 1) {\n                // If there is more than one BaseURL with this lowest @priority attribute value then the Player\n                // shall select one of them at random such that the probability of each BaseURL being chosen\n                // is proportional to the value of its @weight attribute. The method described in RFC 2782\n                // [26] or picking from a number of weighted entries is suitable for this, but there may be other\n                // algorithms which achieve the same effect.\n\n                // add all the weights together, storing the accumulated weight per entry\n                urls.forEach(baseUrl => {\n                    totalWeight += baseUrl.dvb_weight;\n                    cumulWeights.push(totalWeight);\n                });\n\n                // pick a random number between zero and totalWeight\n                rn = Math.floor(Math.random() * (totalWeight - 1));\n\n                // select the index for the range rn falls within\n                cumulWeights.every((limit, index) => {\n                    idx = index;\n\n                    if (rn < limit) {\n                        return false;\n                    }\n\n                    return true;\n                });\n            }\n\n            return urls[idx];\n        }\n    }\n\n    function select(baseUrls) {\n        return baseUrls && selectByWeight(\n            getNonBlacklistedBaseUrls(\n                baseUrls\n            )\n        );\n    }\n\n    instance = {\n        select: select\n    };\n\n    return instance;\n}\n\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\nexport default FactoryMaker.getClassFactory(DVBSelector);\n"]}