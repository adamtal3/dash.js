{"version":3,"sources":["../../../../src/streaming/ManifestUpdater.js"],"names":["EventBus","Events","FactoryMaker","Debug","Errors","ManifestUpdater","context","eventBus","getInstance","instance","logger","refreshDelay","refreshTimer","isPaused","isUpdating","manifestLoader","manifestModel","dashManifestModel","errHandler","mediaPlayerModel","setup","getLogger","setConfig","config","initialize","resetInitialSettings","on","STREAMS_COMPOSED","onStreamsComposed","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_PAUSED","onPlaybackPaused","INTERNAL_MANIFEST_LOADED","onManifestLoaded","setManifest","manifest","update","NaN","stopManifestRefreshTimer","reset","off","clearInterval","startManifestRefreshTimer","delay","isNaN","debug","setTimeout","onRefreshTimer","refreshManifest","getValue","url","location","getLocation","load","setValue","date","Date","latencyOfLastUpdate","getTime","loadedTime","getManifestUpdatePeriod","trigger","MANIFEST_UPDATED","info","getScheduleWhilePaused","getManifestUpdateRetryInterval","e","error","code","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"ManifestUpdater.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport Errors from '../core/errors/Errors';\n\nfunction ManifestUpdater() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        refreshDelay,\n        refreshTimer,\n        isPaused,\n        isUpdating,\n        manifestLoader,\n        manifestModel,\n        dashManifestModel,\n        errHandler,\n        mediaPlayerModel;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.manifestLoader) {\n            manifestLoader = config.manifestLoader;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n    }\n\n    function initialize() {\n        resetInitialSettings();\n\n        eventBus.on(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n    }\n\n    function setManifest(manifest) {\n        update(manifest);\n    }\n\n    function resetInitialSettings() {\n        refreshDelay = NaN;\n        isUpdating = false;\n        isPaused = true;\n        stopManifestRefreshTimer();\n    }\n\n    function reset() {\n\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.off(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n\n        resetInitialSettings();\n    }\n\n    function stopManifestRefreshTimer() {\n        if (refreshTimer !== null) {\n            clearInterval(refreshTimer);\n            refreshTimer = null;\n        }\n    }\n\n    function startManifestRefreshTimer(delay) {\n        stopManifestRefreshTimer();\n\n        if (isNaN(delay) && !isNaN(refreshDelay)) {\n            delay = refreshDelay * 1000;\n        }\n\n        if (!isNaN(delay)) {\n            logger.debug('Refresh manifest in ' + delay + ' milliseconds.');\n            refreshTimer = setTimeout(onRefreshTimer, delay);\n        }\n    }\n\n    function refreshManifest() {\n        isUpdating = true;\n        const manifest = manifestModel.getValue();\n        let url = manifest.url;\n        const location = dashManifestModel.getLocation(manifest);\n        if (location) {\n            url = location;\n        }\n        manifestLoader.load(url);\n    }\n\n    function update(manifest) {\n\n        manifestModel.setValue(manifest);\n\n        const date = new Date();\n        const latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1000;\n        refreshDelay = dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);\n        // setTimeout uses a 32 bit number to store the delay. Any number greater than it\n        // will cause event associated with setTimeout to trigger immediately\n        if (refreshDelay * 1000 > 0x7FFFFFFF) {\n            refreshDelay = 0x7FFFFFFF / 1000;\n        }\n        eventBus.trigger(Events.MANIFEST_UPDATED, {manifest: manifest});\n        logger.info('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');\n\n        if (!isPaused) {\n            startManifestRefreshTimer();\n        }\n    }\n\n    function onRefreshTimer() {\n        if (isPaused && !mediaPlayerModel.getScheduleWhilePaused()) {\n            return;\n        }\n        if (isUpdating) {\n            startManifestRefreshTimer(mediaPlayerModel.getManifestUpdateRetryInterval());\n            return;\n        }\n        refreshManifest();\n    }\n\n    function onManifestLoaded(e) {\n        if (!e.error) {\n            update(e.manifest);\n        } else if (e.error.code === Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE) {\n            errHandler.error(e.error);\n        }\n    }\n\n    function onPlaybackStarted (/*e*/) {\n        isPaused = false;\n        startManifestRefreshTimer();\n    }\n\n    function onPlaybackPaused(/*e*/) {\n        isPaused = true;\n        stopManifestRefreshTimer();\n    }\n\n    function onStreamsComposed(/*e*/) {\n        // When streams are ready we can consider manifest update completed. Resolve the update promise.\n        isUpdating = false;\n    }\n\n    instance = {\n        initialize: initialize,\n        setManifest: setManifest,\n        refreshManifest: refreshManifest,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\nManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';\nexport default FactoryMaker.getClassFactory(ManifestUpdater);\n"]}