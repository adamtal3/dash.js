{"version":3,"sources":["../../../../src/streaming/ManifestUpdater.js"],"names":["EventBus","Events","FactoryMaker","Debug","Errors","ManifestUpdater","context","eventBus","getInstance","instance","logger","refreshDelay","refreshTimer","isPaused","isUpdating","manifestLoader","manifestModel","dashManifestModel","errHandler","mediaPlayerModel","setup","getLogger","setConfig","config","initialize","resetInitialSettings","on","STREAMS_COMPOSED","onStreamsComposed","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_PAUSED","onPlaybackPaused","INTERNAL_MANIFEST_LOADED","onManifestLoaded","setManifest","manifest","update","NaN","stopManifestRefreshTimer","reset","off","clearInterval","startManifestRefreshTimer","delay","isNaN","debug","setTimeout","onRefreshTimer","refreshManifest","getValue","url","location","getLocation","load","setValue","date","Date","latencyOfLastUpdate","getTime","loadedTime","getManifestUpdatePeriod","trigger","MANIFEST_UPDATED","info","getScheduleWhilePaused","getManifestUpdateRetryInterval","e","error","code","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,SAASC,eAAT,GAA2B;;AAEvB,UAAMC,UAAU,KAAKA,OAArB;AACA,UAAMC,WAAWP,SAASM,OAAT,EAAkBE,WAAlB,EAAjB;;AAEA,QAAIC,QAAJ,EACIC,MADJ,EAEIC,YAFJ,EAGIC,YAHJ,EAIIC,QAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,aAPJ,EAQIC,iBARJ,EASIC,UATJ,EAUIC,gBAVJ;;AAYA,aAASC,KAAT,GAAiB;AACbV,iBAASP,MAAMG,OAAN,EAAeE,WAAf,GAA6Ba,SAA7B,CAAuCZ,QAAvC,CAAT;AACH;;AAED,aAASa,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,YAAI,CAACA,MAAL,EAAa;;AAEb,YAAIA,OAAOP,aAAX,EAA0B;AACtBA,4BAAgBO,OAAOP,aAAvB;AACH;AACD,YAAIO,OAAON,iBAAX,EAA8B;AAC1BA,gCAAoBM,OAAON,iBAA3B;AACH;AACD,YAAIM,OAAOJ,gBAAX,EAA6B;AACzBA,+BAAmBI,OAAOJ,gBAA1B;AACH;AACD,YAAII,OAAOR,cAAX,EAA2B;AACvBA,6BAAiBQ,OAAOR,cAAxB;AACH;AACD,YAAIQ,OAAOL,UAAX,EAAuB;AACnBA,yBAAaK,OAAOL,UAApB;AACH;AACJ;;AAED,aAASM,UAAT,GAAsB;AAClBC;;AAEAlB,iBAASmB,EAAT,CAAYzB,OAAO0B,gBAAnB,EAAqCC,iBAArC,EAAwD,IAAxD;AACArB,iBAASmB,EAAT,CAAYzB,OAAO4B,gBAAnB,EAAqCC,iBAArC,EAAwD,IAAxD;AACAvB,iBAASmB,EAAT,CAAYzB,OAAO8B,eAAnB,EAAoCC,gBAApC,EAAsD,IAAtD;AACAzB,iBAASmB,EAAT,CAAYzB,OAAOgC,wBAAnB,EAA6CC,gBAA7C,EAA+D,IAA/D;AACH;;AAED,aAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC3BC,eAAOD,QAAP;AACH;;AAED,aAASX,oBAAT,GAAgC;AAC5Bd,uBAAe2B,GAAf;AACAxB,qBAAa,KAAb;AACAD,mBAAW,IAAX;AACA0B;AACH;;AAED,aAASC,KAAT,GAAiB;;AAEbjC,iBAASkC,GAAT,CAAaxC,OAAO4B,gBAApB,EAAsCC,iBAAtC,EAAyD,IAAzD;AACAvB,iBAASkC,GAAT,CAAaxC,OAAO8B,eAApB,EAAqCC,gBAArC,EAAuD,IAAvD;AACAzB,iBAASkC,GAAT,CAAaxC,OAAO0B,gBAApB,EAAsCC,iBAAtC,EAAyD,IAAzD;AACArB,iBAASkC,GAAT,CAAaxC,OAAOgC,wBAApB,EAA8CC,gBAA9C,EAAgE,IAAhE;;AAEAT;AACH;;AAED,aAASc,wBAAT,GAAoC;AAChC,YAAI3B,iBAAiB,IAArB,EAA2B;AACvB8B,0BAAc9B,YAAd;AACAA,2BAAe,IAAf;AACH;AACJ;;AAED,aAAS+B,yBAAT,CAAmCC,KAAnC,EAA0C;AACtCL;;AAEA,YAAIM,MAAMD,KAAN,KAAgB,CAACC,MAAMlC,YAAN,CAArB,EAA0C;AACtCiC,oBAAQjC,eAAe,IAAvB;AACH;;AAED,YAAI,CAACkC,MAAMD,KAAN,CAAL,EAAmB;AACflC,mBAAOoC,KAAP,CAAa,yBAAyBF,KAAzB,GAAiC,gBAA9C;AACAhC,2BAAemC,WAAWC,cAAX,EAA2BJ,KAA3B,CAAf;AACH;AACJ;;AAED,aAASK,eAAT,GAA2B;AACvBnC,qBAAa,IAAb;AACA,cAAMsB,WAAWpB,cAAckC,QAAd,EAAjB;AACA,YAAIC,MAAMf,SAASe,GAAnB;AACA,cAAMC,WAAWnC,kBAAkBoC,WAAlB,CAA8BjB,QAA9B,CAAjB;AACA,YAAIgB,QAAJ,EAAc;AACVD,kBAAMC,QAAN;AACH;AACDrC,uBAAeuC,IAAf,CAAoBH,GAApB;AACH;;AAED,aAASd,MAAT,CAAgBD,QAAhB,EAA0B;;AAEtBpB,sBAAcuC,QAAd,CAAuBnB,QAAvB;;AAEA,cAAMoB,OAAO,IAAIC,IAAJ,EAAb;AACA,cAAMC,sBAAsB,CAACF,KAAKG,OAAL,KAAiBvB,SAASwB,UAAT,CAAoBD,OAApB,EAAlB,IAAmD,IAA/E;AACAhD,uBAAeM,kBAAkB4C,uBAAlB,CAA0CzB,QAA1C,EAAoDsB,mBAApD,CAAf;AACA;AACA;AACA,YAAI/C,eAAe,IAAf,GAAsB,UAA1B,EAAsC;AAClCA,2BAAe,aAAa,IAA5B;AACH;AACDJ,iBAASuD,OAAT,CAAiB7D,OAAO8D,gBAAxB,EAA0C,EAAC3B,UAAUA,QAAX,EAA1C;AACA1B,eAAOsD,IAAP,CAAY,oCAAoCR,IAApC,GAA2C,GAA3C,GAAiDA,KAAKG,OAAL,KAAiB,IAAlE,GAAyE,IAArF;;AAEA,YAAI,CAAC9C,QAAL,EAAe;AACX8B;AACH;AACJ;;AAED,aAASK,cAAT,GAA0B;AACtB,YAAInC,YAAY,CAACM,iBAAiB8C,sBAAjB,EAAjB,EAA4D;AACxD;AACH;AACD,YAAInD,UAAJ,EAAgB;AACZ6B,sCAA0BxB,iBAAiB+C,8BAAjB,EAA1B;AACA;AACH;AACDjB;AACH;;AAED,aAASf,gBAAT,CAA0BiC,CAA1B,EAA6B;AACzB,YAAI,CAACA,EAAEC,KAAP,EAAc;AACV/B,mBAAO8B,EAAE/B,QAAT;AACH,SAFD,MAEO,IAAI+B,EAAEC,KAAF,CAAQC,IAAR,KAAiBjE,OAAOkE,0CAA5B,EAAwE;AAC3EpD,uBAAWkD,KAAX,CAAiBD,EAAEC,KAAnB;AACH;AACJ;;AAED,aAAStC,iBAAT,GAA4B,KAAO;AAC/BjB,mBAAW,KAAX;AACA8B;AACH;;AAED,aAASX,gBAAT,GAA0B,KAAO;AAC7BnB,mBAAW,IAAX;AACA0B;AACH;;AAED,aAASX,iBAAT,GAA2B,KAAO;AAC9B;AACAd,qBAAa,KAAb;AACH;;AAEDL,eAAW;AACPe,oBAAYA,UADL;AAEPW,qBAAaA,WAFN;AAGPc,yBAAiBA,eAHV;AAIP3B,mBAAWA,SAJJ;AAKPkB,eAAOA;AALA,KAAX;;AAQApB;AACA,WAAOX,QAAP;AACH;AACDJ,gBAAgBkE,qBAAhB,GAAwC,iBAAxC;AACA,eAAerE,aAAasE,eAAb,CAA6BnE,eAA7B,CAAf","file":"ManifestUpdater.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport Errors from '../core/errors/Errors';\n\nfunction ManifestUpdater() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        refreshDelay,\n        refreshTimer,\n        isPaused,\n        isUpdating,\n        manifestLoader,\n        manifestModel,\n        dashManifestModel,\n        errHandler,\n        mediaPlayerModel;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.manifestLoader) {\n            manifestLoader = config.manifestLoader;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n    }\n\n    function initialize() {\n        resetInitialSettings();\n\n        eventBus.on(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n    }\n\n    function setManifest(manifest) {\n        update(manifest);\n    }\n\n    function resetInitialSettings() {\n        refreshDelay = NaN;\n        isUpdating = false;\n        isPaused = true;\n        stopManifestRefreshTimer();\n    }\n\n    function reset() {\n\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.off(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n\n        resetInitialSettings();\n    }\n\n    function stopManifestRefreshTimer() {\n        if (refreshTimer !== null) {\n            clearInterval(refreshTimer);\n            refreshTimer = null;\n        }\n    }\n\n    function startManifestRefreshTimer(delay) {\n        stopManifestRefreshTimer();\n\n        if (isNaN(delay) && !isNaN(refreshDelay)) {\n            delay = refreshDelay * 1000;\n        }\n\n        if (!isNaN(delay)) {\n            logger.debug('Refresh manifest in ' + delay + ' milliseconds.');\n            refreshTimer = setTimeout(onRefreshTimer, delay);\n        }\n    }\n\n    function refreshManifest() {\n        isUpdating = true;\n        const manifest = manifestModel.getValue();\n        let url = manifest.url;\n        const location = dashManifestModel.getLocation(manifest);\n        if (location) {\n            url = location;\n        }\n        manifestLoader.load(url);\n    }\n\n    function update(manifest) {\n\n        manifestModel.setValue(manifest);\n\n        const date = new Date();\n        const latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1000;\n        refreshDelay = dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);\n        // setTimeout uses a 32 bit number to store the delay. Any number greater than it\n        // will cause event associated with setTimeout to trigger immediately\n        if (refreshDelay * 1000 > 0x7FFFFFFF) {\n            refreshDelay = 0x7FFFFFFF / 1000;\n        }\n        eventBus.trigger(Events.MANIFEST_UPDATED, {manifest: manifest});\n        logger.info('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');\n\n        if (!isPaused) {\n            startManifestRefreshTimer();\n        }\n    }\n\n    function onRefreshTimer() {\n        if (isPaused && !mediaPlayerModel.getScheduleWhilePaused()) {\n            return;\n        }\n        if (isUpdating) {\n            startManifestRefreshTimer(mediaPlayerModel.getManifestUpdateRetryInterval());\n            return;\n        }\n        refreshManifest();\n    }\n\n    function onManifestLoaded(e) {\n        if (!e.error) {\n            update(e.manifest);\n        } else if (e.error.code === Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE) {\n            errHandler.error(e.error);\n        }\n    }\n\n    function onPlaybackStarted (/*e*/) {\n        isPaused = false;\n        startManifestRefreshTimer();\n    }\n\n    function onPlaybackPaused(/*e*/) {\n        isPaused = true;\n        stopManifestRefreshTimer();\n    }\n\n    function onStreamsComposed(/*e*/) {\n        // When streams are ready we can consider manifest update completed. Resolve the update promise.\n        isUpdating = false;\n    }\n\n    instance = {\n        initialize: initialize,\n        setManifest: setManifest,\n        refreshManifest: refreshManifest,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\nManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';\nexport default FactoryMaker.getClassFactory(ManifestUpdater);\n"]}