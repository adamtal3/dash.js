{"version":3,"sources":["../../../../../src/streaming/text/NotFragmentedTextBufferController.js"],"names":["Constants","EventBus","Events","FactoryMaker","InitCache","SourceBufferSink","TextController","DashJSError","Errors","BUFFER_CONTROLLER_TYPE","NotFragmentedTextBufferController","config","context","eventBus","getInstance","textController","errHandler","type","mimeType","streamProcessor","instance","isBufferingCompleted","initialized","mediaSource","buffer","initCache","setup","on","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","INIT_FRAGMENT_LOADED","onInitFragmentLoaded","getBufferControllerType","initialize","source","setMediaSource","createBuffer","mediaInfo","create","textBuffer","getBuffer","hasOwnProperty","INITIALIZE","e","isText","codec","indexOf","getTextSourceBuffer","mediaSourceError","error","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","message","getType","value","getMediaSource","getStreamProcessor","getIsPruningInProgress","dischargePreBuffer","setSeekStartTime","getBufferLevel","getIsBufferingCompleted","reset","errored","off","abort","sender","chunk","extract","getStreamInfo","id","getCurrentRepresentation","trigger","TIMED_TEXT_REQUESTED","index","fragmentModel","getFragmentModel","bytes","save","append","STREAM_COMPLETED","request","switchInitData","streamId","representationId","getRangeAt","updateTimestampOffset","MSETimeOffset","timestampOffset","isNaN","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,UAAP,KAAsB,wBAAtB,CACA,MAAOC,SAAP,KAAqB,qBAArB,CACA,MAAOC,OAAP,KAAmB,0BAAnB,CACA,MAAOC,aAAP,KAAyB,yBAAzB,CACA,MAAOC,UAAP,KAAsB,oBAAtB,CACA,MAAOC,iBAAP,KAA6B,qBAA7B,CACA,MAAOC,eAAP,KAA2B,qCAA3B,CACA,MAAOC,YAAP,KAAwB,gCAAxB,CACA,MAAOC,OAAP,KAAmB,0BAAnB,CAEA,KAAMC,wBAAyB,mCAA/B,CACA,QAASC,kCAAT,CAA2CC,MAA3C,CAAmD,CAE/CA,OAASA,QAAU,EAAnB,CACA,GAAIC,SAAU,KAAKA,OAAnB,CACA,GAAIC,UAAWZ,SAASW,OAAT,EAAkBE,WAAlB,EAAf,CACA,KAAMC,gBAAiBT,eAAeM,OAAf,EAAwBE,WAAxB,EAAvB,CAEA,GAAIE,YAAaL,OAAOK,UAAxB,CACA,GAAIC,MAAON,OAAOM,IAAlB,CACA,GAAIC,UAAWP,OAAOO,QAAtB,CACA,GAAIC,iBAAkBR,OAAOQ,eAA7B,CAEA,GAAIC,SAAJ,CACIC,oBADJ,CAEIC,WAFJ,CAGIC,WAHJ,CAIIC,MAJJ,CAKIC,SALJ,CAOA,QAASC,MAAT,EAAiB,CACbJ,YAAc,KAAd,CACAC,YAAc,IAAd,CACAF,qBAAuB,KAAvB,CAEAR,SAASc,EAAT,CAAYzB,OAAO0B,qBAAnB,CAA0CC,qBAA1C,CAAiET,QAAjE,EACAP,SAASc,EAAT,CAAYzB,OAAO4B,oBAAnB,CAAyCC,oBAAzC,CAA+DX,QAA/D,EACH,CAED,QAASY,wBAAT,EAAmC,CAC/B,MAAOvB,uBAAP,CACH,CAED,QAASwB,WAAT,CAAoBC,MAApB,CAA4B,CACxBC,eAAeD,MAAf,EACAT,UAAYrB,UAAUQ,OAAV,EAAmBE,WAAnB,EAAZ,CACH,CAED;;;OAIA,QAASsB,aAAT,CAAsBC,SAAtB,CAAiC,CAC7B,GAAI,CACAb,OAASnB,iBAAiBO,OAAjB,EAA0B0B,MAA1B,CAAiCf,WAAjC,CAA8Cc,SAA9C,CAAT,CACA,GAAI,CAACf,WAAL,CAAkB,CACd,KAAMiB,YAAaf,OAAOgB,SAAP,EAAnB,CACA,GAAID,WAAWE,cAAX,CAA0BzC,UAAU0C,UAApC,CAAJ,CAAqD,CACjDH,WAAWN,UAAX,CAAsBf,QAAtB,CAAgCC,eAAhC,EACH,CACDG,YAAc,IAAd,CACH,CACD,MAAOE,OAAP,CACH,CAAC,MAAOmB,CAAP,CAAU,CACR,GAAKN,UAAUO,MAAX,EAAuBP,UAAUQ,KAAV,CAAgBC,OAAhB,CAAwB,cAAxB,IAA4C,CAAC,CAApE,EAA2ET,UAAUQ,KAAV,CAAgBC,OAAhB,CAAwB,cAAxB,IAA4C,CAAC,CAA5H,CAAgI,CAC5H,GAAI,CACAtB,OAAST,eAAegC,mBAAf,EAAT,CACH,CAAC,MAAOJ,CAAP,CAAU,CACR3B,WAAWgC,gBAAX,CAA4B,kBAAoB/B,IAApB,CAA2B,iBAAvD,EACAD,WAAWiC,KAAX,CAAiB,GAAI1C,YAAJ,CAAgBC,OAAO0C,iCAAvB,CAA0D1C,OAAO2C,oCAAP,CAA8ClC,IAA9C,CAAqD,KAArD,CAA6D0B,EAAES,OAAzH,CAAjB,EACH,CACJ,CAPD,IAOO,CACHpC,WAAWgC,gBAAX,CAA4B,kBAAoB/B,IAApB,CAA2B,iBAAvD,EACAD,WAAWiC,KAAX,CAAiB,GAAI1C,YAAJ,CAAgBC,OAAO0C,iCAAvB,CAA0D1C,OAAO2C,oCAAP,CAA8ClC,IAAxG,CAAjB,EACH,CACJ,CACJ,CAED,QAASoC,QAAT,EAAmB,CACf,MAAOpC,KAAP,CACH,CAED,QAASuB,UAAT,EAAqB,CACjB,MAAOhB,OAAP,CACH,CAED,QAASW,eAAT,CAAwBmB,KAAxB,CAA+B,CAC3B/B,YAAc+B,KAAd,CACH,CAED,QAASC,eAAT,EAA0B,CACtB,MAAOhC,YAAP,CACH,CAED,QAASiC,mBAAT,EAA8B,CAC1B,MAAOrC,gBAAP,CACH,CAED,QAASsC,uBAAT,EAAkC,CAC9B,MAAO,MAAP,CACH,CAED,QAASC,mBAAT,EAA8B,CAC7B,CAED,QAASC,iBAAT,EAA4B,CAAE;AAC7B,CAED,QAASC,eAAT,EAA0B,CACtB,MAAO,EAAP,CACH,CAED,QAASC,wBAAT,EAAmC,CAC/B,MAAOxC,qBAAP,CACH,CAED,QAASyC,MAAT,CAAeC,OAAf,CAAwB,CACpBlD,SAASmD,GAAT,CAAa9D,OAAO0B,qBAApB,CAA2CC,qBAA3C,CAAkET,QAAlE,EACAP,SAASmD,GAAT,CAAa9D,OAAO4B,oBAApB,CAA0CC,oBAA1C,CAAgEX,QAAhE,EAEA,GAAI,CAAC2C,OAAD,EAAYvC,MAAhB,CAAwB,CACpBA,OAAOyC,KAAP,GACAzC,OAAOsC,KAAP,GACAtC,OAAS,IAAT,CACH,CACJ,CAED,QAASK,sBAAT,CAA+Bc,CAA/B,CAAkC,CAC9B,GAAIA,EAAEuB,MAAF,CAASV,kBAAT,KAAkCrC,eAAtC,CAAuD,CACnD,OACH,CAED,KAAMgD,OAAQ1C,UAAU2C,OAAV,CAAkBjD,gBAAgBkD,aAAhB,GAAgCC,EAAlD,CAAsD3B,EAAEuB,MAAF,CAASK,wBAAT,GAAoCD,EAA1F,CAAd,CAEA,GAAI,CAACH,KAAL,CAAY,CACRtD,SAAS2D,OAAT,CAAiBtE,OAAOuE,oBAAxB,CAA8C,CAC1CC,MAAO,CADmC,CAE1CR,OAAQvB,EAAEuB,MAFgC,CAA9C,EAGI;AACP,CACJ,CAED,QAASnC,qBAAT,CAA8BY,CAA9B,CAAiC,CAC7B,GAAIA,EAAEgC,aAAF,GAAoBxD,gBAAgByD,gBAAhB,EAApB,EAA2D,CAACjC,EAAEwB,KAAF,CAAQU,KAAxE,CAAgF,CAC5E,OACH,CAEDpD,UAAUqD,IAAV,CAAenC,EAAEwB,KAAjB,EACA3C,OAAOuD,MAAP,CAAcpC,EAAEwB,KAAhB,EAEAtD,SAAS2D,OAAT,CAAiBtE,OAAO8E,gBAAxB,CAA0C,CACtCC,QAAStC,EAAEsC,OAD2B,CAEtCN,cAAehC,EAAEgC,aAFqB,CAA1C,EAIH,CAED,QAASO,eAAT,CAAwBC,QAAxB,CAAkCC,gBAAlC,CAAoD,CAChD,KAAMjB,OAAQ1C,UAAU2C,OAAV,CAAkBe,QAAlB,CAA4BC,gBAA5B,CAAd,CAEA,GAAI,CAACjB,KAAL,CAAY,CACRtD,SAAS2D,OAAT,CAAiBtE,OAAOuE,oBAAxB,CAA8C,CAC1CC,MAAO,CADmC,CAE1CR,OAAQ9C,QAFkC,CAA9C,EAIH,CACJ,CAED,QAASiE,WAAT,EAAsB,CAClB,MAAO,KAAP,CACH,CAED,QAASC,sBAAT,CAA+BC,aAA/B,CAA8C,CAC1C,GAAI/D,OAAOgE,eAAP,GAA2BD,aAA3B,EAA4C,CAACE,MAAMF,aAAN,CAAjD,CAAuE,CACnE/D,OAAOgE,eAAP,CAAyBD,aAAzB,CACH,CACJ,CAEDnE,SAAW,CACPY,wBAAyBA,uBADlB,CAEPC,WAAYA,UAFL,CAGPG,aAAcA,YAHP,CAIPiB,QAASA,OAJF,CAKPG,mBAAoBA,kBALb,CAMPG,iBAAkBA,gBANX,CAOPnB,UAAWA,SAPJ,CAQPoB,eAAgBA,cART,CASPzB,eAAgBA,cATT,CAUPoB,eAAgBA,cAVT,CAWPM,wBAAyBA,uBAXlB,CAYPJ,uBAAwBA,sBAZjB,CAaPC,mBAAoBA,kBAbb,CAcPwB,eAAgBA,cAdT,CAePG,WAAYA,UAfL,CAgBPvB,MAAOA,KAhBA,CAiBPwB,sBAAuBA,qBAjBhB,CAAX,CAoBA5D,QAEA,MAAON,SAAP,CACH,CAEDV,kCAAkCgF,qBAAlC,CAA0DjF,sBAA1D,CACA,cAAeN,cAAawF,eAAb,CAA6BjF,iCAA7B,CAAf","file":"NotFragmentedTextBufferController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport InitCache from '../utils/InitCache';\nimport SourceBufferSink from '../SourceBufferSink';\nimport TextController from '../../streaming/text/TextController';\nimport DashJSError from '../../streaming/vo/DashJSError';\nimport Errors from '../../core/errors/Errors';\n\nconst BUFFER_CONTROLLER_TYPE = 'NotFragmentedTextBufferController';\nfunction NotFragmentedTextBufferController(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    const textController = TextController(context).getInstance();\n\n    let errHandler = config.errHandler;\n    let type = config.type;\n    let mimeType = config.mimeType;\n    let streamProcessor = config.streamProcessor;\n\n    let instance,\n        isBufferingCompleted,\n        initialized,\n        mediaSource,\n        buffer,\n        initCache;\n\n    function setup() {\n        initialized = false;\n        mediaSource = null;\n        isBufferingCompleted = false;\n\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.on(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\n    }\n\n    function getBufferControllerType() {\n        return BUFFER_CONTROLLER_TYPE;\n    }\n\n    function initialize(source) {\n        setMediaSource(source);\n        initCache = InitCache(context).getInstance();\n    }\n\n    /**\n     * @param {MediaInfo }mediaInfo\n     * @memberof BufferController#\n     */\n    function createBuffer(mediaInfo) {\n        try {\n            buffer = SourceBufferSink(context).create(mediaSource, mediaInfo);\n            if (!initialized) {\n                const textBuffer = buffer.getBuffer();\n                if (textBuffer.hasOwnProperty(Constants.INITIALIZE)) {\n                    textBuffer.initialize(mimeType, streamProcessor);\n                }\n                initialized = true;\n            }\n            return buffer;\n        } catch (e) {\n            if ((mediaInfo.isText) || (mediaInfo.codec.indexOf('codecs=\"stpp') !== -1) || (mediaInfo.codec.indexOf('codecs=\"wvtt') !== -1)) {\n                try {\n                    buffer = textController.getTextSourceBuffer();\n                } catch (e) {\n                    errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');\n                    errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + ' : ' + e.message));\n                }\n            } else {\n                errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');\n                errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));\n            }\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getBuffer() {\n        return buffer;\n    }\n\n    function setMediaSource(value) {\n        mediaSource = value;\n    }\n\n    function getMediaSource() {\n        return mediaSource;\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getIsPruningInProgress() {\n        return false;\n    }\n\n    function dischargePreBuffer() {\n    }\n\n    function setSeekStartTime() { //Unused - TODO Remove need for stub function\n    }\n\n    function getBufferLevel() {\n        return 0;\n    }\n\n    function getIsBufferingCompleted() {\n        return isBufferingCompleted;\n    }\n\n    function reset(errored) {\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\n\n        if (!errored && buffer) {\n            buffer.abort();\n            buffer.reset();\n            buffer = null;\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        const chunk = initCache.extract(streamProcessor.getStreamInfo().id, e.sender.getCurrentRepresentation().id);\n\n        if (!chunk) {\n            eventBus.trigger(Events.TIMED_TEXT_REQUESTED, {\n                index: 0,\n                sender: e.sender\n            }); //TODO make index dynamic if referring to MP?\n        }\n    }\n\n    function onInitFragmentLoaded(e) {\n        if (e.fragmentModel !== streamProcessor.getFragmentModel() || (!e.chunk.bytes)) {\n            return;\n        }\n\n        initCache.save(e.chunk);\n        buffer.append(e.chunk);\n\n        eventBus.trigger(Events.STREAM_COMPLETED, {\n            request: e.request,\n            fragmentModel: e.fragmentModel\n        });\n    }\n\n    function switchInitData(streamId, representationId) {\n        const chunk = initCache.extract(streamId, representationId);\n\n        if (!chunk) {\n            eventBus.trigger(Events.TIMED_TEXT_REQUESTED, {\n                index: 0,\n                sender: instance\n            });\n        }\n    }\n\n    function getRangeAt() {\n        return null;\n    }\n\n    function updateTimestampOffset(MSETimeOffset) {\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\n            buffer.timestampOffset = MSETimeOffset;\n        }\n    }\n\n    instance = {\n        getBufferControllerType: getBufferControllerType,\n        initialize: initialize,\n        createBuffer: createBuffer,\n        getType: getType,\n        getStreamProcessor: getStreamProcessor,\n        setSeekStartTime: setSeekStartTime,\n        getBuffer: getBuffer,\n        getBufferLevel: getBufferLevel,\n        setMediaSource: setMediaSource,\n        getMediaSource: getMediaSource,\n        getIsBufferingCompleted: getIsBufferingCompleted,\n        getIsPruningInProgress: getIsPruningInProgress,\n        dischargePreBuffer: dischargePreBuffer,\n        switchInitData: switchInitData,\n        getRangeAt: getRangeAt,\n        reset: reset,\n        updateTimestampOffset: updateTimestampOffset\n    };\n\n    setup();\n\n    return instance;\n}\n\nNotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;\nexport default FactoryMaker.getClassFactory(NotFragmentedTextBufferController);\n"]}