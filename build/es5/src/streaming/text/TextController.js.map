{"version":3,"sources":["../../../../../src/streaming/text/TextController.js"],"names":["Constants","FactoryMaker","TextSourceBuffer","TextTracks","VTTParser","TTMLParser","EventBus","Events","checkParameterType","TextController","context","instance","textSourceBuffer","errHandler","dashManifestModel","manifestModel","mediaController","videoModel","streamController","textTracks","vttParser","ttmlParser","eventBus","defaultLanguage","lastEnabledIndex","textDefaultEnabled","allTracksAreDisabled","forceTextStreaming","setup","getInstance","initialize","on","TEXT_TRACKS_QUEUE_INITIALIZED","onTextTracksAdded","resetInitialSettings","setConfig","config","getTextSourceBuffer","getAllTracksAreDisabled","addEmbeddedTrack","mediaInfo","setTextDefaultLanguage","lang","getTextDefaultLanguage","e","tracks","index","some","item","idx","setTextTrack","trigger","TEXT_TRACKS_ADDED","enabled","isTextEnabled","setTextDefaultEnabled","enable","getTextDefaultEnabled","enableText","getCurrentTrackIdx","enableForcedTextStreaming","getConfig","fragmentModel","fragmentedTracks","mediaInfosArr","streamProcessor","oldTrackIdx","setModeForTrackIdx","TEXT_HIDDEN","setCurrentTrackIdx","TEXT_SHOWING","currentTrackInfo","getCurrentTrackInfo","isFragmented","isEmbedded","i","length","id","currentFragTrack","getCurrentTrackFor","FRAGMENTED_TEXT","getActiveStreamInfo","abortRequests","removeExecutedRequestsBeforeTime","remove","deleteCuesFromTrackIdx","setTrack","setCurrentFragmentedTrackIdx","streamProcessors","getActiveStreamProcessors","getType","getIndexHandler","setCurrentTime","getTime","getScheduleController","start","TEXT","getMediaInfoArr","selectMediaInfo","reset","resetEmbedded","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"TextController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TextSourceBuffer from './TextSourceBuffer';\nimport TextTracks from './TextTracks';\nimport VTTParser from '../utils/VTTParser';\nimport TTMLParser from '../utils/TTMLParser';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction TextController() {\n\n    let context = this.context;\n\n    let instance,\n        textSourceBuffer,\n        errHandler,\n        dashManifestModel,\n        manifestModel,\n        mediaController,\n        videoModel,\n        streamController,\n        textTracks,\n        vttParser,\n        ttmlParser,\n        eventBus,\n        defaultLanguage,\n        lastEnabledIndex,\n        textDefaultEnabled, // this is used for default settings (each time a file is loaded, we check value of this settings )\n        allTracksAreDisabled, // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)\n        forceTextStreaming;\n\n    function setup() {\n\n        defaultLanguage = '';\n        lastEnabledIndex = -1;\n        textDefaultEnabled = true;\n        forceTextStreaming = false;\n        textTracks = TextTracks(context).getInstance();\n        vttParser = VTTParser(context).getInstance();\n        ttmlParser = TTMLParser(context).getInstance();\n        textSourceBuffer = TextSourceBuffer(context).getInstance();\n        eventBus = EventBus(context).getInstance();\n\n        textTracks.initialize();\n        eventBus.on(Events.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);\n\n        resetInitialSettings();\n    }\n\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.textTracks) {\n            textTracks = config.textTracks;\n        }\n        if (config.vttParser) {\n            vttParser = config.vttParser;\n        }\n        if (config.ttmlParser) {\n            ttmlParser = config.ttmlParser;\n        }\n\n        // create config for source buffer\n        textSourceBuffer.setConfig({\n            errHandler: errHandler,\n            dashManifestModel: dashManifestModel,\n            manifestModel: manifestModel,\n            mediaController: mediaController,\n            videoModel: videoModel,\n            streamController: streamController,\n            textTracks: textTracks,\n            vttParser: vttParser,\n            ttmlParser: ttmlParser\n        });\n    }\n\n    function getTextSourceBuffer() {\n        return textSourceBuffer;\n    }\n\n    function getAllTracksAreDisabled() {\n        return allTracksAreDisabled;\n    }\n\n    function addEmbeddedTrack(mediaInfo) {\n        textSourceBuffer.addEmbeddedTrack(mediaInfo);\n    }\n\n    function setTextDefaultLanguage(lang) {\n        checkParameterType(lang, 'string');\n        defaultLanguage = lang;\n    }\n\n    function getTextDefaultLanguage() {\n        return defaultLanguage;\n    }\n\n    function onTextTracksAdded(e) {\n        let tracks = e.tracks;\n        let index = e.index;\n\n        tracks.some((item, idx) => {\n            if (item.lang === defaultLanguage) {\n                this.setTextTrack(idx);\n                index = idx;\n                return true;\n            }\n        });\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n\n        lastEnabledIndex = index;\n        eventBus.trigger(Events.TEXT_TRACKS_ADDED, {\n            enabled: isTextEnabled(),\n            index: index,\n            tracks: tracks\n        });\n    }\n\n    function setTextDefaultEnabled(enable) {\n        checkParameterType(enable,'boolean');\n        textDefaultEnabled = enable;\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n    }\n\n    function getTextDefaultEnabled() {\n        return textDefaultEnabled;\n    }\n\n    function enableText(enable) {\n        checkParameterType(enable,'boolean');\n\n        if (isTextEnabled() !== enable) {\n            // change track selection\n            if (enable) {\n                // apply last enabled tractk\n                this.setTextTrack(lastEnabledIndex);\n            }\n\n            if (!enable) {\n                // keep last index and disable text track\n                lastEnabledIndex = this.getCurrentTrackIdx();\n                this.setTextTrack(-1);\n            }\n        }\n    }\n\n    function isTextEnabled() {\n        let enabled = true;\n        if (allTracksAreDisabled && !forceTextStreaming) {\n            enabled = false;\n        }\n        return enabled;\n    }\n\n    // when set to true NextFragmentRequestRule will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.\n    function enableForcedTextStreaming(enable) {\n        checkParameterType(enable,'boolean');\n        forceTextStreaming = enable;\n    }\n\n    function setTextTrack(idx) {\n        //For external time text file,  the only action needed to change a track is marking the track mode to showing.\n        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();\n        let config = textSourceBuffer.getConfig();\n        let fragmentModel = config.fragmentModel;\n        let fragmentedTracks = config.fragmentedTracks;\n        let videoModel = config.videoModel;\n        let mediaInfosArr,\n            streamProcessor;\n\n        allTracksAreDisabled = idx === -1 ? true : false;\n\n        let oldTrackIdx = textTracks.getCurrentTrackIdx();\n        if (oldTrackIdx !== idx) {\n            textTracks.setModeForTrackIdx(oldTrackIdx, Constants.TEXT_HIDDEN);\n            textTracks.setCurrentTrackIdx(idx);\n            textTracks.setModeForTrackIdx(idx, Constants.TEXT_SHOWING);\n\n            let currentTrackInfo = textTracks.getCurrentTrackInfo();\n\n            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {\n                for (let i = 0; i < fragmentedTracks.length; i++) {\n                    let mediaInfo = fragmentedTracks[i];\n                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index &&\n                        (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {\n                        let currentFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                        if (mediaInfo !== currentFragTrack) {\n                            fragmentModel.abortRequests();\n                            fragmentModel.removeExecutedRequestsBeforeTime();\n                            textSourceBuffer.remove();\n                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);\n                            mediaController.setTrack(mediaInfo);\n                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);\n                        } else if (oldTrackIdx === -1) {\n                            //in fragmented use case, if the user selects the older track (the one selected before disabled text track)\n                            //no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController\n                            //has to be restarted.\n                            const streamProcessors = streamController.getActiveStreamProcessors();\n                            for (let i = 0; i < streamProcessors.length; i++) {\n                                if (streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                                    streamProcessor = streamProcessors[i];\n                                    break;\n                                }\n                            }\n                            streamProcessor.getIndexHandler().setCurrentTime(videoModel.getTime());\n                            streamProcessor.getScheduleController().start();\n                        }\n                    }\n                }\n            } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {\n                const streamProcessors = streamController.getActiveStreamProcessors();\n                for (let i = 0; i < streamProcessors.length; i++) {\n                    if (streamProcessors[i].getType() === Constants.TEXT) {\n                        streamProcessor = streamProcessors[i];\n                        mediaInfosArr = streamProcessor.getMediaInfoArr();\n                        break;\n                    }\n                }\n\n                if (streamProcessor && mediaInfosArr) {\n                    for (let i = 0; i < mediaInfosArr.length; i++) {\n                        if (mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang) {\n                            streamProcessor.selectMediaInfo(mediaInfosArr[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function getCurrentTrackIdx() {\n        return textTracks.getCurrentTrackIdx();\n    }\n\n    function resetInitialSettings() {\n        allTracksAreDisabled = false;\n    }\n\n    function reset() {\n        resetInitialSettings();\n        textSourceBuffer.resetEmbedded();\n        textSourceBuffer.reset();\n    }\n\n    instance = {\n        setConfig: setConfig,\n        getTextSourceBuffer: getTextSourceBuffer,\n        getAllTracksAreDisabled: getAllTracksAreDisabled,\n        addEmbeddedTrack: addEmbeddedTrack,\n        getTextDefaultLanguage: getTextDefaultLanguage,\n        setTextDefaultLanguage: setTextDefaultLanguage,\n        setTextDefaultEnabled: setTextDefaultEnabled,\n        getTextDefaultEnabled: getTextDefaultEnabled,\n        enableText: enableText,\n        isTextEnabled: isTextEnabled,\n        setTextTrack: setTextTrack,\n        getCurrentTrackIdx: getCurrentTrackIdx,\n        enableForcedTextStreaming: enableForcedTextStreaming,\n        reset: reset\n    };\n    setup();\n    return instance;\n}\n\nTextController.__dashjs_factory_name = 'TextController';\nexport default FactoryMaker.getSingletonFactory(TextController);\n"]}