{"version":3,"sources":["../../../../../src/streaming/text/TextController.js"],"names":["Constants","FactoryMaker","TextSourceBuffer","TextTracks","VTTParser","TTMLParser","EventBus","Events","checkParameterType","TextController","context","instance","textSourceBuffer","errHandler","dashManifestModel","manifestModel","mediaController","videoModel","streamController","textTracks","vttParser","ttmlParser","eventBus","defaultLanguage","lastEnabledIndex","textDefaultEnabled","allTracksAreDisabled","forceTextStreaming","setup","getInstance","initialize","on","TEXT_TRACKS_QUEUE_INITIALIZED","onTextTracksAdded","resetInitialSettings","setConfig","config","getTextSourceBuffer","getAllTracksAreDisabled","addEmbeddedTrack","mediaInfo","setTextDefaultLanguage","lang","getTextDefaultLanguage","e","tracks","index","some","item","idx","setTextTrack","trigger","TEXT_TRACKS_ADDED","enabled","isTextEnabled","setTextDefaultEnabled","enable","getTextDefaultEnabled","enableText","getCurrentTrackIdx","enableForcedTextStreaming","getConfig","fragmentModel","fragmentedTracks","mediaInfosArr","streamProcessor","oldTrackIdx","setModeForTrackIdx","TEXT_HIDDEN","setCurrentTrackIdx","TEXT_SHOWING","currentTrackInfo","getCurrentTrackInfo","isFragmented","isEmbedded","i","length","id","currentFragTrack","getCurrentTrackFor","FRAGMENTED_TEXT","getActiveStreamInfo","abortRequests","removeExecutedRequestsBeforeTime","remove","deleteCuesFromTrackIdx","setTrack","setCurrentFragmentedTrackIdx","streamProcessors","getActiveStreamProcessors","getType","getIndexHandler","setCurrentTime","getTime","getScheduleController","start","TEXT","getMediaInfoArr","selectMediaInfo","reset","resetEmbedded","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"TextController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TextSourceBuffer from './TextSourceBuffer';\nimport TextTracks from './TextTracks';\nimport VTTParser from '../utils/VTTParser';\nimport TTMLParser from '../utils/TTMLParser';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction TextController() {\n\n    let context = this.context;\n\n    let instance,\n        textSourceBuffer,\n        errHandler,\n        dashManifestModel,\n        manifestModel,\n        mediaController,\n        videoModel,\n        streamController,\n        textTracks,\n        vttParser,\n        ttmlParser,\n        eventBus,\n        defaultLanguage,\n        lastEnabledIndex,\n        textDefaultEnabled, // this is used for default settings (each time a file is loaded, we check value of this settings )\n        allTracksAreDisabled, // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)\n        forceTextStreaming;\n\n    function setup() {\n\n        defaultLanguage = '';\n        lastEnabledIndex = -1;\n        textDefaultEnabled = true;\n        forceTextStreaming = false;\n        textTracks = TextTracks(context).getInstance();\n        vttParser = VTTParser(context).getInstance();\n        ttmlParser = TTMLParser(context).getInstance();\n        textSourceBuffer = TextSourceBuffer(context).getInstance();\n        eventBus = EventBus(context).getInstance();\n\n        textTracks.initialize();\n        eventBus.on(Events.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);\n\n        resetInitialSettings();\n    }\n\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.textTracks) {\n            textTracks = config.textTracks;\n        }\n        if (config.vttParser) {\n            vttParser = config.vttParser;\n        }\n        if (config.ttmlParser) {\n            ttmlParser = config.ttmlParser;\n        }\n\n        // create config for source buffer\n        textSourceBuffer.setConfig({\n            errHandler: errHandler,\n            dashManifestModel: dashManifestModel,\n            manifestModel: manifestModel,\n            mediaController: mediaController,\n            videoModel: videoModel,\n            streamController: streamController,\n            textTracks: textTracks,\n            vttParser: vttParser,\n            ttmlParser: ttmlParser\n        });\n    }\n\n    function getTextSourceBuffer() {\n        return textSourceBuffer;\n    }\n\n    function getAllTracksAreDisabled() {\n        return allTracksAreDisabled;\n    }\n\n    function addEmbeddedTrack(mediaInfo) {\n        textSourceBuffer.addEmbeddedTrack(mediaInfo);\n    }\n\n    function setTextDefaultLanguage(lang) {\n        checkParameterType(lang, 'string');\n        defaultLanguage = lang;\n    }\n\n    function getTextDefaultLanguage() {\n        return defaultLanguage;\n    }\n\n    function onTextTracksAdded(e) {\n        let tracks = e.tracks;\n        let index = e.index;\n\n        tracks.some((item, idx) => {\n            if (item.lang === defaultLanguage) {\n                this.setTextTrack(idx);\n                index = idx;\n                return true;\n            }\n        });\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n\n        lastEnabledIndex = index;\n        eventBus.trigger(Events.TEXT_TRACKS_ADDED, {\n            enabled: isTextEnabled(),\n            index: index,\n            tracks: tracks\n        });\n    }\n\n    function setTextDefaultEnabled(enable) {\n        checkParameterType(enable,'boolean');\n        textDefaultEnabled = enable;\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n    }\n\n    function getTextDefaultEnabled() {\n        return textDefaultEnabled;\n    }\n\n    function enableText(enable) {\n        checkParameterType(enable,'boolean');\n\n        if (isTextEnabled() !== enable) {\n            // change track selection\n            if (enable) {\n                // apply last enabled tractk\n                this.setTextTrack(lastEnabledIndex);\n            }\n\n            if (!enable) {\n                // keep last index and disable text track\n                lastEnabledIndex = this.getCurrentTrackIdx();\n                this.setTextTrack(-1);\n            }\n        }\n    }\n\n    function isTextEnabled() {\n        let enabled = true;\n        if (allTracksAreDisabled && !forceTextStreaming) {\n            enabled = false;\n        }\n        return enabled;\n    }\n\n    // when set to true NextFragmentRequestRule will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.\n    function enableForcedTextStreaming(enable) {\n        checkParameterType(enable,'boolean');\n        forceTextStreaming = enable;\n    }\n\n    function setTextTrack(idx) {\n        //For external time text file,  the only action needed to change a track is marking the track mode to showing.\n        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();\n        let config = textSourceBuffer.getConfig();\n        let fragmentModel = config.fragmentModel;\n        let fragmentedTracks = config.fragmentedTracks;\n        let videoModel = config.videoModel;\n        let mediaInfosArr,\n            streamProcessor;\n\n        allTracksAreDisabled = idx === -1 ? true : false;\n\n        let oldTrackIdx = textTracks.getCurrentTrackIdx();\n        if (oldTrackIdx !== idx) {\n            textTracks.setModeForTrackIdx(oldTrackIdx, Constants.TEXT_HIDDEN);\n            textTracks.setCurrentTrackIdx(idx);\n            textTracks.setModeForTrackIdx(idx, Constants.TEXT_SHOWING);\n\n            let currentTrackInfo = textTracks.getCurrentTrackInfo();\n\n            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {\n                for (let i = 0; i < fragmentedTracks.length; i++) {\n                    let mediaInfo = fragmentedTracks[i];\n                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index &&\n                        (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {\n                        let currentFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                        if (mediaInfo !== currentFragTrack) {\n                            fragmentModel.abortRequests();\n                            fragmentModel.removeExecutedRequestsBeforeTime();\n                            textSourceBuffer.remove();\n                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);\n                            mediaController.setTrack(mediaInfo);\n                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);\n                        } else if (oldTrackIdx === -1) {\n                            //in fragmented use case, if the user selects the older track (the one selected before disabled text track)\n                            //no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController\n                            //has to be restarted.\n                            const streamProcessors = streamController.getActiveStreamProcessors();\n                            for (let i = 0; i < streamProcessors.length; i++) {\n                                if (streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                                    streamProcessor = streamProcessors[i];\n                                    break;\n                                }\n                            }\n                            streamProcessor.getIndexHandler().setCurrentTime(videoModel.getTime());\n                            streamProcessor.getScheduleController().start();\n                        }\n                    }\n                }\n            } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {\n                const streamProcessors = streamController.getActiveStreamProcessors();\n                for (let i = 0; i < streamProcessors.length; i++) {\n                    if (streamProcessors[i].getType() === Constants.TEXT) {\n                        streamProcessor = streamProcessors[i];\n                        mediaInfosArr = streamProcessor.getMediaInfoArr();\n                        break;\n                    }\n                }\n\n                if (streamProcessor && mediaInfosArr) {\n                    for (let i = 0; i < mediaInfosArr.length; i++) {\n                        if (mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang) {\n                            streamProcessor.selectMediaInfo(mediaInfosArr[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function getCurrentTrackIdx() {\n        return textTracks.getCurrentTrackIdx();\n    }\n\n    function resetInitialSettings() {\n        allTracksAreDisabled = false;\n    }\n\n    function reset() {\n        resetInitialSettings();\n        textSourceBuffer.resetEmbedded();\n        textSourceBuffer.reset();\n    }\n\n    instance = {\n        setConfig: setConfig,\n        getTextSourceBuffer: getTextSourceBuffer,\n        getAllTracksAreDisabled: getAllTracksAreDisabled,\n        addEmbeddedTrack: addEmbeddedTrack,\n        getTextDefaultLanguage: getTextDefaultLanguage,\n        setTextDefaultLanguage: setTextDefaultLanguage,\n        setTextDefaultEnabled: setTextDefaultEnabled,\n        getTextDefaultEnabled: getTextDefaultEnabled,\n        enableText: enableText,\n        isTextEnabled: isTextEnabled,\n        setTextTrack: setTextTrack,\n        getCurrentTrackIdx: getCurrentTrackIdx,\n        enableForcedTextStreaming: enableForcedTextStreaming,\n        reset: reset\n    };\n    setup();\n    return instance;\n}\n\nTextController.__dashjs_factory_name = 'TextController';\nexport default FactoryMaker.getSingletonFactory(TextController);\n"]}