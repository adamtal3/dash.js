{"version":3,"sources":["../../../../src/streaming/XlinkLoader.js"],"names":["DashJSError","HTTPLoader","HTTPRequest","TextRequest","EventBus","Events","FactoryMaker","Errors","XlinkLoader","config","RESOLVE_TO_ZERO","context","eventBus","getInstance","httpLoader","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","instance","load","url","element","resolveObject","report","content","resolveToZero","resolved","resolvedContent","trigger","XLINK_ELEMENT_LOADED","error","XLINK_LOADER_LOADING_FAILURE_ERROR_CODE","XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE","request","XLINK_EXPANSION_TYPE","success","data","reset","abort","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,WAAR,QAA0B,0BAA1B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;;AAEzBA,aAASA,UAAU,EAAnB;AACA,UAAMC,kBAAkB,oCAAxB;;AAEA,UAAMC,UAAW,KAAKA,OAAtB;AACA,UAAMC,WAAWR,SAASO,OAAT,EAAkBE,WAAlB,EAAjB;;AAEA,QAAIC,aAAab,WAAWU,OAAX,EAAoBI,MAApB,CAA2B;AACxCC,oBAAYP,OAAOO,UADqB;AAExCC,sBAAcR,OAAOQ,YAFmB;AAGxCC,0BAAkBT,OAAOS,gBAHe;AAIxCC,yBAAiBV,OAAOU;AAJgB,KAA3B,CAAjB;;AAOA,QAAIC,QAAJ;;AAEA,aAASC,IAAT,CAAcC,GAAd,EAAmBC,OAAnB,EAA4BC,aAA5B,EAA2C;AACvC,cAAMC,SAAS,UAAUC,OAAV,EAAmBC,aAAnB,EAAkC;AAC7CJ,oBAAQK,QAAR,GAAmB,IAAnB;AACAL,oBAAQM,eAAR,GAA0BH,UAAUA,OAAV,GAAoB,IAA9C;;AAEAd,qBAASkB,OAAT,CAAiBzB,OAAO0B,oBAAxB,EAA8C;AAC1CR,yBAASA,OADiC;AAE1CC,+BAAeA,aAF2B;AAG1CQ,uBAAON,WAAWC,aAAX,GACH,IADG,GAEH,IAAI3B,WAAJ,CACIO,OAAO0B,uCADX,EAEI1B,OAAO2B,0CAAP,GAAoDZ,GAFxD;AALsC,aAA9C;AAUH,SAdD;;AAgBA,YAAIA,QAAQZ,eAAZ,EAA6B;AACzBe,mBAAO,IAAP,EAAa,IAAb;AACH,SAFD,MAEO;AACH,kBAAMU,UAAU,IAAIhC,WAAJ,CAAgBmB,GAAhB,EAAqBpB,YAAYkC,oBAAjC,CAAhB;;AAEAtB,uBAAWO,IAAX,CAAgB;AACZc,yBAASA,OADG;AAEZE,yBAAS,UAAUC,IAAV,EAAgB;AACrBb,2BAAOa,IAAP;AACH,iBAJW;AAKZN,uBAAO,YAAY;AACfP,2BAAO,IAAP;AACH;AAPW,aAAhB;AASH;AACJ;;AAED,aAASc,KAAT,GAAiB;AACb,YAAIzB,UAAJ,EAAgB;AACZA,uBAAW0B,KAAX;AACA1B,yBAAa,IAAb;AACH;AACJ;;AAEDM,eAAW;AACPC,cAAMA,IADC;AAEPkB,eAAOA;AAFA,KAAX;;AAKA,WAAOnB,QAAP;AACH;;AAEDZ,YAAYiC,qBAAZ,GAAoC,aAApC;AACA,eAAenC,aAAaoC,eAAb,CAA6BlC,WAA7B,CAAf","file":"XlinkLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashJSError from './vo/DashJSError';\nimport HTTPLoader from './net/HTTPLoader';\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\nimport TextRequest from './vo/TextRequest';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Errors from '../core/errors/Errors';\n\nfunction XlinkLoader(config) {\n\n    config = config || {};\n    const RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\n\n    const context  = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let httpLoader = HTTPLoader(context).create({\n        errHandler: config.errHandler,\n        metricsModel: config.metricsModel,\n        mediaPlayerModel: config.mediaPlayerModel,\n        requestModifier: config.requestModifier\n    });\n\n    let instance;\n\n    function load(url, element, resolveObject) {\n        const report = function (content, resolveToZero) {\n            element.resolved = true;\n            element.resolvedContent = content ? content : null;\n\n            eventBus.trigger(Events.XLINK_ELEMENT_LOADED, {\n                element: element,\n                resolveObject: resolveObject,\n                error: content || resolveToZero ?\n                    null :\n                    new DashJSError(\n                        Errors.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE,\n                        Errors.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE + url\n                    )\n            });\n        };\n\n        if (url === RESOLVE_TO_ZERO) {\n            report(null, true);\n        } else {\n            const request = new TextRequest(url, HTTPRequest.XLINK_EXPANSION_TYPE);\n\n            httpLoader.load({\n                request: request,\n                success: function (data) {\n                    report(data);\n                },\n                error: function () {\n                    report(null);\n                }\n            });\n        }\n    }\n\n    function reset() {\n        if (httpLoader) {\n            httpLoader.abort();\n            httpLoader = null;\n        }\n    }\n\n    instance = {\n        load: load,\n        reset: reset\n    };\n\n    return instance;\n}\n\nXlinkLoader.__dashjs_factory_name = 'XlinkLoader';\nexport default FactoryMaker.getClassFactory(XlinkLoader);"]}